Directory structure:
└── Random/
    ├── README.md
    ├── build.gradle.kts
    ├── CONTRIBUTING.md
    ├── gradle.properties
    ├── gradlew
    ├── gradlew.bat
    ├── LICENSE
    ├── README_EN.md
    ├── settings.gradle.kts
    ├── app/
    │   ├── build.gradle.kts
    │   ├── google-services.json
    │   ├── proguard-rules.pro
    │   ├── release/
    │   │   └── app-release.aab
    │   └── src/
    │       ├── androidTest/
    │       │   └── java/
    │       │       └── com/
    │       │           └── byteflipper/
    │       │               └── random/
    │       │                   └── ExampleInstrumentedTest.kt
    │       ├── main/
    │       │   ├── AndroidManifest.xml
    │       │   ├── java/
    │       │   │   └── com/
    │       │   │       └── byteflipper/
    │       │   │           └── random/
    │       │   │               ├── MainActivity.kt
    │       │   │               ├── data/
    │       │   │               │   ├── db/
    │       │   │               │   │   ├── AppDatabase.kt
    │       │   │               │   │   └── Converters.kt
    │       │   │               │   ├── di/
    │       │   │               │   │   └── DatabaseModule.kt
    │       │   │               │   ├── preset/
    │       │   │               │   │   ├── ListPreset.kt
    │       │   │               │   │   ├── ListPresetDao.kt
    │       │   │               │   │   └── ListPresetRepository.kt
    │       │   │               │   └── settings/
    │       │   │               │       └── SettingsRepository.kt
    │       │   │               ├── navigation/
    │       │   │               │   └── NavGraph.kt
    │       │   │               ├── ui/
    │       │   │               │   ├── about/
    │       │   │               │   │   └── AboutScreen.kt
    │       │   │               │   ├── coin/
    │       │   │               │   │   └── CoinScreen.kt
    │       │   │               │   ├── components/
    │       │   │               │   │   ├── AnimatedActionItem.kt
    │       │   │               │   │   ├── AppInfoCard.kt
    │       │   │               │   │   ├── EditorList.kt
    │       │   │               │   │   ├── ExpandableSection.kt
    │       │   │               │   │   ├── FlipCardOverlay.kt
    │       │   │               │   │   ├── GeneratorConfigDialog.kt
    │       │   │               │   │   ├── IconCard.kt
    │       │   │               │   │   ├── InfoCard.kt
    │       │   │               │   │   ├── PreferenceCategory.kt
    │       │   │               │   │   ├── RadioButtonGroupPreference.kt
    │       │   │               │   │   ├── RadioButtonPreference.kt
    │       │   │               │   │   ├── SizedFab.kt
    │       │   │               │   │   ├── SplashScreen.kt
    │       │   │               │   │   ├── SwitchPreference.kt
    │       │   │               │   │   └── VersionInfoCard.kt
    │       │   │               │   ├── dice/
    │       │   │               │   │   └── DiceScreen.kt
    │       │   │               │   ├── home/
    │       │   │               │   │   ├── HomeScreen.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── CreateListDialog.kt
    │       │   │               │   │       ├── MenuCard.kt
    │       │   │               │   │       ├── PresetActionButton.kt
    │       │   │               │   │       ├── PresetButton.kt
    │       │   │               │   │       ├── PresetCard.kt
    │       │   │               │   │       ├── PresetList.kt
    │       │   │               │   │       ├── PresetQuickActionButton.kt
    │       │   │               │   │       └── RenameListDialog.kt
    │       │   │               │   ├── lists/
    │       │   │               │   │   └── ListScreen.kt
    │       │   │               │   ├── lot/
    │       │   │               │   │   └── LotScreen.kt
    │       │   │               │   ├── numbers/
    │       │   │               │   │   └── NumbersScreen.kt
    │       │   │               │   ├── settings/
    │       │   │               │   │   └── SettingsScreen.kt
    │       │   │               │   └── theme/
    │       │   │               │       ├── Color.kt
    │       │   │               │       ├── Theme.kt
    │       │   │               │       └── Type.kt
    │       │   │               └── utils/
    │       │   │                   └── ChromeCustomTabUtil.kt
    │       │   └── res/
    │       │       ├── drawable/
    │       │       │   ├── add_24px.xml
    │       │       │   ├── apps_24px.xml
    │       │       │   ├── autorenew_24px.xml
    │       │       │   ├── bug_report_24px.xml
    │       │       │   ├── check_24px.xml
    │       │       │   ├── check_box_24px.xml
    │       │       │   ├── code_24px.xml
    │       │       │   ├── colors_24px.xml
    │       │       │   ├── contrast_24px.xml
    │       │       │   ├── dark_mode_24px.xml
    │       │       │   ├── delete_24px.xml
    │       │       │   ├── edit_24px.xml
    │       │       │   ├── format_size_24px.xml
    │       │       │   ├── gavel_24px.xml
    │       │       │   ├── github_24.xml
    │       │       │   ├── ic_launcher_background.xml
    │       │       │   ├── ic_launcher_foreground.xml
    │       │       │   ├── ifl_24px.xml
    │       │       │   ├── info_24px.xml
    │       │       │   ├── light_mode_24px.xml
    │       │       │   ├── list_alt_24px.xml
    │       │       │   ├── looks_one_24px.xml
    │       │       │   ├── mobile_vibrate_24px.xml
    │       │       │   ├── mobile_vibrate_off_24px.xml
    │       │       │   ├── music_note_24px.xml
    │       │       │   ├── music_off_24px.xml
    │       │       │   ├── night_sight_auto_24px.xml
    │       │       │   ├── numbers_24px.xml
    │       │       │   ├── paid_24px.xml
    │       │       │   ├── palette_24px.xml
    │       │       │   ├── person_apron_24px.xml
    │       │       │   ├── privacy_tip_24px.xml
    │       │       │   ├── rate_review_24px.xml
    │       │       │   ├── repeat_24px.xml
    │       │       │   ├── restart_alt_24px.xml
    │       │       │   ├── save_24px.xml
    │       │       │   ├── settings_24px.xml
    │       │       │   ├── settings_backup_restore_24px.xml
    │       │       │   ├── telegram_24.xml
    │       │       │   ├── timer_24px.xml
    │       │       │   ├── transparent_drawable.xml
    │       │       │   ├── tune_24px.xml
    │       │       │   ├── update_24px.xml
    │       │       │   ├── vk_24.xml
    │       │       │   └── web_24px.xml
    │       │       ├── mipmap-anydpi-v26/
    │       │       │   ├── ic_launcher.xml
    │       │       │   ├── ic_launcher_monochrome.xml
    │       │       │   ├── ic_launcher_monochrome_round.xml
    │       │       │   └── ic_launcher_round.xml
    │       │       ├── mipmap-hdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-mdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── values/
    │       │       │   ├── colors.xml
    │       │       │   ├── ic_launcher_background.xml
    │       │       │   ├── ic_launcher_monochrome_background.xml
    │       │       │   ├── strings.xml
    │       │       │   └── themes.xml
    │       │       ├── values-night/
    │       │       │   └── themes.xml
    │       │       ├── values-ru/
    │       │       │   └── strings.xml
    │       │       └── xml/
    │       │           ├── backup_rules.xml
    │       │           ├── data_extraction_rules.xml
    │       │           └── locale_config.xml
    │       └── test/
    │           └── java/
    │               └── com/
    │                   └── byteflipper/
    │                       └── random/
    │                           └── ExampleUnitTest.kt
    ├── gradle/
    │   ├── libs.versions.toml
    │   └── wrapper/
    │       └── gradle-wrapper.properties
    └── .github/
        ├── ISSUE_TEMPLATE.md
        └── PULL_REQUEST_TEMPLATE.md

================================================
FILE: README.md
================================================
# Random — генератор случайностей 🎲✨

<div align="center">
  <img src="app/src/main/ic_launcher-playstore.png" alt="Random App Logo" width="120" height="120">
  <h3>Когда выбор сложный — доверься случайности</h3>
  <p>Один тап — и решение готово</p>
  <p><a href="README_EN.md">🇺🇸 Read in English</a></p>
</div>

![Android 9+](https://img.shields.io/badge/Android-9%2B-3DDC84?logo=android&logoColor=white)
![Made with Kotlin](https://img.shields.io/badge/Made%20with-Kotlin-7F52FF?logo=kotlin&logoColor=white)
![Jetpack Compose](https://img.shields.io/badge/Jetpack%20Compose-UI-4285F4)
![Material 3](https://img.shields.io/badge/Material%203-Design-FF6F00)
![Privacy friendly](https://img.shields.io/badge/Privacy-friendly-00BFA5)
![No ads](https://img.shields.io/badge/No%20ads-%20-4CAF50)
![Offline](https://img.shields.io/badge/Works-Offline-795548)
![MIT](https://img.shields.io/badge/License-MIT-black)

## 🚀 Что умеет

- 🔢 **Числа**: задайте диапазон ОТ–ДО, получите 1–100 результатов. Можно без повторов и с красивой анимацией «переворота».
- 📋 **Списки**: вводите свои варианты или используйте пресеты. Выбирайте случайные элементы, учитывайте «уже выпавшие».
- 🎲 **Игральные кости**: бросайте 1–10 кубиков, наблюдайте анимацию и сумму очков.
- 🎯 **Жребий**: сетка карточек с отмеченными ячейками — «показать все» или «перемешать» в один тап.
- 🪙 **Монетка**: реалистичный подброс — орёл или решка.
- ⚙️ **Настройки**: система/светлая/тёмная тема, динамические цвета (Material You), размер кнопки действия.

## 📱 Как пользоваться

### 🔢 Числа
1. Введите ОТ и ДО
2. Нажмите «обновить» → получите результат(ы)
3. Хотите без повторов или задержку? Загляните в «Настройки генерации»

### 📋 Списки
1. Добавьте пункты (каждый с новой строки) или откройте сохранённый список
2. Нажмите «обновить» → выпадут случайные элементы
3. Сохраните список как пресет — он появится на главном экране

### 🎲 Кости
1. Выберите количество кубиков (1–10)
2. Нажмите «бросить» или тапайте по отдельным кубикам
3. Смотрите суммарное значение

### 🎯 Жребий
1. Укажите общее количество карточек и сколько из них отмечены
2. Сгенерируйте и открывайте — «Показать все» или «Перемешать»

### 🪙 Монетка
1. Свайпните вверх по монете или тапните по кнопке
2. Узнайте, что выпало — Орёл или Решка

## 🔐 Приватность и удобство

- 🔐 **Нет аккаунтов**, трекинга и аналитики
- 📵 **Работает офлайн**, интернет не требуется
- 💾 **Данные и настройки** хранятся локально на вашем устройстве
- 🌓 **Поддержка тёмной темы** и динамических цветов (Material You)
- 🎨 **Современный Material 3** дизайн

## ❓ Вопросы и ответы (FAQ)

**Будут повторы при генерации?**
> Можно включить/выключить. Для чисел и списков есть режим «без повторов».

**Мои списки сохранятся?**
> Да. Можно сохранить как пресет и быстро открывать с главного экрана.

**Есть реклама или платные подписки?**
> Нет. Приложение без рекламы и платежей.

**Нужен интернет?**
> Нет, всё работает локально.

## 📥 Скачать

- Вкладка [Releases](https://github.com/ByteFlipper-58/Random/releases) (если недоступно — соберите приложение в Android Studio)

## 🛠 Технологии

- **Язык**: Kotlin
- **UI Framework**: Jetpack Compose
- **Дизайн**: Material 3
- **Минимальная версия Android**: API 28 (Android 9.0)
- **Целевая версия Android**: API 36 (Android 14)

## 🤝 Обратная связь

Замечания, идеи и пожелания приветствуются! Оставьте [issue](https://github.com/ByteFlipper-58/Random/issues) или предложите улучшение через [pull request](https://github.com/ByteFlipper-58/Random/pulls).

## 📄 Лицензия

MIT — используйте свободно.

---

<div align="center">
  <p>Сделано с ❤️ командой <strong>ByteFlipper</strong></p>
</div>



================================================
FILE: build.gradle.kts
================================================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    alias(libs.plugins.google.gms.google.services) apply false
    alias(libs.plugins.google.firebase.crashlytics) apply false
}


================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to Random

Thank you for your interest in contributing to the Random app! This document provides guidelines and information for contributors.

## рџљЂ Getting Started

### Prerequisites
- Android Studio Hedgehog or later
- Android SDK API 28+
- Kotlin 1.9+
- JDK 11+

### Setup
1. Fork the repository
2. Clone your fork: `git clone https://github.com/YOUR_USERNAME/Random.git`
3. Open the project in Android Studio
4. Sync Gradle files and build the project

## рџ›  Development Guidelines

### Code Style
- Follow Kotlin coding conventions
- Use meaningful variable and function names
- Add comments for complex logic
- Keep functions small and focused

### Architecture
- Follow MVVM pattern with Repository pattern
- Use Jetpack Compose for UI
- Implement proper separation of concerns
- Use dependency injection where appropriate

### Testing
- Write unit tests for business logic
- Test UI components with Compose testing
- Ensure all new features have test coverage

## рџ“ќ Pull Request Process

1. **Create a feature branch** from `main`
2. **Make your changes** following the guidelines above
3. **Test thoroughly** on different Android versions
4. **Update documentation** if needed
5. **Submit a PR** with a clear description

### PR Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Code refactoring

## Testing
- [ ] Unit tests pass
- [ ] UI tests pass
- [ ] Tested on different devices

## Screenshots (if applicable)
Add screenshots for UI changes
```

## рџђ› Bug Reports

When reporting bugs, please include:
- Device model and Android version
- Steps to reproduce
- Expected vs actual behavior
- Screenshots or screen recordings
- Logs (if applicable)

## рџ’Ў Feature Requests

For feature requests:
- Describe the use case
- Explain why it's needed
- Provide examples if possible
- Consider implementation complexity

## рџ“љ Resources

- [Kotlin Documentation](https://kotlinlang.org/docs/home.html)
- [Jetpack Compose](https://developer.android.com/jetpack/compose)
- [Material 3 Design](https://m3.material.io/)
- [Android Developer Guide](https://developer.android.com/guide)

## рџ¤ќ Community

- Join our [Discord server](https://discord.gg/byteflipper)
- Follow us on [Telegram](https://t.me/byte_flipper)
- Check out our [GitHub organization](https://github.com/ByteFlipper-58)

## рџ“„ License

By contributing, you agree that your contributions will be licensed under the MIT License.

---

Thank you for contributing to Random! рџЋІвњЁ



================================================
FILE: gradle.properties
================================================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

org.gradle.caching=true
org.gradle.daemon=true
org.gradle.parallel=true
kotlin.incremental=true
kotlin.compiler.execution.strategy=in-process


================================================
FILE: gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2024 ByteFlipper

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: README_EN.md
================================================
# Random вЂ” Random Generator рџЋІвњЁ

<div align="center">
  <img src="app/src/main/ic_launcher-playstore.png" alt="Random App Logo" width="120" height="120">
  <h3>When the choice is difficult вЂ” trust randomness</h3>
  <p>One tap вЂ” and the decision is ready</p>
  <p><a href="README.md">рџ‡·рџ‡є Р§РёС‚Р°С‚СЊ РЅР° СЂСѓСЃСЃРєРѕРј</a></p>
</div>

![Android 9+](https://img.shields.io/badge/Android-9%2B-3DDC84?logo=android&logoColor=white)
![Made with Kotlin](https://img.shields.io/badge/Made%20with-Kotlin-7F52FF?logo=kotlin&logoColor=white)
![Jetpack Compose](https://img.shields.io/badge/Jetpack%20Compose-UI-4285F4)
![Material 3](https://img.shields.io/badge/Material%203-Design-FF6F00)
![Privacy friendly](https://img.shields.io/badge/Privacy-friendly-00BFA5)
![No ads](https://img.shields.io/badge/No%20ads-%20-4CAF50)
![Offline](https://img.shields.io/badge/Works-Offline-795548)
![MIT](https://img.shields.io/badge/License-MIT-black)

## рџљЂ Features

- рџ”ў **Numbers**: set FROM-TO range, get 1-100 results. Available without repetitions and with beautiful "flip" animation.
- рџ“‹ **Lists**: enter your options or use presets. Choose random elements, consider "already dropped" ones.
- рџЋІ **Dice**: roll 1-10 dice, watch animation and sum of points.
- рџЋЇ **Lot**: grid of cards with marked cells вЂ” "show all" or "shuffle" in one tap.
- рџЄ™ **Coin**: realistic toss вЂ” heads or tails.
- вљ™пёЏ **Settings**: system/light/dark theme, dynamic colors (Material You), action button size.

## рџ“± How to use

### рџ”ў Numbers
1. Enter FROM and TO
2. Press "generate" в†’ get result(s)
3. Want without repetitions or delay? Check "Generator settings"

### рџ“‹ Lists
1. Add items (each on a new line) or open a saved list
2. Press "generate" в†’ random elements will drop
3. Save the list as a preset вЂ” it will appear on the main screen

### рџЋІ Dice
1. Choose the number of dice (1-10)
2. Press "roll" or tap on individual dice
3. Watch the total value

### рџЋЇ Lot
1. Specify the total number of cards and how many are marked
2. Generate and open вЂ” "Show all" or "Shuffle"

### рџЄ™ Coin
1. Swipe up on the coin or tap the button
2. Find out what came up вЂ” Heads or Tails

## рџ”ђ Privacy and convenience

- рџ”ђ **No accounts**, tracking or analytics
- рџ“µ **Works offline**, internet not required
- рџ’ѕ **Data and settings** stored locally on your device
- рџЊ“ **Dark theme support** and dynamic colors (Material You)
- рџЋЁ **Modern Material 3** design

## вќ“ FAQ

**Will there be repetitions during generation?**
> Can be enabled/disabled. For numbers and lists there is a "no repetitions" mode.

**Will my lists be saved?**
> Yes. You can save as a preset and quickly open from the main screen.

**Is there advertising or paid subscriptions?**
> No. The app is ad-free and payment-free.

**Do I need internet?**
> No, everything works locally.

## рџ“Ґ Download

- [Releases](https://github.com/ByteFlipper-58/Random/releases) tab (if not available вЂ” build the app in Android Studio)

## рџ›  Technologies

- **Language**: Kotlin
- **UI Framework**: Jetpack Compose
- **Design**: Material 3
- **Minimum Android version**: API 28 (Android 9.0)
- **Target Android version**: API 36 (Android 14)

## рџ¤ќ Feedback

Comments, ideas and suggestions are welcome! Leave an [issue](https://github.com/ByteFlipper-58/Random/issues) or suggest an improvement via [pull request](https://github.com/ByteFlipper-58/Random/pulls).

## рџ“„ License

MIT вЂ” use freely.

---

<div align="center">
  <p>Made with вќ¤пёЏ by <strong>ByteFlipper</strong> team</p>
</div>



================================================
FILE: settings.gradle.kts
================================================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Random"
include(":app")



================================================
FILE: app/build.gradle.kts
================================================
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
    alias(libs.plugins.google.gms.google.services)
    alias(libs.plugins.google.firebase.crashlytics)
}

android {
    namespace = "com.byteflipper.random"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.byteflipper.random"
        minSdk = 28
        targetSdk = 36
        versionCode = 2
        versionName = "0.0.2 ALPHA"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlin {
        compilerOptions {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)
        }
    }
    buildFeatures {
        compose = true
        buildConfig = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.appcompat)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.datastore.preferences)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.browser)
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.messaging)
    implementation(libs.firebase.inappmessaging.display)
    implementation(libs.play.billing)
    implementation(libs.material3)
    implementation(libs.reorderable)
    implementation("net.kibotu:androidx-splashscreen-compose:1.0.0")
    ksp(libs.androidx.room.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


================================================
FILE: app/google-services.json
================================================
{
  "project_info": {
    "project_number": "38255035757",
    "project_id": "random-c528e",
    "storage_bucket": "random-c528e.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:38255035757:android:6cdda94a14587238a68664",
        "android_client_info": {
          "package_name": "com.byteflipper.random"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDlHMXNsASeyTn6qo9k4VVVY_xyVZz-6rc"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}


================================================
FILE: app/proguard-rules.pro
================================================
# --- РћСЃРЅРѕРІРЅС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ (РЅСѓР¶РЅС‹ РґР»СЏ Р°РЅРЅРѕС‚Р°С†РёР№/Р»РёРЅРёР№ СЃС‚РµРєР°) ---
-keepattributes *Annotation*,InnerClasses,Signature
# (РµСЃР»Рё С…РѕС‚РёС‚Рµ СЃРѕС…СЂР°РЅСЏС‚СЊ РЅРѕРјРµСЂР° СЃС‚СЂРѕРє РґР»СЏ СѓРґРѕР±РЅРѕРіРѕ Р°РЅР°Р»РёР·Р° РєСЂР°С€РµР№ вЂ” СЂР°СЃРєРѕРјРјРµРЅС‚РёСЂСѓР№С‚Рµ)
#-keepattributes SourceFile,LineNumberTable

# --- Kotlin metadata (РЅСѓР¶РЅРѕ РґР»СЏ РєРѕСЂСЂРµРєС‚РЅРѕР№ СЂР°Р±РѕС‚С‹ РЅРµРєРѕС‚РѕСЂС‹С… Р±РёР±Р»РёРѕС‚РµРє Рё СЂРµС„Р»РµРєСЃРёРё) ---
-keep class kotlin.Metadata { *; }

# --- Keep РґР»СЏ Room: СЃСѓС‰РЅРѕСЃС‚Рё, DAO Рё TypeConverters ---
# РњС‹ РґРµСЂР¶РёРј РїР°РєРµС‚С‹ СЃ Р±Р°Р·РѕР№ РґР°РЅРЅС‹С… Рё СЃСѓС‰РЅРѕСЃС‚СЏРјРё С‡С‚РѕР±С‹ KSP/Room-СЃРіРµРЅРµСЂРёСЂРѕРІР°РЅРЅС‹Рµ РєР»Р°СЃСЃС‹ РєРѕСЂСЂРµРєС‚РЅРѕ СЂР°Р±РѕС‚Р°Р»Рё РїРѕСЃР»Рµ РѕР±С„СѓСЃРєР°С†РёРё.
-keep class com.byteflipper.random.data.db.** { *; }
-keep class com.byteflipper.random.data.preset.** { *; }

# РЎРѕС…СЂР°РЅСЏРµРј РјРµС‚РѕРґС‹ РїРѕРјРµС‡РµРЅРЅС‹Рµ @TypeConverter (РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ Room РїСЂРё РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРё С‚РёРїРѕРІ)
-keepclassmembers class * {
    @androidx.room.TypeConverter public *;
}

# --- Firebase & Google Play (Р°РЅР°Р»РёР·/РєСЂР°С€Р»РёС‚РёРєСЃ/messaging/in-app, Р±РёР»Р»РёРЅРі) ---
# Play Billing РєР»РёРµРЅС‚ РёСЃРїРѕР»СЊР·СѓРµС‚ reflection/РёРЅС‚РµСЂС„РµР№СЃС‹ вЂ” РґРµСЂР¶РёРј.
-keep class com.android.billingclient.** { *; }

# Firebase / Google Play СЃРµСЂРІРёСЃС‹ вЂ” РґРµСЂР¶РёРј РїСѓР±Р»РёС‡РЅС‹Рµ API (РїСЂРµРґРѕС‚РІСЂР°С‚РёС‚СЊ РїРѕС‚РµРЅС†РёР°Р»СЊРЅС‹Рµ РїСЂРѕР±Р»РµРјС‹ РїСЂРё РѕР±С„СѓСЃРєР°С†РёРё).
-keep class com.google.firebase.** { *; }
-keep class com.google.android.gms.** { *; }

# Р•СЃР»Рё Сѓ РІР°СЃ РµСЃС‚СЊ РєР»Р°СЃСЃС‹, РЅР°СЃР»РµРґСѓСЋС‰РёРµ FirebaseMessagingService / FirebaseMessagingReceiver вЂ” РґРµСЂР¶РёРј РёС… СЃРёРіРЅР°С‚СѓСЂС‹
-keep class * extends com.google.firebase.messaging.FirebaseMessagingService { *; }

# --- РЎС‚РѕСЂРѕРЅРЅРёРµ РЅРµР±РѕР»СЊС€РёРµ Р±РёР±Р»РёРѕС‚РµРєРё, РёСЃРїРѕР»СЊР·СѓРµРјС‹Рµ РІ РїСЂРѕРµРєС‚Рµ ---
# Splashscreen lib (net.kibotu) вЂ” РґРµСЂР¶РёРј, С‚.Рє. РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РІ MainActivity С‡РµСЂРµР· API.
-keep class net.kibotu.splashscreen.** { *; }

# --- РЈС‚РёР»РёС‚С‹/РєР»Р°СЃСЃС‹, РёСЃРїРѕР»СЊР·СѓРµРјС‹Рµ РёР· XML/РёРЅС‚РµРЅС‚РѕРІ (РЅР°РїСЂРёРјРµСЂ, CustomTabs helper) ---
# Р•СЃР»Рё Сѓ РІР°СЃ РµСЃС‚СЊ РєР»Р°СЃСЃС‹, РєРѕС‚РѕСЂС‹Рµ РІС‹Р·С‹РІР°СЋС‚СЃСЏ РёР· РјР°РЅРёС„РµСЃС‚Р° / С‡РµСЂРµР· reflection, РїРµСЂРµС‡РёСЃР»РёС‚Рµ/РґРµСЂР¶РёС‚Рµ РёС….
-keep class com.byteflipper.random.utils.** { *; }

# --- РћР±С‰РёРµ РїСЂР°РІРёР»Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё РґР»СЏ Р±РёР±Р»РёРѕС‚РµРє, РёСЃРїРѕР»СЊР·СѓСЋС‰РёС… reflection ---
-dontwarn com.google.firebase.**
-dontwarn com.android.billingclient.**
-dontwarn com.google.android.gms.**
# (РѕСЃС‚Р°РІСЊС‚Рµ СЌС‚Рё dontwarn, С‡С‚РѕР±С‹ R8 РЅРµ С€СѓРјРµР» РїРѕ СЃС‚РѕСЂРѕРЅРЅРёРј Р±РёР±Р»РёРѕС‚РµРєР°Рј)

# --- РћРїС†РёРѕРЅР°Р»СЊРЅРѕ: РѕСЃС‚Р°РІРёС‚СЊ РёРјРµРЅР° РґР»СЏ СѓРґРѕР±СЃС‚РІР° РѕС‚Р»Р°РґРєРё (РµСЃР»Рё РЅСѓР¶РЅРѕ) ---
#-keepnames class com.byteflipper.random.**

# --- РџСЂРёРјРµС‡Р°РЅРёРµ РїРѕ Crashlytics (РІР°Р¶РЅРѕ) ---
# РџСЂРё РІРєР»СЋС‡С‘РЅРЅРѕРј minify/shrink: РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ Р·Р°РіСЂСѓР¶Р°Р№С‚Рµ mapping.txt РІ Firebase Crashlytics РґР»СЏ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РєРѕСЂСЂРµРєС‚РЅРѕР№ РґРµРѕР±С„СѓСЃРєР°С†РёРё РѕС‚С‡РµС‚РѕРІ РѕР± РѕС€РёР±РєР°С….
# (СЃРј. firebase setup / gradle task: uploadCrashlyticsMappingFile)


================================================
FILE: app/release/app-release.aab
================================================
[Non-text file]


================================================
FILE: app/src/androidTest/java/com/byteflipper/random/ExampleInstrumentedTest.kt
================================================
package com.byteflipper.random

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.byteflipper.random", appContext.packageName)
    }
}


================================================
FILE: app/src/main/AndroidManifest.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Required for Google Play Billing -->
    <uses-permission android:name="com.android.vending.BILLING" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:localeConfig="@xml/locale_config"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/App.Starting">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/App.Starting">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


================================================
FILE: app/src/main/java/com/byteflipper/random/MainActivity.kt
================================================
package com.byteflipper.random

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.os.LocaleListCompat
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.core.view.WindowCompat
import androidx.compose.ui.graphics.toArgb
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.lifecycleScope
import androidx.navigation.compose.rememberNavController
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.data.settings.ThemeMode
import com.byteflipper.random.data.settings.AppLanguage
import com.byteflipper.random.navigation.AppNavGraph
import com.byteflipper.random.ui.components.HeartBeatAnimation
import com.byteflipper.random.ui.theme.RandomTheme
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import net.kibotu.splashscreen.SplashScreenDecorator
import net.kibotu.splashscreen.splash
import kotlin.time.Duration.Companion.milliseconds
import kotlin.time.Duration.Companion.seconds

class MainActivity : ComponentActivity() {

    private var splashScreen: SplashScreenDecorator? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        // РїРѕРєР°Р·С‹РІР°РµРј РєР°СЃС‚РѕРјРЅС‹Р№ СЃРїР»СЌС€ РґРѕ super.onCreate()
        showSplash()
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // РќР°СЃС‚СЂР°РёРІР°РµРј СЃС‚Р°С‚СѓСЃ-Р±Р°СЂ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РґР»СЏ СЃРІРµС‚Р»РѕР№ С‚РµРјС‹ (РґРѕ Р·Р°РіСЂСѓР·РєРё РЅР°СЃС‚СЂРѕРµРє)
        window.statusBarColor = android.graphics.Color.argb(128, 255, 255, 255)
        WindowCompat.getInsetsController(window, window.decorView).apply {
            isAppearanceLightStatusBars = true
        }

        // РџСЂРёРјРµРЅСЏРµРј СЃРѕС…СЂР°РЅРµРЅРЅС‹Р№ СЏР·С‹Рє
        applySavedLanguage()

        setContent {
            val context = LocalContext.current
            val settingsRepo = remember { SettingsRepository.fromContext(context) }
            val settings: Settings by settingsRepo.settingsFlow.collectAsState(initial = Settings())
            val darkTheme = when (settings.themeMode) {
                ThemeMode.System -> isSystemInDarkTheme()
                ThemeMode.Light -> false
                ThemeMode.Dark -> true
            }

            // РќР°СЃС‚СЂР°РёРІР°РµРј С†РІРµС‚ СЃС‚Р°С‚СѓСЃ-Р±Р°СЂР° РїСЂРё РёР·РјРµРЅРµРЅРёРё С‚РµРјС‹
            LaunchedEffect(darkTheme) {
                window.statusBarColor = if (darkTheme) {
                    android.graphics.Color.TRANSPARENT
                } else {
                    // Р”Р»СЏ СЃРІРµС‚Р»РѕР№ С‚РµРјС‹ РґРµР»Р°РµРј СЃС‚Р°С‚СѓСЃ-Р±Р°СЂ РїРѕР»СѓРїСЂРѕР·СЂР°С‡РЅС‹Рј СЃ С‚РµРјРЅС‹Рј С‚РµРєСЃС‚РѕРј
                    android.graphics.Color.argb(128, 255, 255, 255)
                }
                WindowCompat.getInsetsController(window, window.decorView).apply {
                    isAppearanceLightStatusBars = !darkTheme
                }
            }

            RandomTheme(darkTheme = darkTheme, dynamicColor = settings.dynamicColors) {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val navController = rememberNavController()
                    AppNavGraph(navController = navController)
                }
            }
        }

        lifecycleScope.launch {
            // 1) РґР°С‘Рј 1 СЃРµРєСѓРЅРґСѓ СЃС‚Р°РЅРґР°СЂС‚РЅРѕРјСѓ AndroidX Splash API
            delay(1.seconds)
            splashScreen?.shouldKeepOnScreen = false

            // 2) РґРµСЂР¶РёРј РєР°СЃС‚РѕРјРЅСѓСЋ Р°РЅРёРјР°С†РёСЋ 3 СЃРµРєСѓРЅРґС‹
            delay(3.seconds)

            // 3) Р·Р°РїСѓСЃРєР°РµРј Р°РЅРёРјР°С†РёСЋ РІС‹С…РѕРґР° HeartBeatAnimation
            splashScreen?.dismiss()
        }
    }

    private fun showSplash() {
        val exitDuration = 800L
        val fadeDurationOffset = 200L

        splashScreen = splash {
            content {
                exitAnimationDuration = exitDuration
                composeViewFadeDurationOffset = fadeDurationOffset
                RandomTheme {
                    HeartBeatAnimation(
                        isVisible = isVisible.value,
                        exitAnimationDuration = exitAnimationDuration.milliseconds,
                        onStartExitAnimation = { startExitAnimation() }
                    )
                }
            }
        }
    }

    private fun applySavedLanguage() {
        val settingsRepo = SettingsRepository.fromContext(this)
        lifecycleScope.launch {
            settingsRepo.settingsFlow.collect { settings ->
                val localeList = when (settings.appLanguage) {
                    AppLanguage.System -> LocaleListCompat.getEmptyLocaleList()
                    AppLanguage.English -> LocaleListCompat.forLanguageTags("en")
                    AppLanguage.Russian -> LocaleListCompat.forLanguageTags("ru")
                }
                AppCompatDelegate.setApplicationLocales(localeList)
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/AppDatabase.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetDao

@Database(
    entities = [ListPreset::class],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun listPresetDao(): ListPresetDao
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/Converters.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.TypeConverter

class Converters {
    @TypeConverter
    fun fromString(value: String?): List<String>? = when (value) {
        null -> null
        "" -> emptyList()
        else -> value.split("\u0001").map { it }
    }

    @TypeConverter
    fun listToString(list: List<String>?): String? = when (list) {
        null -> null
        emptyList<String>() -> ""
        else -> list.joinToString("\u0001")
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/di/DatabaseModule.kt
================================================
package com.byteflipper.random.data.di

import android.content.Context
import androidx.room.Room
import com.byteflipper.random.data.db.AppDatabase
import com.byteflipper.random.data.db.Converters

object DatabaseModule {
    @Volatile private var db: AppDatabase? = null

    fun provideDatabase(context: Context): AppDatabase =
        db ?: synchronized(this) {
            db ?: Room.databaseBuilder(
                context.applicationContext,
                AppDatabase::class.java,
                "random.db"
            )
                .fallbackToDestructiveMigration()
                .build()
                .also { db = it }
        }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPreset.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "list_presets")
data class ListPreset(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    val name: String,
    val items: List<String>
)





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetDao.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import kotlinx.coroutines.flow.Flow

@Dao
interface ListPresetDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun upsert(preset: ListPreset): Long

    @Update
    suspend fun update(preset: ListPreset)

    @Delete
    suspend fun delete(preset: ListPreset)

    @Query("SELECT * FROM list_presets ORDER BY name ASC")
    fun observeAll(): Flow<List<ListPreset>>

    @Query("SELECT * FROM list_presets WHERE id = :id")
    suspend fun getById(id: Long): ListPreset?
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetRepository.kt
================================================
package com.byteflipper.random.data.preset

import com.byteflipper.random.data.di.DatabaseModule
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.withContext

class ListPresetRepository(private val dao: ListPresetDao) {
    fun observeAll(): Flow<List<ListPreset>> = dao.observeAll()

    suspend fun upsert(preset: ListPreset): Long = withContext(Dispatchers.IO) {
        dao.upsert(preset)
    }

    suspend fun delete(preset: ListPreset) = withContext(Dispatchers.IO) {
        dao.delete(preset)
    }

    suspend fun getById(id: Long): ListPreset? = withContext(Dispatchers.IO) {
        dao.getById(id)
    }

    companion object {
        fun fromContext(context: android.content.Context): ListPresetRepository {
            val db = DatabaseModule.provideDatabase(context)
            return ListPresetRepository(db.listPresetDao())
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/settings/SettingsRepository.kt
================================================
package com.byteflipper.random.data.settings

import android.content.Context
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.intPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

private const val DATASTORE_NAME = "user_settings"

private val Context.dataStore by preferencesDataStore(name = DATASTORE_NAME)

enum class ThemeMode(val value: Int) {
    System(0),
    Light(1),
    Dark(2);

    companion object {
        fun fromValue(value: Int?): ThemeMode = when (value) {
            1 -> Light
            2 -> Dark
            else -> System
        }
    }
}

enum class FabSizeSetting(val value: Int) {
    Small(0),
    Medium(1),
    Large(2);

    companion object {
        fun fromValue(value: Int?): FabSizeSetting = when (value) {
            0 -> Small
            2 -> Large
            else -> Medium
        }
    }
}

enum class AppLanguage(val value: Int, val localeTag: String) {
    System(0, "system"),
    English(1, "en"),
    Russian(2, "ru");

    companion object {
        fun fromValue(value: Int?): AppLanguage = when (value) {
            1 -> English
            2 -> Russian
            else -> System
        }
    }
}

data class Settings(
    val themeMode: ThemeMode = ThemeMode.System,
    val dynamicColors: Boolean = true,
    val fabSize: FabSizeSetting = FabSizeSetting.Medium,
    val appLanguage: AppLanguage = AppLanguage.System
)

class SettingsRepository private constructor(private val appContext: Context) {

    private object Keys {
        val themeMode: Preferences.Key<Int> = intPreferencesKey("theme_mode")
        val dynamicColors: Preferences.Key<Boolean> = booleanPreferencesKey("dynamic_colors")
        val fabSize: Preferences.Key<Int> = intPreferencesKey("fab_size")
        val appLanguage: Preferences.Key<Int> = intPreferencesKey("app_language")
    }

    val settingsFlow: Flow<Settings> = appContext.dataStore.data.map { prefs ->
        Settings(
            themeMode = ThemeMode.fromValue(prefs[Keys.themeMode]),
            dynamicColors = prefs[Keys.dynamicColors] ?: true,
            fabSize = FabSizeSetting.fromValue(prefs[Keys.fabSize]),
            appLanguage = AppLanguage.fromValue(prefs[Keys.appLanguage])
        )
    }

    suspend fun setThemeMode(mode: ThemeMode) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.themeMode] = mode.value
        }
    }

    suspend fun setDynamicColors(enabled: Boolean) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.dynamicColors] = enabled
        }
    }

    suspend fun setFabSize(size: FabSizeSetting) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.fabSize] = size.value
        }
    }

    suspend fun setAppLanguage(language: AppLanguage) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.appLanguage] = language.value
        }
    }

    companion object {
        fun fromContext(context: Context): SettingsRepository = SettingsRepository(context.applicationContext)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/navigation/NavGraph.kt
================================================
package com.byteflipper.random.navigation

import androidx.compose.animation.AnimatedContentTransitionScope
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.byteflipper.random.ui.home.HomeScreen
import com.byteflipper.random.ui.numbers.NumbersScreen
import com.byteflipper.random.ui.lists.ListScreen
import com.byteflipper.random.ui.coin.CoinScreen
import com.byteflipper.random.ui.lot.LotScreen
import com.byteflipper.random.ui.dice.DiceScreen
import com.byteflipper.random.ui.settings.SettingsScreen
import com.byteflipper.random.ui.about.AboutScreen

sealed class Route(val route: String) {
    data object Home : Route("home")
    data object Numbers : Route("numbers")
    data object List : Route("list")
    data object ListWithId : Route("list/{id}")
    data object AddListPreset : Route("add_list_preset")
    data object Dice : Route("dice")
    data object Lot : Route("lot")
    data object Coin : Route("coin")
    data object Settings : Route("settings")
    data object About : Route("about")
}

@Composable
fun AppNavGraph(navController: NavHostController) {
    NavHost(navController = navController, startDestination = Route.Home.route) {
        composable(Route.Home.route) {
            HomeScreen(
                onOpenNumbers = { navController.navigate(Route.Numbers.route) },
                onOpenList = { navController.navigate(Route.List.route) },
                onOpenListById = { id -> navController.navigate("list/$id") },
                onOpenDice = { navController.navigate(Route.Dice.route) },
                onOpenLot = { navController.navigate(Route.Lot.route) },
                onOpenCoin = { navController.navigate(Route.Coin.route) },
                onOpenSettings = { navController.navigate(Route.Settings.route) },
                onOpenAbout = { navController.navigate(Route.About.route) },
                onAddNumbersPreset = { /* TODO: screen for number presets */ },
                onAddListPreset = { navController.navigate(Route.AddListPreset.route) }
            )
        }
        composable(
            route = Route.Numbers.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            NumbersScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Lot.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            LotScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Dice.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            DiceScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Coin.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            CoinScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Settings.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            SettingsScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.About.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            AboutScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.List.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            ListScreen(
                onBack = { navController.popBackStack() },
                onOpenListById = { id ->
                    navController.navigate("list/$id") {
                        popUpTo(Route.Home.route) { inclusive = false }
                    }
                }
            )
        }
        composable(
            route = Route.ListWithId.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            val id = it.arguments?.getString("id")?.toLongOrNull()
            ListScreen(
                onBack = { navController.popBackStack() },
                presetId = id,
                onOpenListById = { nid -> navController.navigate("list/$nid") }
            )
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/AboutScreen.kt
================================================
package com.byteflipper.random.ui.about

import android.content.Intent
import android.net.Uri
import androidx.activity.ComponentActivity
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.BuildConfig
import com.byteflipper.random.R
import com.byteflipper.random.utils.ChromeCustomTabUtil
import com.byteflipper.random.ui.components.AnimatedActionItem
import com.byteflipper.random.ui.components.AppInfoCard
import com.byteflipper.random.ui.components.ExpandableSection
import com.byteflipper.random.ui.components.InfoCard
import com.byteflipper.random.ui.components.VersionInfoCard
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScreen(
    onBack: () -> Unit,
    modifier: Modifier = Modifier,
) {
    val context = LocalContext.current
    val scrollState = rememberScrollState()
    val primaryColorArgb = MaterialTheme.colorScheme.primary.toArgb()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.about_app)) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = stringResource(R.string.back))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars
    ) { innerPadding ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
                .verticalScroll(scrollState)
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            AppInfoCard(
                appName = stringResource(R.string.app_name),
                developerName = "ByteFlipper",
                appIcon = painterResource(id = R.drawable.logo)
            )

            ExpandableSection(
                title = stringResource(R.string.support_feedback_category_title),
                icon = painterResource(id = R.drawable.bug_report_24px),
                expandedContentDescription = stringResource(R.string.expandable_section_expand),
                collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
            ) {
                Column {
                    /*AnimatedActionItem(
                        title = stringResource(R.string.bug_report_title),
                        subtitle = stringResource(R.string.bug_report_subtitle),
                        icon = painterResource(id = R.drawable.bug_report_24px),
                        onClick = { } //TODO
                    )*/

                    AnimatedActionItem(
                        title = stringResource(R.string.rate_the_app_title),
                        subtitle = stringResource(R.string.rate_the_app_subtitle),
                        icon = painterResource(id = R.drawable.rate_review_24px),
                        onClick = { } //TODO
                    )

                    AnimatedActionItem(
                        title = stringResource(R.string.other_apps_title),
                        subtitle = stringResource(R.string.other_apps_subtitle),
                        icon = painterResource(id = R.drawable.apps_24px),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = context.getString(R.string.app_name),
                                primaryColor = primaryColorArgb
                            )
                        },
                        showDivider = false
                    )
                }
            }

            ExpandableSection(
                title = stringResource(R.string.connect_with_us_category_title),
                icon = painterResource(id = R.drawable.web_24px),
                expandedContentDescription = stringResource(R.string.expandable_section_expand),
                collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
            ) {
                Column {
                    AnimatedActionItem(
                        title = stringResource(R.string.website_title),
                        subtitle = stringResource(R.string.website_subtitle),
                        icon = painterResource(id = R.drawable.web_24px),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = "https://byteflipper.web.app",
                                primaryColor = primaryColorArgb
                            )
                        }
                    )

                    AnimatedActionItem(
                        title = stringResource(R.string.vk_title),
                        subtitle = stringResource(R.string.vk_subtitle),
                        icon = painterResource(id = R.drawable.vk_24),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = "https://vk.com/byteflipper",
                                primaryColor = primaryColorArgb
                            )
                        }
                    )

                    AnimatedActionItem(
                        title = stringResource(R.string.telegram_title),
                        subtitle = stringResource(R.string.telegram_subtitle),
                        icon = painterResource(id = R.drawable.telegram_24),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = "https://t.me/byteflipper",
                                primaryColor = primaryColorArgb
                            )
                        },
                        showDivider = false
                    )
                }
            }

            ExpandableSection(
                title = stringResource(R.string.development_category_title),
                icon = painterResource(id = R.drawable.code_24px),
                expandedContentDescription = stringResource(R.string.expandable_section_expand),
                collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
            ) {
                Column {
                    AnimatedActionItem(
                        title = stringResource(R.string.github_title),
                        subtitle = stringResource(R.string.github_subtitle),
                        icon = painterResource(id = R.drawable.github_24),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = "https://github.com/ByteFlipper-58",
                                primaryColor = primaryColorArgb
                            )
                        }
                    )

                    AnimatedActionItem(
                        title = stringResource(R.string.source_code_title),
                        subtitle = stringResource(R.string.source_code_subtitle),
                        icon = painterResource(id = R.drawable.code_24px),
                        onClick = {
                            ChromeCustomTabUtil.openUrl(
                                context = context,
                                url = "https://github.com/ByteFlipper-58/random",
                                primaryColor = primaryColorArgb
                            )
                        },
                        showDivider = false
                    )
                }
            }

            VersionInfoCard(
                versionTitle = stringResource(R.string.version),
                versionInfo = "${BuildConfig.VERSION_NAME} (${BuildConfig.VERSION_CODE})",
                icon = painterResource(id = R.drawable.update_24px)
            )

            InfoCard(
                text = stringResource(R.string.made_with_love)
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinScreen.kt
================================================
package com.byteflipper.random.ui.coin

import android.view.SoundEffectConstants
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.gestures.detectVerticalDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.blur
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R
import kotlinx.coroutines.launch
import kotlin.math.abs
import kotlin.random.Random

private enum class CoinSide { HEADS, TAILS }

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CoinScreen(onBack: () -> Unit) {
    val scope = rememberCoroutineScope()
    val view = LocalView.current
    val density = LocalDensity.current
    val haptics = LocalHapticFeedback.current

    val rotationXAnim = remember { Animatable(0f) }
    val offsetYAnim = remember { Animatable(0f) } // px
    val bgScaleAnim = remember { Animatable(1.18f) }
    var isAnimating by rememberSaveable { mutableStateOf(false) }
    var currentSide by rememberSaveable { mutableStateOf(CoinSide.HEADS) }
    

    suspend fun toss() {
        if (isAnimating) return
        isAnimating = true

        // РЎР»СѓС‡Р°Р№РЅС‹Р№ РёС‚РѕРі (РѕСЂС‘Р»/СЂРµС€РєР°)
        val target = if (Random.nextBoolean()) CoinSide.HEADS else CoinSide.TAILS

        // РќСѓР¶РЅР°СЏ РІРёРґРёРјР°СЏ СЃС‚РѕСЂРѕРЅР°: front = Р РµС€РєР°, back = РћСЂС‘Р»
        fun isFront(angle: Float): Boolean {
            val a = ((angle % 360f) + 360f) % 360f
            return a <= 90f || a >= 270f
        }
        val wantFront = (target == CoinSide.TAILS)
        val startFront = isFront(rotationXAnim.value)

        // РљРѕР»-РІРѕ РїРѕР»СѓРїРµСЂРµРІРѕСЂРѕС‚РѕРІ (180В°) РґР»СЏ СЂРµР°Р»РёСЃС‚РёС‡РЅРѕРіРѕ РІСЂР°С‰РµРЅРёСЏ, РєРѕСЂСЂРµРєС‚РёСЂСѓРµРј С‡С‘С‚РЅРѕСЃС‚СЊ РїРѕРґ РЅСѓР¶РЅСѓСЋ СЃС‚РѕСЂРѕРЅСѓ
        var halfTurns = Random.nextInt(10, 18)
        val needOdd = (wantFront != startFront)
        val isOdd = (halfTurns % 2 == 1)
        if (needOdd && !isOdd) halfTurns += 1
        if (!needOdd && isOdd) halfTurns += 1

        val startRotation = rotationXAnim.value
        val endRotation = startRotation + halfTurns * 180f

        val totalMs = 1400
        val upMs = (totalMs * 0.45f).toInt()
        val downMs = totalMs - upMs
        val throwHeightPx = with(density) { 220.dp.toPx() }

        view.playSoundEffect(SoundEffectConstants.CLICK)
        haptics.performHapticFeedback(HapticFeedbackType.LongPress)

        val rot = scope.launch {
            rotationXAnim.animateTo(
                targetValue = endRotation,
                animationSpec = tween(durationMillis = totalMs, easing = FastOutSlowInEasing)
            )
        }
        val move = scope.launch {
            offsetYAnim.animateTo(
                targetValue = -throwHeightPx,
                animationSpec = tween(durationMillis = upMs, easing = FastOutSlowInEasing)
            )
            offsetYAnim.animateTo(
                targetValue = 0f,
                animationSpec = tween(durationMillis = downMs, easing = FastOutSlowInEasing)
            )
        }

        // РњР°СЃС€С‚Р°Р± С„РѕРЅР°: РѕС‚РґР°Р»РёС‚СЊ РїСЂРё РІР·Р»С‘С‚Рµ Рё РІРµСЂРЅСѓС‚СЊ РїСЂРё РїР°РґРµРЅРёРё
        val bg = scope.launch {
            val near = 1.18f
            val far = 1.04f
            bgScaleAnim.animateTo(
                targetValue = far,
                animationSpec = tween(durationMillis = upMs, easing = FastOutSlowInEasing)
            )
            bgScaleAnim.animateTo(
                targetValue = near,
                animationSpec = tween(durationMillis = downMs, easing = FastOutSlowInEasing)
            )
        }

        rot.join()
        move.join()
        bg.join()
        currentSide = target
        isAnimating = false
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.coin)) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars
    ) { inner ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFF4E342E))
        ) {
            // Р¤РѕРЅ СЃ С‚РµРєСЃС‚СѓСЂРѕР№ СЃС‚РѕР»Р° (parallax Р»С‘РіРєРёР№)
            Image(
                painter = painterResource(R.drawable.desk),
                contentDescription = null,
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .matchParentSize()
                    .graphicsLayer {
                        val parallax = (offsetYAnim.value * 0.06f).coerceIn(-24f, 24f)
                        translationY = parallax
                        scaleX = bgScaleAnim.value
                        scaleY = bgScaleAnim.value
                        alpha = 0.98f
                    }
            )

            Box(
                modifier = Modifier
                    .matchParentSize()
                    .padding(inner),
                contentAlignment = Alignment.Center
            ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                val coinSize = 236.dp
                val cameraDistancePx = with(density) { 96.dp.toPx() }
                val maxThrowPx = with(density) { 220.dp.toPx() }
                val fillScale = 1.12f

                // РћР±С‘СЂС‚РєР° РјРѕРЅРµС‚С‹: РІРЅРµС€РЅСЏСЏ РѕР±РІРѕРґРєР°, С‚РµРЅСЊ Рё СЃР°РјР° РјРѕРЅРµС‚Р°
                Box(
                    modifier = Modifier
                        .size(coinSize)
                        .offset(y = 12.dp)
                        .pointerInput(Unit) {
                            var totalDy = 0f
                            var minDy = 0f
                            var hasLargeUpStep = false
                            val threshold = with(density) { 24.dp.toPx() }
                            detectVerticalDragGestures(
                                onVerticalDrag = { _, dragAmount ->
                                    totalDy += dragAmount
                                    if (totalDy < minDy) minDy = totalDy
                                    if (dragAmount < -threshold * 0.6f) hasLargeUpStep = true
                                },
                                onDragEnd = {
                                    if (minDy < -threshold || hasLargeUpStep) {
                                        scope.launch { toss() }
                                    }
                                    totalDy = 0f
                                    minDy = 0f
                                    hasLargeUpStep = false
                                },
                                onDragCancel = {
                                    totalDy = 0f
                                    minDy = 0f
                                    hasLargeUpStep = false
                                }
                            )
                        },
                    contentAlignment = Alignment.Center
                ) {
                    // Р”РёРЅР°РјРёС‡РЅР°СЏ С‚РµРЅСЊ РЅР° В«СЃС‚РѕР»РµВ»
                    /*
                    val lift = (-offsetYAnim.value).coerceAtLeast(0f)
                    val t = (lift / maxThrowPx).coerceIn(0f, 1f)
                    val shadowScaleX = 1.2f - 0.3f * t
                    val shadowScaleY = 0.40f - 0.18f * t
                    val shadowAlpha = 0.40f * (1f - t) + 0.12f
                    Box(
                        modifier = Modifier
                            .size(coinSize)
                            .graphicsLayer {
                                scaleX = shadowScaleX
                                scaleY = shadowScaleY
                                alpha = shadowAlpha
                            }
                            .clip(CircleShape)
                            .background(Color.Black)
                            .blur(22.dp)
                    )
                    */

                    // РњРѕРЅРµС‚Р° СЃ 3D-РІСЂР°С‰РµРЅРёРµРј (Р±РµР· СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ РЅР°РєР»РѕРЅР°)
                    Box(
                        modifier = Modifier
                            .matchParentSize()
                            .graphicsLayer {
                                rotationX = rotationXAnim.value
                                translationY = offsetYAnim.value
                                cameraDistance = cameraDistancePx
                                shape = CircleShape
                                clip = true
                            }
                    ) {
                        // РћРїСЂРµРґРµР»СЏРµРј РІРёРґРёРјСѓСЋ СЃС‚РѕСЂРѕРЅСѓ
                        val angle = ((rotationXAnim.value % 360f) + 360f) % 360f
                        val showFront = angle <= 90f || angle >= 270f

                        // FRONT: СЂРµС€РєР° (coin_front)
                        Image(
                            painter = painterResource(R.drawable.coin_front),
                            contentDescription = stringResource(R.string.tails),
                            contentScale = ContentScale.FillBounds,
                            modifier = Modifier
                                .matchParentSize()
                                .graphicsLayer {
                                    // СЂР°РІРЅРѕРјРµСЂРЅРѕРµ Р·Р°РїРѕР»РЅРµРЅРёРµ, С‡С‚РѕР±С‹ РЅРµ Р±С‹Р»Рѕ РІРЅСѓС‚СЂРµРЅРЅРµР№ РѕР±РІРѕРґРєРё
                                    scaleX = fillScale
                                    scaleY = fillScale
                                    alpha = if (showFront) 1f else 0f
                                }
                        )

                        // BACK: РѕСЂС‘Р» (coin_back)
                        Image(
                            painter = painterResource(R.drawable.coin_back),
                            contentDescription = stringResource(R.string.heads),
                            contentScale = ContentScale.FillBounds,
                            modifier = Modifier
                                .matchParentSize()
                                .graphicsLayer {
                                    // СЂР°РІРЅРѕРјРµСЂРЅРѕРµ Р·Р°РїРѕР»РЅРµРЅРёРµ + РїРµСЂРµРІРѕСЂРѕС‚ РѕР±СЂР°С‚РЅРѕР№ СЃС‚РѕСЂРѕРЅС‹
                                    scaleX = fillScale
                                    scaleY = fillScale
                                    rotationX = 180f
                                    alpha = if (!showFront) 1f else 0f
                                }
                                // РєР»РёРї РЅР° СЃР»РѕРµ РєРѕРЅС‚РµР№РЅРµСЂР°, С‚СѓС‚ РЅРµ РЅСѓР¶РµРЅ
                        )
                    }
                }
            }

            // РќРёР¶РЅРёР№ Р±Р»РѕРє: СЂРµР·СѓР»СЊС‚Р°С‚ Рё РїРѕРґСЃРєР°Р·РєР° Сѓ РЅРёР·Р° СЌРєСЂР°РЅР°
            Column(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(horizontal = 16.dp, vertical = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = when (currentSide) {
                        CoinSide.HEADS -> "${stringResource(R.string.result)}: ${stringResource(R.string.heads)}"
                        CoinSide.TAILS -> "${stringResource(R.string.result)}: ${stringResource(R.string.tails)}"
                    },
                    style = MaterialTheme.typography.titleMedium,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )
                Spacer(Modifier.padding(4.dp))
                Text(
                    text = stringResource(R.string.swipe_hint),
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White.copy(alpha = 0.8f),
                    textAlign = TextAlign.Center
                )
            }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/AnimatedActionItem.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp

@Composable
fun AnimatedActionItem(
    title: String,
    subtitle: String,
    icon: Painter,
    onClick: () -> Unit,
    modifier: Modifier = Modifier,
    showDivider: Boolean = true
) {
    Surface(
        modifier = modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 12.dp),
        color = Color.Transparent
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(MaterialTheme.colorScheme.surfaceVariant),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(28.dp),
                    tint = MaterialTheme.colorScheme.primary
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(2.dp))

                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
            }
        }
    }

    if (showDivider) {
        HorizontalDivider(
            modifier = Modifier.padding(start = 80.dp, end = 16.dp),
            thickness = 0.5.dp,
            color = MaterialTheme.colorScheme.outlineVariant
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/AppInfoCard.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * РџРµСЂРµРёСЃРїРѕР»СЊР·СѓРµРјР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ РёРЅС„РѕСЂРјР°С†РёРµР№ Рѕ РїСЂРёР»РѕР¶РµРЅРёРё
 *
 * @param appName РЅР°Р·РІР°РЅРёРµ РїСЂРёР»РѕР¶РµРЅРёСЏ
 * @param developerName РёРјСЏ СЂР°Р·СЂР°Р±РѕС‚С‡РёРєР°
 * @param appIcon РёРєРѕРЅРєР° РїСЂРёР»РѕР¶РµРЅРёСЏ
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 */
@Composable
fun AppInfoCard(
    appName: String,
    developerName: String,
    appIcon: Painter,
    modifier: Modifier = Modifier
) {
    ElevatedCard(
        modifier = modifier.fillMaxWidth(),
        elevation = CardDefaults.elevatedCardElevation(
            defaultElevation = 6.dp
        ),
        shape = RoundedCornerShape(24.dp),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerLow
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(86.dp)
                        .clip(CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = appIcon,
                        contentDescription = "App Icon",
                        modifier = Modifier.size(128.dp),
                        contentScale = ContentScale.Crop
                    )
                }

                Spacer(modifier = Modifier.width(16.dp))

                Column {
                    Text(
                        text = appName,
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )

                    Text(
                        text = developerName,
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.secondary
                    )
                }
            }
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/EditorList.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.runtime.key
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.input.key.Key
import androidx.compose.ui.input.key.KeyEventType
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.onPreviewKeyEvent
import androidx.compose.ui.input.key.type
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

/**
 * РљРѕРјРїРѕРЅРµРЅС‚ СЂРµРґР°РєС‚РѕСЂР° СЃРїРёСЃРєР° СЃ РїРѕРІРµРґРµРЅРёРµРј С‚РµРєСЃС‚РѕРІРѕРіРѕ СЂРµРґР°РєС‚РѕСЂР°
 *
 * @param items РЎРїРёСЃРѕРє СЃС‚СЂРѕРє РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
 * @param onItemsChange РљРѕР»Р»Р±РµРє РїСЂРё РёР·РјРµРЅРµРЅРёРё СЃРїРёСЃРєР° СЌР»РµРјРµРЅС‚РѕРІ
 * @param modifier РњРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ РєРѕРјРїРѕРЅРµРЅС‚Р°
 * @param minItems РњРёРЅРёРјР°Р»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ СЌР»РµРјРµРЅС‚РѕРІ РІ СЃРїРёСЃРєРµ (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 1)
 */
@Composable
fun EditorList(
    items: SnapshotStateList<String>,
    onItemsChange: (List<String>) -> Unit = {},
    modifier: Modifier = Modifier,
    minItems: Int = 1
) {
    // РЎРѕСЃС‚РѕСЏРЅРёРµ С„РѕРєСѓСЃР°
    val focusRequesters = remember { mutableStateListOf<FocusRequester>() }
    val pendingFocusIndex = remember { mutableStateOf<Int?>(null) }

    // РЎРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ FocusRequester СЃ РєРѕР»РёС‡РµСЃС‚РІРѕРј СЌР»РµРјРµРЅС‚РѕРІ
    LaunchedEffect(items.size) {
        // РЎРёРЅС…СЂРѕРЅРёР·РёСЂСѓРµРј СЂР°Р·РјРµСЂ СЃРїРёСЃРєР° focusRequesters СЃ СЂР°Р·РјРµСЂРѕРј items
        when {
            focusRequesters.size < items.size -> {
                // Р”РѕР±Р°РІР»СЏРµРј РЅРµРґРѕСЃС‚Р°СЋС‰РёРµ FocusRequester
                repeat(items.size - focusRequesters.size) {
                    focusRequesters.add(FocusRequester())
                }
            }
            focusRequesters.size > items.size -> {
                // РЈРґР°Р»СЏРµРј Р»РёС€РЅРёРµ FocusRequester
                repeat(focusRequesters.size - items.size) {
                    focusRequesters.removeAt(focusRequesters.lastIndex)
                }
            }
        }
    }

    // РћР±СЂР°Р±РѕС‚РєР° РѕС‚Р»РѕР¶РµРЅРЅРѕРіРѕ С„РѕРєСѓСЃР°
    LaunchedEffect(items.size, pendingFocusIndex.value) {
        val index = pendingFocusIndex.value
        if (index != null && index in 0 until focusRequesters.size) {
            focusRequesters[index].requestFocus()
            pendingFocusIndex.value = null
        }
    }

    LazyColumn(modifier = modifier.fillMaxWidth()) {
        items(items.size) { index ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 6.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                BasicTextField(
                    value = items[index],
                    onValueChange = { newValue ->
                        items[index] = newValue
                        onItemsChange(items.toList())
                    },
                    modifier = Modifier
                        .weight(1f)
                        .focusRequester(
                            key(index) {
                                focusRequesters.getOrNull(index) ?: remember { FocusRequester() }
                            }
                        )
                        .onPreviewKeyEvent { event ->
                            if (event.type == KeyEventType.KeyDown) {
                                when (event.key) {
                                    Key.Backspace -> {
                                        // РЈРґР°Р»СЏРµРј СЃС‚СЂРѕРєСѓ С‚РѕР»СЊРєРѕ РµСЃР»Рё РѕРЅР° РїСѓСЃС‚Р°СЏ Рё РЅРµ РµРґРёРЅСЃС‚РІРµРЅРЅР°СЏ
                                        if (items[index].isEmpty() && items.size > minItems) {
                                            val newIndex = (index - 1).coerceAtLeast(0)
                                            items.removeAt(index)
                                            pendingFocusIndex.value = newIndex
                                            onItemsChange(items.toList())
                                            true
                                        } else {
                                            false
                                        }
                                    }
                                    else -> false
                                }
                            } else {
                                false
                            }
                        },
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        fontSize = 32.sp
                    ),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
                    keyboardActions = KeyboardActions(
                        onNext = {
                            if (index == items.lastIndex) {
                                // Р’ РїРѕСЃР»РµРґРЅРµРј РїРѕР»Рµ - РґРѕР±Р°РІР»СЏРµРј РЅРѕРІСѓСЋ СЃС‚СЂРѕРєСѓ
                                if (items[index].isNotBlank()) {
                                    items.add("")
                                    pendingFocusIndex.value = items.lastIndex
                                    onItemsChange(items.toList())
                                }
                            } else {
                                // РџРµСЂРµС…РѕРґРёРј Рє СЃР»РµРґСѓСЋС‰РµРјСѓ РїРѕР»СЋ
                                focusRequesters.getOrNull(index + 1)?.requestFocus()
                            }
                        }
                    )
                )
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/ExpandableSection.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

@Composable
fun ExpandableSection(
    title: String,
    icon: Painter,
    expandedContentDescription: String,
    collapsedContentDescription: String,
    modifier: Modifier = Modifier,
    initiallyExpanded: Boolean = false,
    content: @Composable () -> Unit
) {
    var expanded by remember { mutableStateOf(initiallyExpanded) }
    val rotationState by animateFloatAsState(
        targetValue = if (expanded) 180f else 0f,
        label = "rotation"
    )

    ElevatedCard(
        modifier = modifier.fillMaxWidth(),
        elevation = CardDefaults.elevatedCardElevation(
            defaultElevation = 4.dp
        ),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerLow
        )
    ) {
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { expanded = !expanded }
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .clip(CircleShape)
                            .background(MaterialTheme.colorScheme.primaryContainer),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            painter = icon,
                            contentDescription = null, // Icon is decorative here
                            tint = MaterialTheme.colorScheme.onPrimaryContainer,
                            modifier = Modifier.size(24.dp)
                        )
                    }

                    Spacer(modifier = Modifier.width(16.dp))

                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.SemiBold
                    )
                }

                val rotationState by animateFloatAsState(
                    targetValue = if (expanded) 180f else 0f,
                    label = "rotation"
                )

                Icon(
                    imageVector = Icons.Default.KeyboardArrowDown,
                    contentDescription = if (expanded) collapsedContentDescription else expandedContentDescription,
                    modifier = Modifier.rotate(rotationState),
                    tint = MaterialTheme.colorScheme.primary
                )
            }

            AnimatedVisibility(
                visible = expanded,
                enter = expandVertically(
                    animationSpec = spring(
                        dampingRatio = Spring.DampingRatioMediumBouncy,
                        stiffness = Spring.StiffnessLow
                    )
                ) + fadeIn(),
                exit = shrinkVertically() + fadeOut()
            ) {
                // Add padding to the content area for better separation
                Column(modifier = Modifier.padding(bottom = 8.dp)) {
                    content()
                }
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/FlipCardOverlay.kt
================================================
package com.byteflipper.random.ui.components

import androidx.activity.compose.BackHandler
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.boundsInRoot
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.foundation.shape.RoundedCornerShape
import kotlinx.coroutines.Job
import kotlinx.coroutines.async
import kotlinx.coroutines.joinAll
import kotlinx.coroutines.launch
import kotlin.math.PI
import kotlin.math.floor
import kotlin.math.hypot
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sin

class FlipCardState internal constructor() {
    // Visibility/state flags
    var isVisible by mutableStateOf(false)
    var isClosing by mutableStateOf(false)
    var isSpinning by mutableStateOf(false)

    // Rotation state
    val cardRotation = Animatable(0f)
    var lastStopAngle by mutableStateOf(0f)

    // Scrim progress (also usable outside for blur)
    val scrimProgress = Animatable(0f)

    // Exit transforms
    val exitAlpha = Animatable(1f)
    val exitRotationZ = Animatable(0f)
    val exitTx = Animatable(0f)
    val exitTy = Animatable(0f)
    val exitScale = Animatable(1f)

    // Text alphas
    val frontTextAlpha = Animatable(1f)
    val backTextAlpha = Animatable(1f)

    // Layout measurements
    var overlayTopLeftInRoot by mutableStateOf(Offset.Zero)
    var overlaySize by mutableStateOf(IntSize.Zero)
    var cardCenterInRoot by mutableStateOf(Offset.Zero)

    // Background jobs
    var closeJob: Job? = null
    var spinJob: Job? = null
}

@Composable
fun rememberFlipCardState(): FlipCardState {
    // All Animatables live in the state; no external scope is stored here
    return remember { FlipCardState() }
}

private fun normalizeAngle(angle: Float): Float {
    return ((angle % 360f) + 360f) % 360f
}

@Composable
fun FlipCardOverlay(
    state: FlipCardState,
    anchorInRoot: Offset,
    onClosed: () -> Unit,
    modifier: Modifier = Modifier,
    cardSize: Dp = 280.dp,
    // Colors are overridable to support reuse on other screens
    frontContainerColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.primaryContainer,
    backContainerColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.secondaryContainer,
    frontContent: @Composable () -> Unit,
    backContent: @Composable () -> Unit,
) {
    val scope = rememberCoroutineScope()

    fun resetExitTransforms() = scope.launch {
        state.exitAlpha.snapTo(1f)
        state.exitRotationZ.snapTo(0f)
        state.exitTx.snapTo(0f)
        state.exitTy.snapTo(0f)
        state.exitScale.snapTo(1f)
    }

    // Public helpers on state via lambdas to avoid leaking scope outside
    if (state is FlipCardState) {
        // Expose helper functions on the instance via extension-like closures
        // Open overlay
        if (false) { /* no-op placeholder to keep structured */ }
    }

    // Back press closes overlay
    BackHandler(enabled = state.isVisible && !state.isClosing) {
        startCloseInternal(state, scope, anchorInRoot, onClosed)
    }

    if (state.isVisible || state.scrimProgress.value > 0.01f) {
        val overlayClickInteraction = remember { MutableInteractionSource() }
        val scrimSurfaceColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)

        Box(
            modifier = modifier
                .fillMaxSize()
                .onGloballyPositioned { coords ->
                    state.overlayTopLeftInRoot = coords.positionInRoot()
                    state.overlaySize = coords.size
                }
                .clickable(
                    interactionSource = overlayClickInteraction,
                    indication = null,
                    enabled = state.isVisible && !state.isClosing && !state.isSpinning
                ) {
                    startCloseInternal(state, scope, anchorInRoot, onClosed)
                }
        ) {
            // Scrim
            if (state.overlaySize.width > 0 && state.overlaySize.height > 0) {
                val maxRadius = hypot(
                    state.overlaySize.width.toFloat(),
                    state.overlaySize.height.toFloat()
                )
                val fabCenterLocal = anchorInRoot - state.overlayTopLeftInRoot
                val radius = max(1f, state.scrimProgress.value * maxRadius * 1.2f)
                val alpha = 0.85f * state.scrimProgress.value

                Canvas(modifier = Modifier.fillMaxSize()) {
                    drawCircle(
                        brush = Brush.radialGradient(
                            colors = listOf(
                                scrimSurfaceColor.copy(alpha = 0f),
                                scrimSurfaceColor.copy(alpha = alpha * 0.3f),
                                scrimSurfaceColor.copy(alpha = alpha * 0.6f),
                                scrimSurfaceColor.copy(alpha = alpha)
                            ),
                            center = fabCenterLocal,
                            radius = radius
                        ),
                        center = fabCenterLocal,
                        radius = radius
                    )
                }
            }

            // Determine side visibility from rotation
            val currentRotation = state.cardRotation.value
            val normalizedRotation = normalizeAngle(currentRotation)
            val showFront = normalizedRotation < 90f || normalizedRotation > 270f

            // Scale bump during flip
            val flipProgress = (normalizedRotation % 180f) / 180f
            val scaleEffect = 1f + 0.08f * sin(flipProgress * PI.toFloat())

            // Card
            Box(
                modifier = Modifier
                    .size(cardSize)
                    .align(Alignment.Center)
                    .onGloballyPositioned { coords ->
                        val bounds = coords.boundsInRoot()
                        state.cardCenterInRoot = bounds.center
                    }
                    .graphicsLayer {
                        // Ensure stable camera distance and high precision perspective
                        cameraDistance = 24f * density

                        rotationY = currentRotation
                        rotationZ = state.exitRotationZ.value
                        val totalScale = scaleEffect * state.exitScale.value
                        scaleX = totalScale
                        scaleY = totalScale
                        translationX = state.exitTx.value
                        translationY = state.exitTy.value
                        alpha = state.exitAlpha.value
                    }
            ) {
                // Back side (always composed)
                Card(
                    modifier = Modifier
                        .fillMaxSize()
                        .graphicsLayer { rotationY = 180f }
                        .alpha(if (showFront) 0f else 1f),
                    colors = CardDefaults.cardColors(
                        containerColor = backContainerColor
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                    shape = RoundedCornerShape(24.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .alpha(state.backTextAlpha.value),
                        contentAlignment = Alignment.Center
                    ) {
                        backContent()
                    }
                }

                // Front side (always composed)
                Card(
                    modifier = Modifier
                        .fillMaxSize()
                        .alpha(if (showFront) 1f else 0f),
                    colors = CardDefaults.cardColors(
                        containerColor = frontContainerColor
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                    shape = RoundedCornerShape(24.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .alpha(state.frontTextAlpha.value),
                        contentAlignment = Alignment.Center
                    ) {
                        frontContent()
                    }
                }
            }
        }

        // Reset transforms when overlay becomes visible
        LaunchedEffect(state.isVisible) {
            if (state.isVisible) {
                resetExitTransforms()
            }
        }
    }
}

// Public API functions to control the state
@Composable
fun FlipCardControls(state: FlipCardState): FlipCardController {
    val scope = rememberCoroutineScope()
    return remember(state) {
        FlipCardController(state, scope)
    }
}

class FlipCardController internal constructor(
    private val state: FlipCardState,
    private val scope: kotlinx.coroutines.CoroutineScope
) {
    fun open() {
        state.isVisible = true
        scope.launch {
            state.scrimProgress.stop()
            state.scrimProgress.animateTo(1f, tween(400, easing = FastOutSlowInEasing))
        }
    }

    fun startClose(anchorInRoot: Offset, onClosed: () -> Unit) {
        startCloseInternal(state, scope, anchorInRoot, onClosed)
    }

    fun spinAndReveal(
        effectiveDelayMs: Int,
        onReveal: (targetIsFront: Boolean) -> Unit,
        onSpinCompleted: (() -> Unit)? = null,
    ) {
        val inputDelayMs = effectiveDelayMs.coerceAtLeast(1)
        state.spinJob?.cancel()
        state.spinJob = scope.launch {
            state.isSpinning = true

            // Hide current text
            state.frontTextAlpha.animateTo(0f, tween(100))
            state.backTextAlpha.animateTo(0f, tween(100))

            // Rotation params based on delay
            val norm = (inputDelayMs - 1000).toFloat() / (60000 - 1000).toFloat()
            val weight = kotlin.math.sqrt(1f - norm.coerceIn(0f, 1f))
            val rpsShort = 2.5f
            val rpsLong = 0.2f
            val rps = rpsLong + (rpsShort - rpsLong) * weight

            val totalRotations = max(1f, rps * (inputDelayMs / 1000f))
            val wholeRotations = floor(totalRotations)
            val finalRotationDelta = -(wholeRotations * 360f + 180f)

            state.cardRotation.stop()
            state.cardRotation.snapTo(state.lastStopAngle)
            val startAngle = state.lastStopAngle
            val targetAngle = startAngle + finalRotationDelta

            val targetNormalized = normalizeAngle(targetAngle)
            val targetIsFront = targetNormalized < 90f || targetNormalized > 270f

            // Jitter params
            val ampShort = 15f
            val ampLong = 5f
            val amp0 = ampLong + (ampShort - ampLong) * weight

            fun easeOutCubic(p: Float): Float {
                val om = 1f - p
                return 1f - om * om * om
            }

            var revealed = false
            val revealTime = min(400, inputDelayMs / 3)

            val start = androidx.compose.runtime.withFrameNanos { it }
            var now = start

            while (true) {
                now = androidx.compose.runtime.withFrameNanos { it }
                val elapsedMs = ((now - start) / 1_000_000).toInt()
                val progress = (elapsedMs.toFloat() / inputDelayMs).coerceIn(0f, 1f)
                val eased = easeOutCubic(progress)

                val tSec = (now - start) / 1_000_000_000f
                val amp = amp0 * (1f - eased)
                val jitter = amp * (
                    0.5f * sin(2f * PI.toFloat() * 2.7f * tSec) +
                        0.3f * sin(2f * PI.toFloat() * 4.3f * tSec + 0.5f) +
                        0.2f * sin(2f * PI.toFloat() * 7.1f * tSec + 1.2f)
                    )

                val angle = startAngle + finalRotationDelta * eased + jitter
                state.cardRotation.snapTo(angle)

                if (!revealed && inputDelayMs - elapsedMs <= revealTime) {
                    onReveal(targetIsFront)
                    if (targetIsFront) {
                        scope.launch {
                            kotlinx.coroutines.delay(100)
                            state.frontTextAlpha.animateTo(1f, tween(300))
                        }
                    } else {
                        scope.launch {
                            kotlinx.coroutines.delay(100)
                            state.backTextAlpha.animateTo(1f, tween(300))
                        }
                    }
                    revealed = true
                }

                if (progress >= 1f) break
            }

            state.cardRotation.snapTo(targetAngle)
            state.lastStopAngle = targetAngle

            if (targetIsFront && state.frontTextAlpha.value < 1f) {
                state.frontTextAlpha.animateTo(1f, tween(200))
            } else if (!targetIsFront && state.backTextAlpha.value < 1f) {
                state.backTextAlpha.animateTo(1f, tween(200))
            }

            state.isSpinning = false
            onSpinCompleted?.invoke()
        }
    }

    fun isVisible(): Boolean = state.isVisible
    val scrimProgress get() = state.scrimProgress
}

private fun startCloseInternal(
    state: FlipCardState,
    scope: kotlinx.coroutines.CoroutineScope,
    anchorInRoot: Offset,
    onClosed: () -> Unit
) {
    if (!state.isVisible || state.isClosing) return
    state.isClosing = true
    state.spinJob?.cancel()
    state.spinJob = null
    state.isSpinning = false

    state.closeJob?.cancel()
    state.closeJob = scope.launch {
        val dx = anchorInRoot.x - state.cardCenterInRoot.x
        val dy = anchorInRoot.y - state.cardCenterInRoot.y

        val animations = listOf(
            async { state.scrimProgress.animateTo(0f, tween(350, easing = FastOutSlowInEasing)) },
            async { state.exitRotationZ.animateTo(-360f, tween(450, easing = FastOutSlowInEasing)) },
            async { state.exitScale.animateTo(0.5f, spring(dampingRatio = 0.7f, stiffness = Spring.StiffnessLow)) },
            async { state.exitTx.animateTo(dx, spring(dampingRatio = 0.65f, stiffness = Spring.StiffnessLow)) },
            async { state.exitTy.animateTo(dy, spring(dampingRatio = 0.65f, stiffness = Spring.StiffnessLow)) },
            async { state.exitAlpha.animateTo(0f, tween(400, easing = FastOutSlowInEasing)) }
        )
        animations.joinAll()

        // Reset state
        state.isVisible = false
        state.isClosing = false
        state.lastStopAngle = 0f
        state.cardRotation.snapTo(0f)
        state.frontTextAlpha.snapTo(1f)
        state.backTextAlpha.snapTo(1f)

        onClosed()
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/GeneratorConfigDialog.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.RestartAlt
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.outlined.Numbers
import androidx.compose.material.icons.outlined.Repeat
import androidx.compose.material.icons.outlined.Timer
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import kotlin.math.roundToInt

@Composable
fun GeneratorConfigDialog(
    visible: Boolean,
    onDismissRequest: () -> Unit,
    // РљРѕР»РёС‡РµСЃС‚РІРѕ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ
    countText: String,
    onCountChange: (String) -> Unit,
    // РџРѕРІС‚РѕСЂРµРЅРёСЏ
    allowRepetitions: Boolean,
    onAllowRepetitionsChange: (Boolean) -> Unit,
    usedNumbers: Set<Int>,
    availableRange: IntRange?,
    onResetUsedNumbers: () -> Unit,
    // Р—Р°РґРµСЂР¶РєР°
    useDelay: Boolean,
    onUseDelayChange: (Boolean) -> Unit,
    delayText: String,
    onDelayChange: (String) -> Unit,
    minDelayMs: Int = 1_000,
    maxDelayMs: Int = 60_000,
    defaultDelayMs: Int = 3_000
) {
    if (!visible) return

    AlertDialog(
        onDismissRequest = onDismissRequest,
        icon = {
            Icon(
                painter = painterResource(id = R.drawable.settings_24px),
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary
            )
        },
        title = {
            Text(
                text = stringResource(R.string.generator_settings),
                style = MaterialTheme.typography.headlineSmall
            )
        },
        text = {
            Column(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(20.dp)
            ) {
                // РљРѕР»РёС‡РµСЃС‚РІРѕ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ
                val countVal = countText.toIntOrNull()?.coerceIn(1, 100) ?: 1

                Column(modifier = Modifier.fillMaxWidth()) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.numbers_24px),
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.result_count),
                            style = MaterialTheme.typography.bodyLarge,
                            modifier = Modifier.weight(1f)
                        )
                        Text(
                            text = countVal.toString(),
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Slider(
                        value = countVal.toFloat(),
                        onValueChange = { v ->
                            val nv = v.roundToInt().coerceIn(1, 100)
                            onCountChange(nv.toString())
                        },
                        valueRange = 1f..100f
                    )

                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            "1",
                            style = MaterialTheme.typography.labelSmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        Text(
                            "100",
                            style = MaterialTheme.typography.labelSmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }

                HorizontalDivider()

                // РџРѕРІС‚РѕСЂРµРЅРёСЏ
                Column(modifier = Modifier.fillMaxWidth()) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.repeat_24px),
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.secondary,
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Column(modifier = Modifier.weight(1f)) {
                            Text(
                                text = stringResource(R.string.allow_repetitions),
                                style = MaterialTheme.typography.bodyLarge
                            )
                            if (!allowRepetitions && usedNumbers.isNotEmpty() && availableRange != null) {
                                val totalCount = availableRange.count()
                                val usedCount = usedNumbers.count { it in availableRange }
                                Text(
                                    text = "${stringResource(R.string.used_count)}: $usedCount РёР· $totalCount",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                        }
                        Switch(
                            checked = allowRepetitions,
                            onCheckedChange = onAllowRepetitionsChange
                        )
                    }

                    if (!allowRepetitions && usedNumbers.isNotEmpty()) {
                        Spacer(modifier = Modifier.height(8.dp))
                        TextButton(
                            onClick = onResetUsedNumbers,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.restart_alt_24px),
                                contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                            Spacer(modifier = Modifier.width(4.dp))
                            Text(stringResource(R.string.reset_history))
                        }
                    }
                }

                HorizontalDivider()

                // Р—Р°РґРµСЂР¶РєР°
                Column(modifier = Modifier.fillMaxWidth()) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.timer_24px),
                            contentDescription = null,
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.use_delay),
                            style = MaterialTheme.typography.bodyLarge,
                            modifier = Modifier.weight(1f)
                        )
                        Switch(
                            checked = useDelay,
                            onCheckedChange = onUseDelayChange
                        )
                    }

                    if (useDelay) {
                        val minSec = (minDelayMs / 1000).coerceAtLeast(1)
                        val maxSec = (maxDelayMs / 1000).coerceAtLeast(minSec)
                        val currentMs = delayText.toIntOrNull() ?: defaultDelayMs
                        val currentSec = (currentMs / 1000).coerceIn(minSec, maxSec)

                        Spacer(modifier = Modifier.height(12.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = stringResource(R.string.delay),
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                            Text(
                                text = "$currentSec ${stringResource(R.string.seconds_short)}",
                                style = MaterialTheme.typography.titleMedium,
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Slider(
                            value = currentSec.toFloat(),
                            onValueChange = { v ->
                                val nv = v.roundToInt().coerceIn(minSec, maxSec)
                                onDelayChange((nv * 1000).toString())
                            },
                            valueRange = minSec.toFloat()..maxSec.toFloat()
                        )

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(
                                "${minSec}${stringResource(R.string.seconds_short)}",
                                style = MaterialTheme.typography.labelSmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                            Text(
                                "${maxSec}${stringResource(R.string.seconds_short)}",
                                style = MaterialTheme.typography.labelSmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    } else {
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = stringResource(R.string.fixed_delay_1_second),
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
        },
        confirmButton = {
            TextButton(
                onClick = onDismissRequest
            ) {
                Text(stringResource(R.string.close))
            }
        }
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/IconCard.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardColors
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * РЈРЅРёРІРµСЂСЃР°Р»СЊРЅР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ РёРєРѕРЅРєРѕР№, Р·Р°РіРѕР»РѕРІРєРѕРј Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёРј СЃРѕРґРµСЂР¶РёРјС‹Рј
 *
 * @param title Р·Р°РіРѕР»РѕРІРѕРє РєР°СЂС‚РѕС‡РєРё
 * @param icon РёРєРѕРЅРєР° РґР»СЏ РєР°СЂС‚РѕС‡РєРё
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 * @param subtitle РїРѕРґР·Р°РіРѕР»РѕРІРѕРє (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
 * @param isElevated РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ ElevatedCard РІРјРµСЃС‚Рѕ РѕР±С‹С‡РЅРѕР№ Card
 * @param colors С†РІРµС‚Р° РєР°СЂС‚РѕС‡РєРё
 * @param content РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРѕРµ СЃРѕРґРµСЂР¶РёРјРѕРµ РєР°СЂС‚РѕС‡РєРё
 */
@Composable
fun IconCard(
    title: String,
    icon: Painter,
    modifier: Modifier = Modifier,
    subtitle: String? = null,
    isElevated: Boolean = false,
    colors: CardColors = CardDefaults.cardColors(),
    content: @Composable () -> Unit = {}
) {
    if (isElevated) {
        ElevatedCard(
            modifier = modifier.fillMaxWidth(),
            colors = CardDefaults.elevatedCardColors(
                containerColor = colors.containerColor
            ),
            shape = RoundedCornerShape(16.dp)
        ) {
            IconCardContent(
                title = title,
                icon = icon,
                subtitle = subtitle,
                content = content
            )
        }
    } else {
        Card(
            modifier = modifier.fillMaxWidth(),
            colors = colors,
            shape = RoundedCornerShape(16.dp)
        ) {
            IconCardContent(
                title = title,
                icon = icon,
                subtitle = subtitle,
                content = content
            )
        }
    }
}

@Composable
private fun IconCardContent(
    title: String,
    icon: Painter,
    subtitle: String?,
    content: @Composable () -> Unit
) {
    Column(
        modifier = Modifier.padding(20.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(CircleShape)
                    .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(28.dp)
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
                
                subtitle?.let {
                    Text(
                        text = it,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                }
            }
        }

        if (content != {}) {
            Spacer(modifier = Modifier.size(16.dp))
            content()
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/InfoCard.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp

/**
 * РџСЂРѕСЃС‚Р°СЏ РёРЅС„РѕСЂРјР°С†РёРѕРЅРЅР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ С‚РµРєСЃС‚РѕРј
 *
 * @param text С‚РµРєСЃС‚ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 */
@Composable
fun InfoCard(
    text: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerHighest
        ),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = text,
                style = MaterialTheme.typography.bodyMedium,
                textAlign = TextAlign.Center
            )
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/PreferenceCategory.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun PreferenceCategory(
    title: String,
    modifier: Modifier = Modifier,
    icon: Painter? = null,
    iconTint: Color = MaterialTheme.colorScheme.primary,
    description: String? = null
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Optional icon
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    tint = iconTint,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
            }

            // Category title
            Text(
                text = title,
                color = MaterialTheme.colorScheme.primary,
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = 0.5.sp
            )
        }

        // Optional description
        if (description != null) {
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = description,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                fontSize = 12.sp,
                letterSpacing = 0.25.sp,
                modifier = Modifier.padding(start = if (icon != null) 28.dp else 0.dp)
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/RadioButtonGroupPreference.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

data class RadioOption(
    val key: String,
    val title: String,
    val summary: String? = null,
    val description: String? = null,
    val icon: Painter? = null,
    val summaryIcon: ImageVector? = null
)

@Composable
fun RadioButtonGroup(
    options: List<RadioOption>,
    selectedKey: String,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f),
    onOptionSelected: (String) -> Unit
) {
    val selectedOption = options.find { it.key == selectedKey } ?: options.firstOrNull()

    Column {
        options.forEachIndexed { index, option ->
            // Assuming RadioButtonPreference will be available in this package after moving
            RadioButtonPreference(
                key = option.key,
                title = option.title,
                description = option.description,
                selected = selectedKey == option.key,
                icon = option.icon,
                activeIndicatorColor = activeIndicatorColor,
                inactiveIndicatorColor = inactiveIndicatorColor,
                onClick = { onOptionSelected(option.key) }
            )

            if (index < options.size - 1) {
                Spacer(modifier = Modifier.height(1.dp))
            }
        }

        selectedOption?.let { option ->
            Spacer(modifier = Modifier.height(0.dp))

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                option.summaryIcon?.let { summaryIcon ->
                    Icon(
                        imageVector = summaryIcon,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp),
                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.width(16.dp))
                }

                // Ensure summary is not null before converting to string
                option.summary?.let { summaryText ->
                    Text(
                        text = summaryText,
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/RadioButtonPreference.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.RadioButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun RadioButtonPreference(
    title: String,
    selected: Boolean,
    key: String,
    description: String? = null,
    icon: Painter? = null,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f),
    onClick: () -> Unit
) {
    val indicatorColor = if (selected) activeIndicatorColor else inactiveIndicatorColor

    Surface(
        modifier = Modifier.fillMaxWidth(),
        color = MaterialTheme.colorScheme.surface,
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onClick() }
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(24.dp),
                    tint = if (selected) activeIndicatorColor else MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.width(12.dp))
            }

            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.onSurface
                )

                if (description != null) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = description,
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }

            Box(
                modifier = Modifier
                    .padding(horizontal = 8.dp)
                    .width(2.dp)
                    .height(24.dp)
                    .background(
                        color = indicatorColor,
                        shape = RoundedCornerShape(50)
                    )
            )

            RadioButton(
                selected = selected,
                onClick = onClick,
                colors = RadioButtonDefaults.colors(
                    selectedColor = activeIndicatorColor,
                    unselectedColor = MaterialTheme.colorScheme.onSurfaceVariant
                )
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/SizedFab.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.LargeFloatingActionButton
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import com.byteflipper.random.data.settings.FabSizeSetting

@Composable
fun SizedFab(
    size: FabSizeSetting,
    onClick: () -> Unit,
    containerColor: Color,
    contentColor: Color,
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    when (size) {
        FabSizeSetting.Small -> SmallFloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
        FabSizeSetting.Medium -> FloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
        FabSizeSetting.Large -> LargeFloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/SplashScreen.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.animation.core.CubicBezierEasing
import androidx.compose.animation.core.InfiniteTransition
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.GenericShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.byteflipper.random.ui.theme.RandomTheme
import kotlin.math.sqrt
import kotlin.time.Duration
import kotlin.time.Duration.Companion.milliseconds
import kotlin.time.DurationUnit

private val blueCatalina: Color = Color(0xFF063773)

private const val BASE_SCALE = 1.04f
private const val BASE_SCALE_Y_MULT = 1.03f

// РЎРєСЂСѓРіР»С‘РЅРЅС‹Р№ РєРІР°РґСЂР°С‚ (РєСѓР±РёРє)
val CubeShape: Shape = RoundedCornerShape(16.dp)

// РҐРµРєСЃР°РіРѕРЅ (С€РµСЃС‚РёСѓРіРѕР»СЊРЅРёРє) СЃРѕ СЃРєСЂСѓРіР»С‘РЅРЅС‹РјРё СѓРіР»Р°РјРё
fun RoundedHexagonShape(
    cornerRadius: Float = 24f,
    overallScale: Float = 1f,
    verticalScale: Float = 1f
): Shape = GenericShape { size, _ ->
    val w = size.width
    val h = size.height
    val cx = w * 0.5f
    val cy = h * 0.5f

    val sx = overallScale
    val sy = overallScale * verticalScale

    // Р±Р°Р·РѕРІС‹Рµ РІРµСЂС€РёРЅС‹ С€РµСЃС‚РёСѓРіРѕР»СЊРЅРёРєР° (РґРѕ РјР°СЃС€С‚Р°Р±РёСЂРѕРІР°РЅРёСЏ)
    val base = listOf(
        cx to 0f,
        w to 0.25f * h,
        w to 0.75f * h,
        cx to h,
        0f to 0.75f * h,
        0f to 0.25f * h
    )

    // РјР°СЃС€С‚Р°Р±РёСЂСѓРµРј РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ С†РµРЅС‚СЂР°
    val pts = base.map { (x, y) ->
        val nx = cx + (x - cx) * sx
        val ny = cy + (y - cy) * sy
        nx to ny
    }

    // СЃРєСЂСѓРіР»СЏРµРј СѓРіР»С‹ РєРІР°РґСЂР°С‚РёС‡РЅС‹РјРё Р‘РµР·СЊРµ (control вЂ” СЃР°РјР° РІРµСЂС€РёРЅР°)
    val n = pts.size
    for (i in 0 until n) {
        val prev = pts[(i - 1 + n) % n]
        val v    = pts[i]
        val next = pts[(i + 1) % n]

        val dx1 = prev.first - v.first
        val dy1 = prev.second - v.second
        val dx2 = next.first - v.first
        val dy2 = next.second - v.second

        val lenPrev = kotlin.math.sqrt(dx1 * dx1 + dy1 * dy1)
        val lenNext = kotlin.math.sqrt(dx2 * dx2 + dy2 * dy2)

        val minLen = if (lenPrev < lenNext) lenPrev else lenNext
        val r = cornerRadius.coerceAtMost(minLen / 2f)

        val t1 = if (lenPrev > 0f) r / lenPrev else 0f
        val t2 = if (lenNext > 0f) r / lenNext else 0f

        val p1x = v.first  - (v.first  - prev.first) * t1
        val p1y = v.second - (v.second - prev.second) * t1
        val p2x = v.first  + (next.first  - v.first) * t2
        val p2y = v.second + (next.second - v.second) * t2

        if (i == 0) {
            moveTo(p1x, p1y)
        } else {
            lineTo(p1x, p1y)
        }
        quadraticBezierTo(v.first, v.second, p2x, p2y)
    }
    close()
}

// рџ‘‰ РђРєС‚РёРІРЅР°СЏ С„РѕСЂРјР°: Р±РµР· РІРЅСѓС‚СЂРµРЅРЅРµРіРѕ СЃРєРµР№Р»Р°, С‚РѕР»СЊРєРѕ СЂР°РґРёСѓСЃ
val ActiveShape: Shape = RoundedHexagonShape(
    cornerRadius = 32f,
    overallScale = 1f,
    verticalScale = 1f
)

/**
 * A heartbeat animation composable that displays ripple effects with an optional exit animation.
 */
@Composable
fun HeartBeatAnimation(
    modifier: Modifier = Modifier,
    isVisible: Boolean = true,
    exitAnimationDuration: Duration = Duration.ZERO,
    onStartExitAnimation: () -> Unit = {}
) {
    // Animation constants
    val rippleCount = 4
    val rippleDurationMs = 3333
    val rippleDelayMs = rippleDurationMs / 8
    val baseSize = 164.dp
    val containerSize = 288.dp

    // Track exit animation state
    var isExitAnimationStarted by remember { mutableStateOf(false) }

    // Trigger exit animation when visibility changes
    LaunchedEffect(isVisible) {
        if (!isVisible && !isExitAnimationStarted) {
            isExitAnimationStarted = true
            onStartExitAnimation()
        }
    }

    // Calculate screen diagonal for exit animation scaling
    val configuration = LocalConfiguration.current
    val screenWidth = configuration.screenWidthDp
    val screenHeight = configuration.screenHeightDp
    val screenDiagonal = sqrt((screenWidth * screenWidth + screenHeight * screenHeight).toFloat())

    // Exit animation scale with snappy easing
    val snappyEasing = CubicBezierEasing(0.2f, 0.0f, 0.2f, 1.0f)
    val exitAnimationScale by animateFloatAsState(
        targetValue = if (isExitAnimationStarted) screenDiagonal / baseSize.value else 0f,
        animationSpec = tween(
            durationMillis = exitAnimationDuration.toInt(DurationUnit.MILLISECONDS),
            easing = snappyEasing
        ),
        label = "exitScale"
    )

    // Infinite ripple animation transition
    val infiniteTransition = rememberInfiniteTransition(label = "heartbeatTransition")

    Box(
        modifier = modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Only show ripples when visible and not exiting
        if (isVisible && !isExitAnimationStarted) {
            Box(
                modifier = Modifier.size(containerSize),
                contentAlignment = Alignment.Center
            ) {
                // Create ripple shapes with staggered animations
                repeat(rippleCount) { index ->
                    RippleShape(
                        infiniteTransition = infiniteTransition,
                        index = index,
                        rippleDurationMs = rippleDurationMs,
                        rippleDelayMs = rippleDelayMs,
                        baseSize = baseSize
                    )
                }
            }
        }

        // Exit animation shape
        if (isExitAnimationStarted) {
            Box(
                modifier = Modifier
                    .size(baseSize)
                    .graphicsLayer {
                        // РњР°СЃС€С‚Р°Р±РёСЂСѓРµРј С„РёРіСѓСЂСѓ: Р±Р°Р·РѕРІС‹Р№ СЃРєРµР№Р» + РІС‹С…РѕРґРЅРѕР№
                        scaleX = BASE_SCALE * exitAnimationScale
                        scaleY = BASE_SCALE * BASE_SCALE_Y_MULT * exitAnimationScale
                    }
                    .background(
                        color = blueCatalina,
                        shape = ActiveShape
                    )
            )
        }
    }
}

/**
 * Individual ripple shape component with staggered animation
 */
@Composable
private fun RippleShape(
    infiniteTransition: InfiniteTransition,
    index: Int,
    rippleDurationMs: Int,
    rippleDelayMs: Int,
    baseSize: Dp
) {
    val totalDuration = rippleDurationMs + (rippleDelayMs * index)
    val easing = CubicBezierEasing(0.4f, 0.0f, 0.2f, 1.0f)

    // Animate scale from 1f to 4f
    val animatedScale by infiniteTransition.animateFloat(
        initialValue = 1f,
        targetValue = 4f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = totalDuration,
                delayMillis = rippleDelayMs * index,
                easing = easing
            ),
            repeatMode = RepeatMode.Restart
        ),
        label = "rippleScale$index"
    )

    // Animate alpha from 0.25f to 0f
    val animatedAlpha by infiniteTransition.animateFloat(
        initialValue = 0.25f,
        targetValue = 0f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = totalDuration,
                delayMillis = rippleDelayMs * index,
                easing = easing
            ),
            repeatMode = RepeatMode.Restart
        ),
        label = "rippleAlpha$index"
    )

    Box(
        modifier = Modifier
            .size(baseSize)
            .graphicsLayer {
                // РњР°СЃС€С‚Р°Р±РёСЂСѓРµРј РІРѕР»РЅСѓ: Р±Р°Р·РѕРІС‹Р№ СЃРєРµР№Р» + Р°РЅРёРјРёСЂРѕРІР°РЅРЅС‹Р№
                scaleX = BASE_SCALE * animatedScale
                scaleY = BASE_SCALE * BASE_SCALE_Y_MULT * animatedScale
                alpha = animatedAlpha
            }
            .background(
                color = blueCatalina,
                shape = ActiveShape
            )
    )
}

@Preview(showBackground = true)
@Composable
fun HeartBeatAnimationPreview() {
    RandomTheme {
        HeartBeatAnimation(
            isVisible = true,
            exitAnimationDuration = 600L.milliseconds,
            onStartExitAnimation = { }
        )
    }
}

@Preview(showBackground = true)
@Composable
fun RippleShapePreview() {
    RandomTheme {
        RippleShape(
            infiniteTransition = rememberInfiniteTransition(label = "heartbeatTransition"),
            index = 0,
            rippleDurationMs = 3313 / 4,
            rippleDelayMs = (3313 / 4) / 8,
            baseSize = 144.dp
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/SwitchPreference.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

@Composable
fun SwitchPreference(
    title: String,
    descriptionOn: String = stringResource(R.string.enabled),
    descriptionOff: String = stringResource(R.string.disabled),
    checked: Boolean,
    icon: Painter? = null,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = Color.Gray.copy(alpha = 0.3f),
    activeSwitchColor: Color = MaterialTheme.colorScheme.primary,
    inactiveSwitchColor: Color = MaterialTheme.colorScheme.surfaceVariant,
    onCheckedChange: (Boolean) -> Unit
) {
    val indicatorColor = if (checked) activeIndicatorColor else inactiveIndicatorColor

    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onCheckedChange(!checked) },
        color = MaterialTheme.colorScheme.surface,
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(24.dp),
                    tint = if (checked) activeIndicatorColor else MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.width(16.dp))
            }

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.onSurface
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = if (checked) descriptionOn else descriptionOff,
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            Box(
                modifier = Modifier
                    .padding(horizontal = 12.dp)
                    .width(3.dp)
                    .height(32.dp)
                    .background(
                        color = indicatorColor,
                        shape = RoundedCornerShape(50)
                    )
            )

            Switch(
                checked = checked,
                onCheckedChange = null,
                colors = SwitchDefaults.colors(
                    checkedThumbColor = MaterialTheme.colorScheme.onPrimary,
                    checkedTrackColor = activeSwitchColor,
                    checkedBorderColor = activeSwitchColor,
                    uncheckedThumbColor = MaterialTheme.colorScheme.onSurfaceVariant,
                    uncheckedTrackColor = inactiveSwitchColor,
                    uncheckedBorderColor = MaterialTheme.colorScheme.outline
                )
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/VersionInfoCard.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * РџРµСЂРµРёСЃРїРѕР»СЊР·СѓРµРјР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ РёРЅС„РѕСЂРјР°С†РёРµР№ Рѕ РІРµСЂСЃРёРё
 *
 * @param versionTitle Р·Р°РіРѕР»РѕРІРѕРє (РЅР°РїСЂРёРјРµСЂ "Р’РµСЂСЃРёСЏ")
 * @param versionInfo РёРЅС„РѕСЂРјР°С†РёСЏ Рѕ РІРµСЂСЃРёРё (РЅР°РїСЂРёРјРµСЂ "1.0.0 (1)")
 * @param icon РёРєРѕРЅРєР° РґР»СЏ РєР°СЂС‚РѕС‡РєРё
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 */
@Composable
fun VersionInfoCard(
    versionTitle: String,
    versionInfo: String,
    icon: Painter,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerHigh
        ),
        shape = RoundedCornerShape(16.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(CircleShape)
                    .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(28.dp)
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = versionTitle,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold
                )

                Text(
                    text = versionInfo,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceScreen.kt
================================================
package com.byteflipper.random.ui.dice

import android.view.SoundEffectConstants
import androidx.activity.compose.BackHandler
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import kotlin.math.min
import kotlin.random.Random
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.ui.components.SizedFab
import androidx.compose.animation.animateColorAsState
import androidx.compose.foundation.layout.Arrangement
import kotlinx.coroutines.Job
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.material3.FloatingActionButton

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DiceScreen(onBack: () -> Unit) {
    val scope = rememberCoroutineScope()
    val haptics = LocalHapticFeedback.current
    val view = LocalView.current

    val maxDice = 10
    var diceCount by rememberSaveable { mutableStateOf(2) }
    var diceValues by rememberSaveable { mutableStateOf(listOf(1, 2)) }

    val rotations = remember { List(maxDice) { Animatable(0f) } }
    val scales = remember { List(maxDice) { Animatable(1f) } }
    val isAnimating = remember { mutableStateOf(List(maxDice) { false }) }

    val diceColorPalette = remember {
        listOf(
            Color(0xFFE74C3C), Color(0xFF3498DB), Color(0xFF2ECC71), Color(0xFFF39C12),
            Color(0xFF9B59B6), Color(0xFF1ABC9C), Color(0xFFE67E22), Color(0xFF34495E),
            Color(0xFF16A085), Color(0xFF27AE60), Color(0xFF2980B9), Color(0xFF8E44AD),
            Color(0xFFC0392B), Color(0xFFD35400), Color(0xFF7F8C8D), Color(0xFF2C3E50)
        )
    }

    var diceColors by remember { mutableStateOf(List(maxDice) { diceColorPalette.random() }) }

    val animatedColors = diceColors.mapIndexed { index, color ->
        animateColorAsState(
            targetValue = color,
            animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing),
            label = "dice_color_$index"
        )
    }

    var isRolling by remember { mutableStateOf(false) }
    val scrimAlpha = remember { Animatable(0f) }
    var overlayVisible by rememberSaveable { mutableStateOf(false) }
    var currentRollJob by remember { mutableStateOf<Job?>(null) }

    LaunchedEffect(diceCount) {
        if (diceValues.size != diceCount) {
            val base = if (diceValues.isEmpty()) emptyList() else diceValues.take(diceCount)
            diceValues = buildList(diceCount) {
                addAll(base)
                repeat(diceCount - base.size) { add(Random.nextInt(1, 7)) }
            }
        }
    }

    suspend fun openOverlayIfNeeded() {
        if (!overlayVisible) {
            overlayVisible = true
            scrimAlpha.snapTo(0f)
            scrimAlpha.animateTo(1f, tween(250, easing = FastOutSlowInEasing))
        }
    }

    fun closeOverlay() {
        scope.launch {
            scrimAlpha.animateTo(0f, tween(200, easing = FastOutSlowInEasing))
            overlayVisible = false
        }
    }

    fun rollAll() {
        currentRollJob?.cancel()
        currentRollJob = scope.launch {
            isRolling = true
            haptics.performHapticFeedback(HapticFeedbackType.LongPress)
            view.playSoundEffect(SoundEffectConstants.CLICK)
            openOverlayIfNeeded()

            val newValues = List(diceCount) { Random.nextInt(1, 7) }

            diceColors = List(maxDice) { index ->
                val currentColor = diceColors[index]
                var newColor = diceColorPalette.random()
                while (newColor == currentColor && diceColorPalette.size > 1) {
                    newColor = diceColorPalette.random()
                }
                newColor
            }

            val jobs = mutableListOf<Job>()
            repeat(diceCount) { i ->
                diceValues = diceValues.toMutableList().also { it[i] = newValues[i] }

                val currentRotation = rotations[i].value
                val normalizedRotation = ((currentRotation % 360) / 90).toInt() * 90f
                rotations[i].snapTo(normalizedRotation)

                jobs += launch {
                    val fullRotations = Random.nextInt(3, 6) * 360f
                    val finalRotation = fullRotations + 90f * Random.nextInt(0, 4)
                    rotations[i].animateTo(
                        targetValue = normalizedRotation + finalRotation,
                        animationSpec = tween(durationMillis = 700, easing = FastOutSlowInEasing)
                    )
                }
                jobs += launch {
                    scales[i].animateTo(1.15f, tween(150, easing = FastOutSlowInEasing))
                    scales[i].animateTo(1f, tween(250, easing = FastOutSlowInEasing))
                }
            }
            jobs.forEach { it.join() }
            isRolling = false
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.dice)) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = {
            val context = LocalContext.current
            val settingsRepo = remember { SettingsRepository.fromContext(context) }
            val settings: Settings by settingsRepo.settingsFlow.collectAsState(initial = Settings())
            SizedFab(
                size = settings.fabSize,
                onClick = { rollAll() },
                containerColor = if (isRolling)
                    MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f)
                else
                    MaterialTheme.colorScheme.primaryContainer,
                contentColor = if (isRolling)
                    MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.5f)
                else
                    MaterialTheme.colorScheme.onPrimaryContainer
            ) {
                Icon(painterResource(R.drawable.autorenew_24px), contentDescription = stringResource(R.string.roll_dice))
            }
        }
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(16.dp)
                .blur((8f * scrimAlpha.value).dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = stringResource(R.string.dice_count),
                style = MaterialTheme.typography.labelLarge,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.fillMaxWidth(),
                textAlign = TextAlign.Center
            )
            Spacer(Modifier.height(12.dp))
            Column(
                verticalArrangement = Arrangement.spacedBy(10.dp)
            ) {
                // РџРµСЂРІС‹Р№ СЂСЏРґ: 1, 2
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
                ) {
                    listOf(1, 2).forEach { n ->
                        val selected = n == diceCount
                        FloatingActionButton(
                            onClick = { diceCount = n },
                            modifier = Modifier.size(56.dp),
                            containerColor = if (selected) MaterialTheme.colorScheme.secondaryContainer
                            else MaterialTheme.colorScheme.surfaceContainer,
                            contentColor = if (selected) MaterialTheme.colorScheme.onSecondaryContainer
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        ) {
                            Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                        }
                    }
                }
                // Р’С‚РѕСЂРѕР№ СЂСЏРґ: 3, 4, 5
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
                ) {
                    listOf(3, 4, 5).forEach { n ->
                        val selected = n == diceCount
                        FloatingActionButton(
                            onClick = { diceCount = n },
                            modifier = Modifier.size(56.dp),
                            containerColor = if (selected) MaterialTheme.colorScheme.secondaryContainer
                            else MaterialTheme.colorScheme.surfaceContainer,
                            contentColor = if (selected) MaterialTheme.colorScheme.onSecondaryContainer
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        ) {
                            Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                        }
                    }
                }
                // РўСЂРµС‚РёР№ СЂСЏРґ: 6, 7, 8
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
                ) {
                    listOf(6, 7, 8).forEach { n ->
                        val selected = n == diceCount
                        FloatingActionButton(
                            onClick = { diceCount = n },
                            modifier = Modifier.size(56.dp),
                            containerColor = if (selected) MaterialTheme.colorScheme.secondaryContainer
                            else MaterialTheme.colorScheme.surfaceContainer,
                            contentColor = if (selected) MaterialTheme.colorScheme.onSecondaryContainer
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        ) {
                            Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                        }
                    }
                }
                // Р§РµС‚РІРµСЂС‚С‹Р№ СЂСЏРґ: 9, 10
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
                ) {
                    listOf(9, 10).forEach { n ->
                        val selected = n == diceCount
                        FloatingActionButton(
                            onClick = { diceCount = n },
                            modifier = Modifier.size(56.dp),
                            containerColor = if (selected) MaterialTheme.colorScheme.secondaryContainer
                            else MaterialTheme.colorScheme.surfaceContainer,
                            contentColor = if (selected) MaterialTheme.colorScheme.onSecondaryContainer
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        ) {
                            Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                        }
                    }
                }
            }
        }

        if (overlayVisible) {
            BackHandler { closeOverlay() }

            Box(modifier = Modifier
                .fillMaxSize()
                .background(Color.Black.copy(alpha = 0.5f * scrimAlpha.value))
                .clickable(interactionSource = remember { MutableInteractionSource() }, indication = null) {
                    closeOverlay()
                }
            ) {
                BoxWithConstraints(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                ) {
                    val columns = when {
                        diceCount <= 1 -> 1
                        diceCount <= 3 -> diceCount
                        else -> 3
                    }
                    val rows = kotlin.math.ceil(diceCount / columns.toFloat()).toInt()
                    val spacing = 16.dp
                    val widthCandidate = (maxWidth - spacing * (columns - 1)) / columns
                    val heightCandidate = (maxHeight - spacing * (rows - 1)) / rows
                    val dieSize = min(widthCandidate.value, heightCandidate.value).dp.coerceIn(84.dp, 200.dp)

                    Column(
                        modifier = Modifier.fillMaxSize(),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        var index = 0
                        repeat(rows) { rowIdx ->
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(spacing),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                repeat(columns) {
                                    if (index < diceCount) {
                                        val i = index
                                        Box(
                                            modifier = Modifier
                                                .size(dieSize)
                                                .graphicsLayer {
                                                    rotationZ = rotations[i].value
                                                    scaleX = scales[i].value
                                                    scaleY = scales[i].value
                                                }
                                                .clip(RoundedCornerShape(16.dp))
                                                .clickable(
                                                    interactionSource = remember { MutableInteractionSource() },
                                                    indication = null,
                                                    enabled = !isAnimating.value[i]
                                                ) {
                                                    if (!isAnimating.value[i]) {
                                                        scope.launch {
                                                            isAnimating.value = isAnimating.value.toMutableList().also { it[i] = true }
                                                            haptics.performHapticFeedback(HapticFeedbackType.TextHandleMove)
                                                            val newV = Random.nextInt(1, 7)
                                                            diceValues = diceValues.toMutableList().also { it[i] = newV }
                                                            val currentColor = diceColors[i]
                                                            var newColor = diceColorPalette.random()
                                                            while (newColor == currentColor && diceColorPalette.size > 1) {
                                                                newColor = diceColorPalette.random()
                                                            }
                                                            diceColors = diceColors.toMutableList().also { it[i] = newColor }

                                                            val currentRotation = rotations[i].value
                                                            val normalizedRotation = ((currentRotation % 360) / 90).toInt() * 90f
                                                            rotations[i].snapTo(normalizedRotation)

                                                            rotations[i].animateTo(
                                                                targetValue = normalizedRotation + 360f * Random.nextInt(2, 4),
                                                                animationSpec = tween(500, easing = FastOutSlowInEasing)
                                                            )
                                                            scales[i].animateTo(1.12f, tween(120))
                                                            scales[i].animateTo(1f, tween(180))
                                                            isAnimating.value = isAnimating.value.toMutableList().also { it[i] = false }
                                                        }
                                                    }
                                                },
                                            contentAlignment = Alignment.Center
                                        ) {
                                            DieFace(value = diceValues[i], color = animatedColors[i].value)
                                        }
                                        index++
                                    }
                                }
                            }
                            if (rowIdx < rows - 1) Spacer(Modifier.height(spacing))
                        }
                        Spacer(Modifier.height(32.dp))
                        val total = diceValues.take(diceCount).sum()
                        Text(
                            text = "${stringResource(R.string.sum)}: $total",
                            style = MaterialTheme.typography.headlineSmall,
                            color = Color.White,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun DieFace(value: Int, color: Color) {
    Canvas(modifier = Modifier.fillMaxSize()) {
        val w = size.width
        val h = size.height
        val s = min(w, h)
        val corner = s * 0.15f

        // РЎРѕР·РґР°РµРј Р±РѕР»РµРµ С‚РµРјРЅС‹Р№ Рё СЃРІРµС‚Р»С‹Р№ РѕС‚С‚РµРЅРєРё
        val darkColor = Color(
            red = (color.red * 0.8f).coerceIn(0f, 1f),
            green = (color.green * 0.8f).coerceIn(0f, 1f),
            blue = (color.blue * 0.8f).coerceIn(0f, 1f)
        )

        val lightColor = Color(
            red = (color.red * 1.2f).coerceIn(0f, 1f),
            green = (color.green * 1.2f).coerceIn(0f, 1f),
            blue = (color.blue * 1.2f).coerceIn(0f, 1f)
        )

        // Р’РЅРµС€РЅСЏСЏ С‚РµРЅСЊ
        drawRoundRect(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.3f),
                    Color.Black.copy(alpha = 0.2f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(w/2 + 6f, h/2 + 6f),
                radius = s * 0.7f
            ),
            topLeft = androidx.compose.ui.geometry.Offset(2f, 2f),
            size = androidx.compose.ui.geometry.Size(w + 4f, h + 4f),
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner + 2f, corner + 2f),
            style = Fill
        )

        // РћСЃРЅРѕРІР° РєСѓР±РёРєР° СЃ РіСЂР°РґРёРµРЅС‚РѕРј
        drawRoundRect(
            brush = androidx.compose.ui.graphics.Brush.linearGradient(
                colors = listOf(lightColor, color, darkColor),
                start = androidx.compose.ui.geometry.Offset(0f, 0f),
                end = androidx.compose.ui.geometry.Offset(w, h)
            ),
            size = size,
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner, corner),
            style = Fill
        )

        // Р’РЅСѓС‚СЂРµРЅРЅСЏСЏ СЂР°РјРєР° РґР»СЏ РіР»СѓР±РёРЅС‹
        drawRoundRect(
            color = darkColor.copy(alpha = 0.3f),
            topLeft = androidx.compose.ui.geometry.Offset(2f, 2f),
            size = androidx.compose.ui.geometry.Size(w - 4f, h - 4f),
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner - 2f, corner - 2f),
            style = Stroke(width = 1.5f)
        )

        // РўРѕС‡РєРё РЅР° РєСѓР±РёРєРµ
        drawDots(value, s, w, h, lightColor)
    }
}

private fun DrawScope.drawDots(value: Int, s: Float, w: Float, h: Float, baseColor: Color) {
    val margin = s * 0.24f
    val cx = w / 2f
    val cy = h / 2f
    val left = margin
    val right = w - margin
    val top = margin
    val bottom = h - margin
    val pipR = s * 0.08f

    fun drawDot(x: Float, y: Float) {
        // Р’РЅРµС€РЅСЏСЏ С‚РµРЅСЊ С‚РѕС‡РєРё
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.4f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(x + 2f, y + 2f),
                radius = pipR * 1.2f
            ),
            radius = pipR * 1.2f,
            center = androidx.compose.ui.geometry.Offset(x + 2f, y + 2f)
        )

        // Р’РїР°РґРёРЅР° РІРѕРєСЂСѓРі С‚РѕС‡РєРё
        drawCircle(
            color = Color.Black.copy(alpha = 0.15f),
            radius = pipR * 1.1f,
            center = androidx.compose.ui.geometry.Offset(x, y)
        )

        // РћСЃРЅРѕРІРЅР°СЏ С‚РѕС‡РєР°
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color(0xFFFAFAFA),
                    Color(0xFFE0E0E0),
                    Color(0xFFBDBDBD)
                ),
                center = androidx.compose.ui.geometry.Offset(x, y),
                radius = pipR
            ),
            radius = pipR,
            center = androidx.compose.ui.geometry.Offset(x, y)
        )

        // Р‘Р»РёРє РЅР° С‚РѕС‡РєРµ
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.White,
                    Color.White.copy(alpha = 0.3f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(x - pipR * 0.3f, y - pipR * 0.3f),
                radius = pipR * 0.5f
            ),
            radius = pipR * 0.4f,
            center = androidx.compose.ui.geometry.Offset(x - pipR * 0.3f, y - pipR * 0.3f)
        )
    }

    when (value.coerceIn(1, 6)) {
        1 -> drawDot(cx, cy)
        2 -> {
            drawDot(left, top)
            drawDot(right, bottom)
        }
        3 -> {
            drawDot(left, top)
            drawDot(cx, cy)
            drawDot(right, bottom)
        }
        4 -> {
            drawDot(left, top)
            drawDot(right, top)
            drawDot(left, bottom)
            drawDot(right, bottom)
        }
        5 -> {
            drawDot(left, top)
            drawDot(right, top)
            drawDot(cx, cy)
            drawDot(left, bottom)
            drawDot(right, bottom)
        }
        6 -> {
            drawDot(left, top)
            drawDot(left, cy)
            drawDot(left, bottom)
            drawDot(right, top)
            drawDot(right, cy)
            drawDot(right, bottom)
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeScreen.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Casino
import androidx.compose.material.icons.outlined.FormatListBulleted
import androidx.compose.material.icons.outlined.FormatListNumbered
import androidx.compose.material.icons.outlined.Gavel
import androidx.compose.material.icons.outlined.MonetizationOn
import androidx.compose.material.icons.outlined.Settings
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetRepository
import com.byteflipper.random.ui.home.components.CreateListDialog
import com.byteflipper.random.ui.home.components.MenuCard
import com.byteflipper.random.ui.home.components.PresetCard
import com.byteflipper.random.ui.home.components.RenameListDialog
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import sh.calvin.reorderable.ReorderableItem
import sh.calvin.reorderable.rememberReorderableLazyListState

// РўРёРїС‹ СЌР»РµРјРµРЅС‚РѕРІ РґР»СЏ drag & drop
sealed class HomeItem {
    data class MenuItem(val type: MenuItemType) : HomeItem()
    data class PresetItem(val preset: ListPreset) : HomeItem()
}

enum class MenuItemType {
    NUMBERS, LIST, DICE, LOT, COIN
}

private fun keyFor(item: HomeItem): String = when (item) {
    is HomeItem.MenuItem -> "menu_${item.type}"
    is HomeItem.PresetItem -> "preset_${item.preset.id}"
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    onOpenNumbers: () -> Unit,
    onOpenList: () -> Unit,
    onOpenListById: (Long) -> Unit,
    onOpenDice: () -> Unit,
    onOpenLot: () -> Unit,
    onOpenCoin: () -> Unit,
    onOpenSettings: () -> Unit,
    onOpenAbout: () -> Unit,
    onAddNumbersPreset: () -> Unit,
    onAddListPreset: () -> Unit, // РѕСЃС‚Р°РІР»РµРЅ РґР»СЏ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё
) {
    val scope = rememberCoroutineScope()
    val context = LocalContext.current
    val repo = remember { ListPresetRepository.fromContext(context) }

    var presets by remember { mutableStateOf<List<ListPreset>>(emptyList()) }
    var showCreateDialog by rememberSaveable { mutableStateOf(false) }
    var createName by rememberSaveable { mutableStateOf("") }
    var renameTarget by remember { mutableStateOf<ListPreset?>(null) }

    // РЎРѕСЃС‚РѕСЏРЅРёРµ РґР»СЏ СЌР»РµРјРµРЅС‚РѕРІ
    var items by remember { mutableStateOf<List<HomeItem>>(emptyList()) }

    // Р¤РѕСЂРјРёСЂСѓРµРј СЃРїРёСЃРѕРє (РјРµРЅСЋ + РїСЂРµСЃРµС‚С‹) РїСЂРё РёР·РјРµРЅРµРЅРёРё РїСЂРµСЃРµС‚РѕРІ
    LaunchedEffect(presets) {
        val menuItems = listOf(
            HomeItem.MenuItem(MenuItemType.NUMBERS),
            HomeItem.MenuItem(MenuItemType.LIST),
            HomeItem.MenuItem(MenuItemType.DICE),
            HomeItem.MenuItem(MenuItemType.LOT),
            HomeItem.MenuItem(MenuItemType.COIN)
        )
        val presetItems = presets.map { HomeItem.PresetItem(it) }
        items = menuItems + presetItems
    }

    // РџРµСЂРµСѓРїРѕСЂСЏРґРѕС‡РёРІР°РЅРёРµ
    fun moveItem(fromIndex: Int, toIndex: Int) {
        if (fromIndex == toIndex || fromIndex !in items.indices || toIndex !in items.indices) return
        val newItems = items.toMutableList()
        val moved = newItems.removeAt(fromIndex)
        newItems.add(toIndex, moved)
        items = newItems
    }

    // РџРѕРґРїРёСЃРєР° РЅР° Р‘Р”
    LaunchedEffect(Unit) {
        repo.observeAll().collectLatest { list -> presets = list }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        stringResource(R.string.random),
                        style = MaterialTheme.typography.headlineSmall.copy(
                            fontWeight = FontWeight.Bold
                        )
                    )
                },
                actions = {
                    IconButton(onClick = onOpenAbout) {
                        Icon(
                            painterResource(id = R.drawable.info_24px),
                            contentDescription = stringResource(R.string.about_app),
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }
                    IconButton(onClick = onOpenSettings) {
                        Icon(
                            painterResource(id = R.drawable.settings_24px),
                            contentDescription = stringResource(R.string.settings),
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars
    ) { inner ->
        val haptic = LocalHapticFeedback.current
        val lazyListState = rememberLazyListState()

        val reorderState = rememberReorderableLazyListState(lazyListState) { from, to ->
            moveItem(from.index, to.index)
            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)
        }

        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(16.dp, 0.dp),
            state = lazyListState,
            verticalArrangement = Arrangement.spacedBy(6.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            items(
                items = items,
                key = { item -> keyFor(item) }
            ) { item ->
                ReorderableItem(
                    state = reorderState,
                    key = keyFor(item)
                ) { isDragging ->
                    val elevation by animateDpAsState(
                        targetValue = if (isDragging) 4.dp else 0.dp,
                        label = "drag-elevation"
                    )

                    Box() {
                        val dragModifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 6.dp)
                            .longPressDraggableHandle(
                                onDragStarted = {
                                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                                },
                                onDragStopped = {
                                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                                }
                            )

                        when (item) {
                            is HomeItem.MenuItem -> {
                                val onAdd: (() -> Unit)? = when (item.type) {
                                    MenuItemType.NUMBERS -> null
                                    MenuItemType.LIST -> { { showCreateDialog = true } }
                                    else -> null
                                }

                                MenuCard(
                                    icon = when (item.type) {
                                        MenuItemType.NUMBERS -> painterResource(id = R.drawable.looks_one_24px)
                                        MenuItemType.LIST -> painterResource(id = R.drawable.list_alt_24px)
                                        MenuItemType.DICE -> painterResource(id = R.drawable.ifl_24px)
                                        MenuItemType.LOT -> painterResource(id = R.drawable.gavel_24px)
                                        MenuItemType.COIN -> painterResource(id = R.drawable.paid_24px)
                                    },
                                    title = when (item.type) {
                                        MenuItemType.NUMBERS -> stringResource(R.string.numbers)
                                        MenuItemType.LIST -> stringResource(R.string.list)
                                        MenuItemType.DICE -> stringResource(R.string.dice)
                                        MenuItemType.LOT -> stringResource(R.string.lot)
                                        MenuItemType.COIN -> stringResource(R.string.coin)
                                    },
                                    onClick = when (item.type) {
                                        MenuItemType.NUMBERS -> onOpenNumbers
                                        MenuItemType.LIST -> onOpenList
                                        MenuItemType.DICE -> onOpenDice
                                        MenuItemType.LOT -> onOpenLot
                                        MenuItemType.COIN -> onOpenCoin
                                    },
                                    onAddClick = onAdd,
                                    modifier = dragModifier
                                )
                            }

                            is HomeItem.PresetItem -> {
                                PresetCard(
                                    preset = item.preset,
                                    onPresetClick = { preset -> onOpenListById(preset.id) },
                                    onRenameClick = { preset -> renameTarget = preset },
                                    onDeleteClick = { preset -> scope.launch { repo.delete(preset) } },
                                    modifier = dragModifier
                                )
                            }
                        }
                    }
                }
            }
        }
    }

    CreateListDialog(
        showDialog = showCreateDialog,
        onDismiss = {
            showCreateDialog = false
            createName = ""
        },
        presetCount = presets.size,
        repository = repo,
        coroutineScope = scope,
        onPresetCreated = {
            showCreateDialog = false
            createName = ""
        }
    )

    RenameListDialog(
        preset = renameTarget,
        onDismiss = { renameTarget = null },
        repository = repo,
        coroutineScope = scope,
        onPresetRenamed = { renameTarget = null }
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/CreateListDialog.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import com.byteflipper.random.data.preset.ListPresetRepository

@Composable
fun CreateListDialog(
    showDialog: Boolean,
    onDismiss: () -> Unit,
    presetCount: Int,
    repository: ListPresetRepository,
    coroutineScope: CoroutineScope,
    onPresetCreated: () -> Unit
) {
    val context = LocalContext.current
    var createName by rememberSaveable { mutableStateOf("") }

    if (showDialog) {
        val nextNumber = presetCount + 1
        if (createName.isBlank()) createName = "${context.getString(R.string.new_list)} $nextNumber"

        AlertDialog(
            onDismissRequest = onDismiss,
            title = { Text(stringResource(R.string.new_list)) },
            text = {
                Column {
                    OutlinedTextField(
                        value = createName,
                        onValueChange = { createName = it },
                        singleLine = true,
                        label = { Text(stringResource(R.string.list_name)) },
                        modifier = Modifier.fillMaxWidth()
                    )
                    Spacer(Modifier.height(8.dp))
                }
            },
            confirmButton = {
                TextButton(onClick = {
                    val name = createName.trim().ifEmpty { "${context.getString(R.string.new_list)} $nextNumber" }
                    coroutineScope.launch {
                        repository.upsert(
                            ListPreset(
                                name = name,
                                items = listOf(context.getString(R.string.item_1), context.getString(R.string.item_2), context.getString(R.string.item_3))
                            )
                        )
                        onPresetCreated()
                    }
                }) { Text(stringResource(R.string.save)) }
            },
            dismissButton = {
                TextButton(onClick = onDismiss) { Text(stringResource(R.string.cancel)) }
            }
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/MenuCard.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.outlined.Add
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.FilledIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R

@Composable
fun MenuCard(
    icon: Painter,
    title: String,
    onClick: () -> Unit,
    onAddClick: (() -> Unit)? = null,
    modifier: Modifier = Modifier,
) {
    var isPressed by remember { mutableStateOf(false) }

    val cardElevation by animateFloatAsState(
        targetValue = if (isPressed) 1.dp.value else 6.dp.value,
        animationSpec = tween(200),
        label = "elevation"
    )

    val iconScale by animateFloatAsState(
        targetValue = if (isPressed) 0.9f else 1f,
        animationSpec = tween(150),
        label = "scale"
    )

    Card(
        onClick = {
            isPressed = true
            onClick()
            isPressed = false
        },
        modifier = modifier
            .fillMaxWidth()
            .height(88.dp),
        shape = RoundedCornerShape(24.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface,
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = cardElevation.dp
        ),
        border = CardDefaults.outlinedCardBorder()
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 20.dp, vertical = 16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Иконка в контейнере
            Surface(
                shape = RoundedCornerShape(16.dp),
                color = MaterialTheme.colorScheme.primaryContainer,
                modifier = Modifier.size(48.dp)
            ) {
                Box(
                    contentAlignment = Alignment.Center,
                    modifier = Modifier.fillMaxSize()
                ) {
                    Icon(
                        painter = icon,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier
                            .size(24.dp)
                            .scale(iconScale)
                    )
                }
            }

            // Title
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.SemiBold
                    ),
                    color = MaterialTheme.colorScheme.onSurface
                )
            }

            // Кнопки справа
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                onAddClick?.let {
                    FilledIconButton(
                        onClick = it,
                        colors = IconButtonDefaults.filledIconButtonColors(
                            containerColor = MaterialTheme.colorScheme.secondary,
                            contentColor = MaterialTheme.colorScheme.onSecondary
                        ),
                        modifier = Modifier.size(36.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Add,
                            contentDescription = stringResource(R.string.add),
                            modifier = Modifier.size(18.dp)
                        )
                    }
                }

                // Стрелка навигации
                Icon(
                    imageVector = Icons.AutoMirrored.Rounded.ArrowForwardIos,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.size(16.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun MenuCardPreview() {
    MaterialTheme {
        MenuCard(
            icon = painterResource(id = R.drawable.add_24px),
            title = stringResource(R.string.title),
            onClick = {},
            onAddClick = {},
            modifier = Modifier.padding(16.dp)
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetActionButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Edit
import androidx.compose.material.icons.outlined.Delete
import androidx.compose.material.icons.outlined.MoreVert
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetActionButton(
    preset: ListPreset,
    onRenameClick: (ListPreset) -> Unit,
    onDeleteClick: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    var expanded by remember { mutableStateOf(false) }

    DropdownMenu(
        expanded = expanded,
        onDismissRequest = { expanded = false }
    ) {
        DropdownMenuItem(
            text = { Text(stringResource(R.string.rename)) },
            leadingIcon = {
                Icon(
                    imageVector = Icons.Outlined.Edit,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary
                )
            },
            onClick = {
                expanded = false
                onRenameClick(preset)
            }
        )
        DropdownMenuItem(
            text = { Text(stringResource(R.string.delete)) },
            leadingIcon = {
                Icon(
                    imageVector = Icons.Outlined.Delete,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.error
                )
            },
            onClick = {
                expanded = false
                onDeleteClick(preset)
            }
        )
    }

    IconButton(
        onClick = { expanded = true },
        modifier = modifier.size(40.dp)
    ) {
        Icon(
            imageVector = Icons.Outlined.MoreVert,
            contentDescription = stringResource(R.string.preset_actions),
            tint = MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier.size(20.dp)
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetButton(
    preset: ListPreset,
    onPresetClick: (ListPreset) -> Unit,
    onRenameClick: (ListPreset) -> Unit,
    onDeleteClick: (ListPreset) -> Unit,
    onUsePreset: (ListPreset) -> Unit,
    onSharePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        PresetCard(
            preset = preset,
            onPresetClick = onPresetClick,
            onRenameClick = onRenameClick,
            onDeleteClick = onDeleteClick
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 18.dp),
            horizontalArrangement = Arrangement.End,
            verticalAlignment = Alignment.CenterVertically
        ) {
            PresetQuickActionButton(
                preset = preset,
                onUsePreset = onUsePreset,
                onSharePreset = onSharePreset
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetCard.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos
import androidx.compose.material.icons.outlined.FormatListBulleted
import androidx.compose.material.icons.rounded.Delete
import androidx.compose.material.icons.rounded.Edit
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.FilledIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetCard(
    preset: ListPreset,
    onPresetClick: (ListPreset) -> Unit,
    onRenameClick: (ListPreset) -> Unit,
    onDeleteClick: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    var isPressed by remember { mutableStateOf(false) }

    val cardElevation by animateFloatAsState(
        targetValue = if (isPressed) 1.dp.value else 6.dp.value,
        animationSpec = tween(200),
        label = "elevation"
    )

    val iconScale by animateFloatAsState(
        targetValue = if (isPressed) 0.9f else 1f,
        animationSpec = tween(150),
        label = "scale"
    )

    Card(
        onClick = {
            isPressed = true
            onPresetClick(preset)
            isPressed = false
        },
        modifier = modifier
            .fillMaxWidth()
            .height(88.dp),
        shape = RoundedCornerShape(24.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface,
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = cardElevation.dp
        ),
        border = CardDefaults.outlinedCardBorder()
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 20.dp, vertical = 16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Иконка в контейнере
            Surface(
                shape = RoundedCornerShape(16.dp),
                color = MaterialTheme.colorScheme.secondaryContainer,
                modifier = Modifier.size(48.dp)
            ) {
                Box(
                    contentAlignment = Alignment.Center,
                    modifier = Modifier.fillMaxSize()
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.list_alt_24px),
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onSecondaryContainer,
                        modifier = Modifier
                            .size(24.dp)
                            .scale(iconScale)
                    )
                }
            }

            // Название и информация о пресете
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = preset.name,
                    style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.SemiBold
                    ),
                    color = MaterialTheme.colorScheme.onSurface
                )

                // Можно добавить дополнительную информацию о пресете
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = stringResource(R.string.list),
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            // Кнопки действий
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Кнопка редактирования
                FilledIconButton(
                    onClick = { onRenameClick(preset) },
                    colors = IconButtonDefaults.filledIconButtonColors(
                        containerColor = MaterialTheme.colorScheme.primary,
                        contentColor = MaterialTheme.colorScheme.onPrimary
                    ),
                    modifier = Modifier.size(36.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.edit_24px),
                        contentDescription = stringResource(R.string.edit),
                        modifier = Modifier.size(18.dp)
                    )
                }

                // Кнопка удаления
                FilledIconButton(
                    onClick = { onDeleteClick(preset) },
                    colors = IconButtonDefaults.filledIconButtonColors(
                        containerColor = MaterialTheme.colorScheme.error,
                        contentColor = MaterialTheme.colorScheme.onError
                    ),
                    modifier = Modifier.size(36.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.delete_24px),
                        contentDescription = stringResource(R.string.delete),
                        modifier = Modifier.size(18.dp)
                    )
                }

                // Стрелка навигации
                Icon(
                    imageVector = Icons.AutoMirrored.Rounded.ArrowForwardIos,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.size(16.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PresetCardPreview() {
    MaterialTheme {
        val samplePreset = ListPreset(
            id = 1L,
            name = stringResource(R.string.my_list),
            items = listOf(stringResource(R.string.item_1), stringResource(R.string.item_2), stringResource(R.string.item_3))
        )

        PresetCard(
            preset = samplePreset,
            onPresetClick = {},
            onRenameClick = {},
            onDeleteClick = {},
            modifier = Modifier.padding(16.dp)
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetList.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.byteflipper.random.data.preset.ListPreset
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import com.byteflipper.random.data.preset.ListPresetRepository

@Composable
fun PresetList(
    presets: List<ListPreset>,
    onPresetClick: (ListPreset) -> Unit,
    onRenamePreset: (ListPreset) -> Unit,
    onDeletePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    LazyColumn(modifier = modifier.fillMaxWidth()) {
        items(presets, key = { it.id }) { preset ->
            PresetCard(
                preset = preset,
                onPresetClick = onPresetClick,
                onRenameClick = onRenamePreset,
                onDeleteClick = onDeletePreset
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetQuickActionButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.PlayArrow
import androidx.compose.material.icons.outlined.Share
import androidx.compose.material3.FilledTonalIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetQuickActionButton(
    preset: ListPreset,
    onUsePreset: (ListPreset) -> Unit,
    onSharePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    Row(modifier = modifier) {
        FilledTonalIconButton(
            onClick = { onUsePreset(preset) },
            modifier = Modifier.size(36.dp)
        ) {
            Icon(
                imageVector = Icons.Outlined.PlayArrow,
                contentDescription = stringResource(R.string.use_preset),
                modifier = Modifier.size(18.dp)
            )
        }

        FilledTonalIconButton(
            onClick = { onSharePreset(preset) },
            modifier = Modifier.size(36.dp)
        ) {
            Icon(
                imageVector = Icons.Outlined.Share,
                contentDescription = stringResource(R.string.share_preset),
                modifier = Modifier.size(18.dp)
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/RenameListDialog.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import com.byteflipper.random.data.preset.ListPresetRepository

@Composable
fun RenameListDialog(
    preset: ListPreset?,
    onDismiss: () -> Unit,
    repository: ListPresetRepository,
    coroutineScope: CoroutineScope,
    onPresetRenamed: () -> Unit
) {
    var renameName by rememberSaveable { mutableStateOf(preset?.name ?: "") }

    if (preset != null) {
        AlertDialog(
            onDismissRequest = onDismiss,
            title = { Text(stringResource(R.string.rename_list)) },
            text = {
                OutlinedTextField(
                    value = renameName,
                    onValueChange = { renameName = it },
                    singleLine = true,
                    label = { Text(stringResource(R.string.new_name)) },
                    modifier = Modifier.fillMaxWidth()
                )
            },
            confirmButton = {
                TextButton(onClick = {
                    val newName = renameName.trim()
                    if (newName.isNotEmpty()) {
                        coroutineScope.launch {
                            repository.upsert(preset.copy(name = newName))
                            onPresetRenamed()
                        }
                    }
                }) { Text(stringResource(R.string.save)) }
            },
            dismissButton = {
                TextButton(onClick = onDismiss) { Text(stringResource(R.string.cancel)) }
            }
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListScreen.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Checkbox
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.SnackbarResult
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetRepository
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.ui.components.EditorList
import com.byteflipper.random.ui.components.FlipCardControls
import com.byteflipper.random.ui.components.FlipCardOverlay
import com.byteflipper.random.ui.components.GeneratorConfigDialog
import com.byteflipper.random.ui.components.SizedFab
import com.byteflipper.random.ui.components.rememberFlipCardState
import com.byteflipper.random.ui.theme.getRainbowColors
import kotlinx.coroutines.launch
import kotlin.math.min

// Функция для получения контрастного цвета текста на основе цвета фона
private fun getContrastColor(backgroundColor: Color): Color {
    // Вычисляем яркость цвета фона (формула luminance)
    val luminance = backgroundColor.luminance()

    // Если фон светлый (luminance > 0.5), используем черный текст
    // Если фон темный (luminance <= 0.5), используем белый текст
    return if (luminance > 0.5f) {
        Color.Black
    } else {
        Color.White
    }
}

private fun Set<String>.indicesOf(baseSize: Int): Set<Int> {
    // Just a bounded placeholder set for the dialog. We don't need exact numbers UI for lists.
    return if (this.isEmpty()) emptySet() else (0 until min(this.size, baseSize)).toSet()
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ListScreen(onBack: () -> Unit, presetId: Long? = null, onOpenListById: (Long) -> Unit = {}) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val context = androidx.compose.ui.platform.LocalContext.current
    val repo = remember { ListPresetRepository.fromContext(context) }

    // Получение строк из ресурсов
    val listString = stringResource(R.string.list)
    val item1String = stringResource(R.string.item_1)
    val item2String = stringResource(R.string.item_2)
    val item3String = stringResource(R.string.item_3)

    // UI state
    var selectedPreset by remember { mutableStateOf<ListPreset?>(null) }
    var presets by remember { mutableStateOf<List<ListPreset>>(emptyList()) }
    var showConfigDialog by rememberSaveable { mutableStateOf(false) }
    var useDelay by rememberSaveable { mutableStateOf(true) }
    var delayText by rememberSaveable { mutableStateOf("3000") }
    var countText by rememberSaveable { mutableStateOf("1") }
    var allowRepetitions by rememberSaveable { mutableStateOf(true) }

    // Editor state
    val editorItems = remember { mutableStateListOf<String>() }
    var newItem by rememberSaveable { mutableStateOf("") }
    var showRenameDialog by rememberSaveable { mutableStateOf(false) }
    var renameName by rememberSaveable { mutableStateOf("") }
    var defaultName by rememberSaveable { mutableStateOf(listString) }
    var showSaveDialog by rememberSaveable { mutableStateOf(false) }
    var saveName by rememberSaveable { mutableStateOf("") }
    var openAfterSave by rememberSaveable { mutableStateOf(true) }
    var usedItems by remember { mutableStateOf<Set<String>>(emptySet()) }



    var results by rememberSaveable { mutableStateOf<List<String>>(emptyList()) }

    // FAB geometry
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }

    // Flip card
    val flipState = rememberFlipCardState()
    val flipCtrl = FlipCardControls(flipState)

    // Load default or specific preset by id, and prepare editor state
    LaunchedEffect(presetId) {
        if (presetId == null) {
            // Load from SharedPreferences and keep changes local (not repository)
            val sp = context.getSharedPreferences("random_prefs", android.content.Context.MODE_PRIVATE)
            defaultName = sp.getString("default_list_name", null) ?: listString
            val raw = sp.getString("default_list_items", null)
            val items = if (raw == null) listOf(item1String, item2String, item3String) else raw.split('\u0001')
            editorItems.clear(); editorItems.addAll(items)
            if (editorItems.isEmpty()) editorItems.add("")
        } else {
            repo.getById(presetId)?.let { p ->
                selectedPreset = p
                presets = listOf(p)
                editorItems.clear(); editorItems.addAll(p.items)
                if (editorItems.isEmpty()) editorItems.add("")
            }
        }
    }

    fun saveCurrent() {
        if (presetId == null) {
            // Persist to SharedPreferences only
            val sp = context.getSharedPreferences("random_prefs", android.content.Context.MODE_PRIVATE)
            val joined = editorItems.map { it.trim() }.filter { it.isNotEmpty() }.joinToString("\u0001")
            sp.edit().putString("default_list_items", joined).apply()
        } else {
            val current = selectedPreset ?: return
            val updated = current.copy(
                items = editorItems.map { it.trim() }.filter { it.isNotEmpty() }
            )
            selectedPreset = updated
            scope.launch { repo.upsert(updated) }
        }
    }

    fun generate(): List<String> {
        val base: List<String> = if (presetId == null) {
            editorItems.map { it.trim() }.filter { it.isNotEmpty() }
        } else {
            val p = selectedPreset ?: return emptyList()
            p.items.map { it.trim() }.filter { it.isNotEmpty() }
        }
        val n = countText.toIntOrNull()?.coerceAtLeast(1) ?: 1
        return if (allowRepetitions) {
            if (base.isEmpty()) emptyList() else List(n) { base.random() }
        } else {
            val pool = base.map { it.trim() }.filter { it.isNotEmpty() && it !in usedItems }.distinct()
            if (pool.isEmpty()) emptyList() else pool.shuffled().take(min(n, pool.size))
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(if (presetId == null) defaultName else (selectedPreset?.name ?: listString)) },
                navigationIcon = { IconButton(onClick = onBack) { Icon(Icons.Outlined.ArrowBack, contentDescription = null) } },
                actions = {
                    if (presetId == null) {
                        IconButton(onClick = {
                            saveName = defaultName
                            showSaveDialog = true
                        }) { Icon(painterResource(R.drawable.save_24px), contentDescription = stringResource(R.string.save_settings)) }
                    } else {
                        IconButton(onClick = {
                            renameName = selectedPreset?.name ?: ""
                            showRenameDialog = true
                        }) { Icon(painterResource(R.drawable.edit_24px), contentDescription = stringResource(R.string.rename)) }
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = {
            Column(
                horizontalAlignment = Alignment.End,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                SmallFloatingActionButton(
                    onClick = { showConfigDialog = true },
                    containerColor = MaterialTheme.colorScheme.secondaryContainer,
                    contentColor = MaterialTheme.colorScheme.onSecondaryContainer
                ) { Icon(painterResource(R.drawable.settings_24px), contentDescription = null) }

                Box(modifier = Modifier.onGloballyPositioned { c ->
                    fabSize = c.size
                    val pos = c.positionInRoot()
                    fabCenterInRoot = Offset(pos.x + fabSize.width / 2f, pos.y + fabSize.height / 2f)
                }) {
                    val settingsRepo = remember { SettingsRepository.fromContext(context) }
                    val settings: Settings by settingsRepo.settingsFlow.collectAsState(initial = Settings())
                    SizedFab(
                        size = settings.fabSize,
                        onClick = {
                        val base = if (presetId == null) {
                            editorItems.map { it.trim() }.filter { it.isNotEmpty() }
                        } else {
                            selectedPreset?.items?.map { it.trim() }?.filter { it.isNotEmpty() } ?: emptyList()
                        }
                        if (base.isEmpty()) {
                            scope.launch { snackbarHostState.showSnackbar(context.getString(R.string.list_empty)) }
                            return@SizedFab
                        }
                        if (!allowRepetitions) {
                            val pool = base.map { it.trim() }.filter { it.isNotEmpty() && it !in usedItems }.distinct()
                            if (pool.isEmpty()) {
                                scope.launch {
                                    val res = snackbarHostState.showSnackbar(
                                        message = context.getString(R.string.all_options_used),
                                        actionLabel = context.getString(R.string.reset)
                                    )
                                    if (res == SnackbarResult.ActionPerformed) {
                                        usedItems = emptySet()
                                    }
                                }
                                return@SizedFab
                            }
                        }
                        val ms = if (useDelay) delayText.toIntOrNull() ?: 3000 else 1000
                        if (!flipCtrl.isVisible()) flipCtrl.open()
                        flipCtrl.spinAndReveal(
                            effectiveDelayMs = ms,
                            onReveal = { isFront ->
                                val out = generate()
                                results = out
                                if (!allowRepetitions) {
                                    val toAdd = out.map { it.trim() }.filter { it.isNotEmpty() }
                                    if (toAdd.isNotEmpty()) usedItems = usedItems + toAdd
                                }
                            }
                        )
                    },
                        containerColor = MaterialTheme.colorScheme.primaryContainer,
                        contentColor = MaterialTheme.colorScheme.onPrimaryContainer
                    ) { Icon(painterResource(R.drawable.autorenew_24px), contentDescription = null) }
                }
            }
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { inner ->
        Box(modifier = Modifier.fillMaxSize().padding(inner)) {
            val blur = (8f * flipCtrl.scrimProgress.value).dp
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur(blur),
                verticalArrangement = Arrangement.Top
            ) {
                if (presetId == null || selectedPreset != null) {
                    EditorList(
                        items = editorItems,
                        onItemsChange = { saveCurrent() },
                        modifier = Modifier.fillMaxWidth().weight(1f, fill = false),
                        minItems = 1
                    )
                } else {
                    Text(stringResource(R.string.loading), style = MaterialTheme.typography.bodyMedium)
                }
            }

            // Получить цвета радуги и выбрать случайный для карточки
            val rainbowColors = getRainbowColors()
            val cardColor = remember(results) { rainbowColors.random() }

            // Адаптивный размер карточки для списков
            val listCardSize = 320.dp

            // Flip overlay
            FlipCardOverlay(
                state = flipState,
                anchorInRoot = fabCenterInRoot,
                onClosed = { results = emptyList() },
                // Используем один и тот же цвет для обеих сторон карточки
                frontContainerColor = cardColor,
                backContainerColor = cardColor,
                cardSize = listCardSize,
                frontContent = {
                    if (results.isNotEmpty()) {
                        // Адаптивные отступы и размеры - увеличены для лучшей видимости
                        val adaptivePadding = (listCardSize.value * 0.04f).coerceIn(12f, 28f).dp
                        val adaptiveSpacing = (listCardSize.value * 0.03f).coerceIn(6f, 16f).dp
                        val titleFontSize = (listCardSize.value * 0.045f).coerceIn(18f, 32f).sp
                        val itemFontSize = (listCardSize.value * 0.035f).coerceIn(20f, 36f).sp

                        Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(adaptivePadding)) {
                            // Адаптируем цвет текста под цвет фона карточки
                            val titleTextColor = getContrastColor(cardColor).copy(alpha = 0.8f)
                            val itemTextColor = getContrastColor(cardColor)
                            Text(stringResource(R.string.results), style = MaterialTheme.typography.labelMedium.copy(fontSize = titleFontSize), color = titleTextColor)
                            Spacer(Modifier.height(adaptiveSpacing))
                            results.forEach { s ->
                                Text(s, style = MaterialTheme.typography.titleMedium.copy(fontSize = itemFontSize), color = itemTextColor)
                            }
                        }
                    }
                },
                backContent = {
                    if (results.isNotEmpty()) {
                        // Адаптивные отступы и размеры - увеличены для лучшей видимости
                        val adaptivePadding = (listCardSize.value * 0.04f).coerceIn(12f, 28f).dp
                        val adaptiveSpacing = (listCardSize.value * 0.03f).coerceIn(6f, 16f).dp
                        val titleFontSize = (listCardSize.value * 0.045f).coerceIn(18f, 32f).sp
                        val itemFontSize = (listCardSize.value * 0.035f).coerceIn(20f, 36f).sp

                        Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(adaptivePadding)) {
                            // Адаптируем цвет текста под цвет фона карточки
                            val titleTextColor = getContrastColor(cardColor).copy(alpha = 0.8f)
                            val itemTextColor = getContrastColor(cardColor)
                            Text(stringResource(R.string.results), style = MaterialTheme.typography.labelMedium.copy(fontSize = titleFontSize), color = titleTextColor)
                            Spacer(Modifier.height(adaptiveSpacing))
                            results.forEach { s ->
                                Text(s, style = MaterialTheme.typography.titleMedium.copy(fontSize = itemFontSize), color = itemTextColor)
                            }
                        }
                    }
                }
            )

            // Config dialog (reuse)
            GeneratorConfigDialog(
                visible = showConfigDialog,
                onDismissRequest = { showConfigDialog = false },
                countText = countText,
                onCountChange = { countText = it },
                allowRepetitions = allowRepetitions,
                onAllowRepetitionsChange = { allowRepetitions = it },
                usedNumbers = usedItems.indicesOf(baseSize = 1_000_000),
                availableRange = null,
                onResetUsedNumbers = { usedItems = emptySet() },
                useDelay = useDelay,
                onUseDelayChange = { useDelay = it },
                delayText = delayText,
                onDelayChange = { delayText = it }
            )

            // Rename dialog (only for saved presets)
            if (showRenameDialog && presetId != null) {
                AlertDialog(
                    onDismissRequest = { showRenameDialog = false },
                    title = { Text(stringResource(R.string.rename_list)) },
                    text = {
                        OutlinedTextField(
                            value = renameName,
                            onValueChange = { renameName = it },
                            singleLine = true,
                            label = { Text(stringResource(R.string.new_name)) },
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    confirmButton = {
                        TextButton(onClick = {
                            val newName = renameName.trim()
                            if (newName.isNotEmpty()) {
                                val current = selectedPreset
                                if (current != null) {
                                    val updated = current.copy(name = newName)
                                    selectedPreset = updated
                                    scope.launch { repo.upsert(updated) }
                                    showRenameDialog = false
                                }
                            }
                        }) { Text(stringResource(R.string.save)) }
                    },
                    dismissButton = {
                        TextButton(onClick = { showRenameDialog = false }) { Text(stringResource(R.string.cancel)) }
                    }
                )
            }

            // Save as new preset dialog (for default screen)
            if (showSaveDialog) {
                AlertDialog(
                    onDismissRequest = { showSaveDialog = false },
                    title = { Text(stringResource(R.string.save_settings)) },
                    text = {
                        Column {
                            OutlinedTextField(
                                value = saveName,
                                onValueChange = { saveName = it },
                                singleLine = true,
                                label = { Text(stringResource(R.string.list_name)) },
                                modifier = Modifier.fillMaxWidth()
                            )
                            Spacer(Modifier.height(8.dp))
                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Checkbox(checked = openAfterSave, onCheckedChange = { openAfterSave = it })
                                Text(stringResource(R.string.open_after_save), modifier = Modifier.padding(start = 8.dp))
                            }
                        }
                    },
                    confirmButton = {
                        TextButton(onClick = {
                            val name = saveName.trim()
                            val items = editorItems.map { it.trim() }.filter { it.isNotEmpty() }
                            if (name.isNotEmpty() && items.isNotEmpty()) {
                                scope.launch {
                                    val newId = repo.upsert(ListPreset(name = name, items = items))
                                    if (openAfterSave) onOpenListById(newId)
                                }
                                showSaveDialog = false
                            }
                        }) { Text(stringResource(R.string.save)) }
                    },
                    dismissButton = {
                        TextButton(onClick = { showSaveDialog = false }) { Text(stringResource(R.string.cancel)) }
                    }
                )
            }
        }
    }


}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotScreen.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.activity.compose.BackHandler
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material.icons.outlined.Autorenew
import androidx.compose.material.icons.outlined.Check
import androidx.compose.material.icons.outlined.Close
import androidx.compose.material.icons.outlined.Vibration
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.launch
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.ui.components.SizedFab
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R
import kotlin.math.min
import kotlin.math.sqrt
import kotlin.math.roundToInt
import kotlin.random.Random
import com.byteflipper.random.ui.theme.getRainbowColors
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.Dp

private enum class FabMode { Randomize, RevealAll }

data class LotCard(val id: Int, val isMarked: Boolean, val isRevealed: Boolean, val color: Color)

private fun computeRowSizes(total: Int): List<Int> {
    if (total <= 0) return emptyList()
    val maxPerRow = 5
    if (total <= 3) return listOf(total)
    if (total == 4) return listOf(2, 2)
    if (total == 5) return listOf(3, 2)

    val minRows = (total + maxPerRow - 1) / maxPerRow
    val desiredRows = if (total in 10..15) 3 else sqrt(total.toDouble()).roundToInt().coerceAtLeast(2)
    var rowsCount = maxOf(minRows, desiredRows)

    fun distributeCenter(rowsCount: Int): List<Int> {
        val base = total / rowsCount
        var extra = total % rowsCount
        val rows = MutableList(rowsCount) { base }
        // РџРѕСЂСЏРґРѕРє СЂР°СЃРїСЂРµРґРµР»РµРЅРёСЏ Р»РёС€РЅРёС… СЌР»РµРјРµРЅС‚РѕРІ вЂ” РѕС‚ С†РµРЅС‚СЂР° Рє РєСЂР°СЏРј
        val order = buildList {
            if (rowsCount % 2 == 1) {
                val mid = rowsCount / 2
                add(mid)
                for (d in 1..mid) {
                    add(mid - d)
                    add(mid + d)
                }
            } else {
                val leftMid = rowsCount / 2 - 1
                val rightMid = rowsCount / 2
                add(leftMid)
                add(rightMid)
                for (d in 1..leftMid) {
                    add(leftMid - d)
                    add(rightMid + d)
                }
            }
        }
        var guard = 0
        while (extra > 0 && guard < order.size * 2) {
            for (idx in order) {
                if (extra == 0) break
                if (rows[idx] < maxPerRow) {
                    rows[idx] += 1
                    extra -= 1
                }
            }
            guard += 1
        }
        return rows
    }

    // РџРѕРґР±РёСЂР°РµРј РєРѕР»РёС‡РµСЃС‚РІРѕ СЂСЏРґРѕРІ С‚Р°Рє, С‡С‚РѕР±С‹ РЅРµ Р±С‹Р»Рѕ СЂСЏРґРѕРІ >5 РїРѕСЃР»Рµ СЂР°СЃРїСЂРµРґРµР»РµРЅРёСЏ
    while (true) {
        val rows = distributeCenter(rowsCount)
        if (rows.all { it <= maxPerRow }) return rows
        rowsCount += 1
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LotScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val haptics = LocalHapticFeedback.current
    var hapticsEnabled by rememberSaveable { mutableStateOf(true) }
    val context = LocalContext.current
    val settingsRepo = remember { SettingsRepository.fromContext(context) }
    val settings: Settings by settingsRepo.settingsFlow.collectAsState(initial = Settings())

    // РџРѕР»СѓС‡РµРЅРёРµ СЃС‚СЂРѕРє РёР· СЂРµСЃСѓСЂСЃРѕРІ
    val minimum3Fields = stringResource(R.string.minimum_3_fields)
    val minimum1Marked = stringResource(R.string.minimum_1_marked)
    val markedMoreThanTotal = stringResource(R.string.marked_more_than_total)

    // РџРѕР»СЏ РІРІРѕРґР°
    var totalText by rememberSaveable { mutableStateOf("10") }
    var markedText by rememberSaveable { mutableStateOf("3") }

    // РЎРѕСЃС‚РѕСЏРЅРёРµ СЃРµС‚РєРё РєР°СЂС‚РѕС‡РµРє
    var cards by remember { mutableStateOf<List<LotCard>>(emptyList()) }

    // РЎРѕСЃС‚РѕСЏРЅРёСЏ РґР»СЏ FAB СЂРµР¶РёРјР°
    var fabMode by rememberSaveable { mutableStateOf(FabMode.Randomize) }

    // РђРЅРёРјР°С†РёСЏ СЃРєСЂРёРјР° РїРѕРІРµСЂС… РєРѕРЅС‚РµРЅС‚Р°
    val scrimAlpha = remember { Animatable(0f) }

    // РџРѕР»СѓС‡РёС‚СЊ С†РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ С‚РµРєСѓС‰РµР№ С‚РµРјС‹
    val rainbowColors = getRainbowColors()

    fun parseIntSafe(text: String, minValue: Int, maxValue: Int): Int? {
        val v = text.trim().toIntOrNull() ?: return null
        return v.coerceIn(minValue, maxValue)
    }

    fun generateCards(availableColors: List<androidx.compose.ui.graphics.Color>) {
        val total = parseIntSafe(totalText, 1, 500) ?: 0
        val marked = parseIntSafe(markedText, 0, total) ?: 0
        if (total < 3) {
            scope.launch { snackbarHostState.showSnackbar(minimum3Fields) }
            return
        }
        if (marked < 1) {
            scope.launch { snackbarHostState.showSnackbar(minimum1Marked) }
            return
        }
        if (marked > total) {
            scope.launch { snackbarHostState.showSnackbar(markedMoreThanTotal) }
            return
        }
        // РЎС„РѕСЂРјРёСЂРѕРІР°С‚СЊ СЃРїРёСЃРѕРє РѕС‚РјРµС‡РµРЅРЅС‹С… РёРЅРґРµРєСЃРѕРІ
        val indices = (0 until total).toMutableList()
        indices.shuffle()
        val markedSet = indices.take(marked).toSet()

        // РЎРѕР·РґР°С‚СЊ СЃРїРёСЃРѕРє С†РІРµС‚РѕРІ СЃ СѓРјРЅС‹Рј СЂР°СЃРїСЂРµРґРµР»РµРЅРёРµРј, РёР·Р±РµРіР°СЏ РїРѕРІС‚РѕСЂРµРЅРёР№ СЂСЏРґРѕРј
        val rows = computeRowSizes(total)
        val colors = distributeColorsSmartly(total, availableColors, rows)

        cards = List(total) { i -> LotCard(id = i, isMarked = i in markedSet, isRevealed = false, color = colors[i]) }
        fabMode = FabMode.RevealAll
        scope.launch { scrimAlpha.animateTo(1f, tween(250)) }
    }

    fun revealCard(id: Int) {
        val pos = cards.indexOfFirst { it.id == id }
        if (pos == -1) return
        if (cards[pos].isRevealed) return
        val wasMarked = cards[pos].isMarked
        cards = cards.toMutableList().also { it[pos] = it[pos].copy(isRevealed = true) }
        if (wasMarked && hapticsEnabled) {
            haptics.performHapticFeedback(HapticFeedbackType.LongPress)
        }
        // Р•СЃР»Рё РІСЃРµ РѕС‚РјРµС‡РµРЅРЅС‹Рµ РѕС‚РєСЂС‹С‚С‹ вЂ” Р°РІС‚РѕРјР°С‚РёС‡РµСЃРєРё СЂР°СЃРєСЂС‹С‚СЊ РѕСЃС‚Р°Р»СЊРЅС‹Рµ Рё РїРµСЂРµРєР»СЋС‡РёС‚СЊ FAB РЅР° СЂР°РЅРґРѕРј
        val totalMarked = cards.count { it.isMarked }
        val openedMarked = cards.count { it.isMarked && it.isRevealed }
        if (totalMarked > 0 && openedMarked >= totalMarked) {
            // Р Р°СЃРєСЂС‹С‚СЊ РІСЃРµ РЅРµРѕС‚РјРµС‡РµРЅРЅС‹Рµ
            cards = cards.map { c -> if (!c.isMarked) c.copy(isRevealed = true) else c }
            fabMode = FabMode.Randomize
        }
    }

    fun revealAll() {
        cards = cards.map { it.copy(isRevealed = true) }
        // РџРѕСЃР»Рµ РїРѕР»РЅРѕРіРѕ СЂР°СЃРєСЂС‹С‚РёСЏ РјРµРЅСЏРµРј РёРєРѕРЅРєСѓ РЅР° Randomize
        fabMode = FabMode.Randomize
    }

    fun reshuffleAndHide() {
        // РџРµСЂРµС‚Р°СЃРѕРІР°С‚СЊ РїРѕСЂСЏРґРѕРє РєР°СЂС‚РѕС‡РµРє Рё Р·Р°РєСЂС‹С‚СЊ РёС…, СЃРѕС…СЂР°РЅСЏСЏ С†РІРµС‚Р°
        val shuffled = cards.shuffled(Random)
        val hasMarked = shuffled.any { it.isMarked }
        cards = shuffled.map { it.copy(isRevealed = false) }
        fabMode = if (hasMarked) FabMode.RevealAll else FabMode.Randomize
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.lot_title)) },
                navigationIcon = { IconButton(onClick = onBack) { Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back)) } },
                actions = {
                    IconButton(onClick = { hapticsEnabled = !hapticsEnabled }) {
                        val icon = if (hapticsEnabled) painterResource(id = R.drawable.mobile_vibrate_24px) else painterResource(id = R.drawable.mobile_vibrate_off_24px)
                        Icon(icon, contentDescription = if (hapticsEnabled) stringResource(R.string.vibration_on) else stringResource(R.string.vibration_off))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = {
            SizedFab(
                size = settings.fabSize,
                onClick = {
                    if (cards.isEmpty()) {
                        generateCards(rainbowColors)
                    } else {
                        when (fabMode) {
                            FabMode.RevealAll -> revealAll()
                            FabMode.Randomize -> reshuffleAndHide()
                        }
                    }
                },
                containerColor = MaterialTheme.colorScheme.primaryContainer,
                contentColor = MaterialTheme.colorScheme.onPrimaryContainer
            ) {
                when (fabMode) {
                    FabMode.RevealAll -> Icon(painterResource(R.drawable.check_24px), contentDescription = stringResource(R.string.show_all))
                    FabMode.Randomize -> Icon(painterResource(R.drawable.autorenew_24px), contentDescription = stringResource(R.string.reshuffle))
                }
            }
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { inner ->
        Box(modifier = Modifier.fillMaxSize().padding(inner)) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur((8f * scrimAlpha.value).dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(48.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(stringResource(R.string.total_fields_label), style = MaterialTheme.typography.labelLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)
                        Spacer(Modifier.height(48.dp))
                        BasicTextField(
                            value = totalText,
                            onValueChange = { new -> totalText = new.filter { ch -> ch.isDigit() } },
                            modifier = Modifier.fillMaxWidth(),
                            singleLine = true,
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            textStyle = MaterialTheme.typography.displayLarge.copy(
                                textAlign = TextAlign.Center,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary,
                                fontSize = 64.sp
                            )
                        )
                    }
                    Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
                        Text(stringResource(R.string.marked_fields_label), style = MaterialTheme.typography.labelLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)
                        Spacer(Modifier.height(48.dp))
                        BasicTextField(
                            value = markedText,
                            onValueChange = { new ->
                                val filtered = new.filter { ch -> ch.isDigit() }
                                val t = filtered.toIntOrNull()
                                val total = totalText.toIntOrNull()
                                markedText = if (t != null && total != null) maxOf(1, min(t, total)).toString() else filtered
                            },
                            modifier = Modifier.fillMaxWidth(),
                            singleLine = true,
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            textStyle = MaterialTheme.typography.displayLarge.copy(
                                textAlign = TextAlign.Center,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary,
                                fontSize = 64.sp
                            )
                        )
                    }
                }
            }

            // РћРІРµСЂР»РµР№: СЃРєСЂРёРј + СЃРµС‚РєР° РєР°СЂС‚РѕС‡РµРє РїРѕРІРµСЂС…
            if (cards.isNotEmpty()) {
                // Back РґР»СЏ Р·Р°РєСЂС‹С‚РёСЏ
                BackHandler { 
                    scope.launch { scrimAlpha.animateTo(0f, tween(200)) }
                    cards = emptyList()
                    fabMode = FabMode.Randomize
                }

                // РЎРєСЂРёРј
                Box(
                    modifier = Modifier
                        .matchParentSize()
                        .background(Color.Black.copy(alpha = 0.45f * scrimAlpha.value))
                        .clickable(interactionSource = remember { MutableInteractionSource() }, indication = null) {
                            scope.launch { scrimAlpha.animateTo(0f, tween(200)) }
                            cards = emptyList()
                            fabMode = FabMode.Randomize
                        }
                )

                // РЎРµС‚РєР° РєР°СЂС‚РѕС‡РµРє (РґРёРЅР°РјРёС‡РЅС‹Р№ СЂР°Р·РјРµСЂ Рё С†РµРЅС‚СЂРёСЂРѕРІР°РЅРёРµ)
                androidx.compose.foundation.layout.BoxWithConstraints(
                    modifier = Modifier
                        .matchParentSize()
                        .padding(16.dp)
                ) {
                    val spacing = 8.dp
                    val rows = computeRowSizes(cards.size)
                    val maxInRow = rows.maxOrNull() ?: 1
                    // Р•РґРёРЅС‹Р№ СЂР°Р·РјРµСЂ РєР°СЂС‚РѕС‡РєРё РїРѕ С€РёСЂРёРЅРµ/РІС‹СЃРѕС‚Рµ, С‡С‚РѕР±С‹ РІСЃС‘ РїРѕРјРµСЃС‚РёР»РѕСЃСЊ Рё Р±С‹Р»Рѕ РєСЂСѓРїРЅРµРµ РїСЂРё РјР°Р»РѕРј РєРѕР»РёС‡РµСЃС‚РІРµ
                    val widthCandidate = (maxWidth - spacing * (maxInRow - 1)) / maxInRow
                    val heightCandidate = (maxHeight - spacing * (rows.size - 1)) / rows.size
                    val cardSize = kotlin.math.min(widthCandidate.value, heightCandidate.value).dp
                        .coerceIn(40.dp, 180.dp)

                    Column(
                        modifier = Modifier.matchParentSize(),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        var idx = 0
                        rows.forEach { countInRow ->
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(
                                    space = spacing,
                                    alignment = Alignment.CenterHorizontally
                                ),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                repeat(countInRow) {
                                    val card = cards[idx]
                                    LotGridCard(
                                        modifier = Modifier.size(cardSize),
                                        isRevealed = card.isRevealed,
                                        isMarked = card.isMarked,
                                        cardColor = card.color,
                                        cardSize = cardSize,
                                        onClick = { revealCard(card.id) }
                                    )
                                    idx++
                                }
                            }
                            Spacer(Modifier.height(spacing))
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun LotGridCard(modifier: Modifier = Modifier, isRevealed: Boolean, isMarked: Boolean, cardColor: Color, cardSize: Dp, onClick: () -> Unit) {
    val rotation = remember { Animatable(0f) }
    val target = if (isRevealed) 180f else 0f
    LaunchedEffect(target) { rotation.animateTo(target, tween(250)) }

    val showFront = ((rotation.value % 360f) + 360f) % 360f <= 90f || ((rotation.value % 360f) + 360f) % 360f >= 270f
    Box(
        modifier = modifier
            .graphicsLayer {
                rotationY = rotation.value
                cameraDistance = 24f * density
            }
            .clip(RoundedCornerShape(10.dp))
            .background(
                when {
                    !isRevealed -> cardColor
                    isMarked -> MaterialTheme.colorScheme.secondaryContainer
                    else -> Color.White
                }
            )
            .clickable(interactionSource = remember { MutableInteractionSource() }, indication = null) { onClick() }
            .padding(vertical = (cardSize.value * 0.08f).coerceIn(12f, 32f).dp),
        contentAlignment = Alignment.Center
    ) {
        if (!isRevealed) {
            // РђРґР°РїС‚РёСЂСѓРµРј С†РІРµС‚ С‚РµРєСЃС‚Р° РїРѕРґ С†РІРµС‚ С„РѕРЅР° РґР»СЏ Р»СѓС‡С€РµР№ С‡РёС‚Р°РµРјРѕСЃС‚Рё
            val textColor = getContrastColor(cardColor)
            // Р Р°Р·РјРµСЂ С€СЂРёС„С‚Р° Р°РґР°РїС‚РёСЂСѓРµС‚СЃСЏ РїРѕРґ СЂР°Р·РјРµСЂ РєР°СЂС‚РѕС‡РєРё (СѓРІРµР»РёС‡РµРЅ РґР»СЏ Р»СѓС‡С€РµР№ РІРёРґРёРјРѕСЃС‚Рё)
            val fontSize = (cardSize.value * 0.4f).coerceIn(28f, 72f).sp
            Text("?", style = MaterialTheme.typography.titleLarge.copy(fontSize = fontSize, fontWeight = FontWeight.Bold), color = textColor)
        } else {
            if (isMarked) {
                // Р“Р°Р»РѕС‡РєР°
                Checkmark(cardSize)
            } else {
                // РџСѓСЃС‚Рѕ - Р°РґР°РїС‚РёРІРЅС‹Р№ СЂР°Р·РјРµСЂ, СѓРІРµР»РёС‡РµРЅ РґР»СЏ Р»СѓС‡С€РµР№ РІРёРґРёРјРѕСЃС‚Рё
                val emptySize = (cardSize.value * 0.08f).coerceIn(20f, 40f).dp
                Box(modifier = Modifier.size(emptySize))
            }
        }
    }
}

@Composable
private fun Checkmark(cardSize: Dp) {
    // РџСЂРѕСЃС‚РѕР№ РЅР°СЂРёСЃРѕРІР°РЅРЅС‹Р№ С‡РµРє (РїСЂР°РІРёР»СЊРЅРѕР№ РѕСЂРёРµРЅС‚Р°С†РёРё: \_/вџ‹)
    val color = MaterialTheme.colorScheme.primary
    // РђРґР°РїС‚РёРІРЅС‹Р№ СЂР°Р·РјРµСЂ РіР°Р»РѕС‡РєРё - СѓРІРµР»РёС‡РµРЅ РґР»СЏ Р»СѓС‡С€РµР№ РІРёРґРёРјРѕСЃС‚Рё
    val checkmarkSize = (cardSize.value * 0.12f).coerceIn(28f, 48f).dp
    val strokeWidth = (cardSize.value * 0.025f).coerceIn(5f, 10f)
    Canvas(modifier = Modifier.size(checkmarkSize).alpha(0.96f)) {
        val w = size.width
        val h = size.height
        // Р—РµСЂРєР°Р»СЊРЅРѕ РїРѕ РіРѕСЂРёР·РѕРЅС‚Р°Р»Рё: РЅРёР¶РЅСЏСЏ РїСЂР°РІР°СЏ -> РЅРёР¶РЅСЏСЏ СЃРµСЂРµРґРёРЅР° -> РІРµСЂС…РЅСЏСЏ Р»РµРІР°СЏ
        val p1 = androidx.compose.ui.geometry.Offset(w * 0.82f, h * 0.64f)
        val p2 = androidx.compose.ui.geometry.Offset(w * 0.58f, h * 0.84f)
        val p3 = androidx.compose.ui.geometry.Offset(w * 0.14f, h * 0.22f)
        drawLine(color = color, start = p1, end = p2, strokeWidth = strokeWidth, cap = StrokeCap.Round)
        drawLine(color = color, start = p2, end = p3, strokeWidth = strokeWidth, cap = StrokeCap.Round)
    }
}

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РєРѕРЅС‚СЂР°СЃС‚РЅРѕРіРѕ С†РІРµС‚Р° С‚РµРєСЃС‚Р° РЅР° РѕСЃРЅРѕРІРµ С†РІРµС‚Р° С„РѕРЅР°
private fun getContrastColor(backgroundColor: Color): Color {
    // Р’С‹С‡РёСЃР»СЏРµРј СЏСЂРєРѕСЃС‚СЊ С†РІРµС‚Р° С„РѕРЅР° (С„РѕСЂРјСѓР»Р° luminance)
    val luminance = backgroundColor.luminance()

    // Р•СЃР»Рё С„РѕРЅ СЃРІРµС‚Р»С‹Р№ (luminance > 0.5), РёСЃРїРѕР»СЊР·СѓРµРј С‡РµСЂРЅС‹Р№ С‚РµРєСЃС‚
    // Р•СЃР»Рё С„РѕРЅ С‚РµРјРЅС‹Р№ (luminance <= 0.5), РёСЃРїРѕР»СЊР·СѓРµРј Р±РµР»С‹Р№ С‚РµРєСЃС‚
    return if (luminance > 0.5f) {
        Color.Black
    } else {
        Color.White
    }
}

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ СѓРјРЅРѕРіРѕ СЂР°СЃРїСЂРµРґРµР»РµРЅРёСЏ С†РІРµС‚РѕРІ, РёР·Р±РµРіР°СЋС‰Р°СЏ РїРѕРІС‚РѕСЂРµРЅРёР№ СЂСЏРґРѕРј
private fun distributeColorsSmartly(
    totalCards: Int,
    availableColors: List<Color>,
    rows: List<Int>
): List<Color> {
    if (availableColors.isEmpty()) return emptyList()

    val colors = mutableListOf<Color>()
    val usedColorsInCurrentRow = mutableSetOf<Color>()
    val usedColorsInPreviousRow = mutableSetOf<Color>()

    var cardIndex = 0
    var rowIndex = 0

    for (row in rows) {
        usedColorsInCurrentRow.clear()

        for (i in 0 until row) {
            if (cardIndex >= totalCards) break

            // РџРѕР»СѓС‡Р°РµРј РґРѕСЃС‚СѓРїРЅС‹Рµ С†РІРµС‚Р°, РёСЃРєР»СЋС‡Р°СЏ СѓР¶Рµ РёСЃРїРѕР»СЊР·РѕРІР°РЅРЅС‹Рµ РІ СЌС‚РѕРј Рё РїСЂРµРґС‹РґСѓС‰РµРј СЂСЏРґСѓ
            val forbiddenColors = usedColorsInCurrentRow + usedColorsInPreviousRow
            val availableForThisCard = availableColors.filter { it !in forbiddenColors }

            val selectedColor = if (availableForThisCard.isNotEmpty()) {
                // Р’С‹Р±РёСЂР°РµРј СЃР»СѓС‡Р°Р№РЅС‹Р№ РёР· РґРѕСЃС‚СѓРїРЅС‹С… С†РІРµС‚РѕРІ
                availableForThisCard.random()
            } else {
                // Р•СЃР»Рё РґРѕСЃС‚СѓРїРЅС‹С… С†РІРµС‚РѕРІ РЅРµС‚, РІС‹Р±РёСЂР°РµРј СЃР»СѓС‡Р°Р№РЅС‹Р№ РёР· РІСЃРµС…
                availableColors.random()
            }

            colors.add(selectedColor)
            usedColorsInCurrentRow.add(selectedColor)
            cardIndex++
        }

        // РћР±РЅРѕРІР»СЏРµРј С†РІРµС‚Р° РїСЂРµРґС‹РґСѓС‰РµРіРѕ СЂСЏРґР° РґР»СЏ СЃР»РµРґСѓСЋС‰РµР№ РёС‚РµСЂР°С†РёРё
        usedColorsInPreviousRow.clear()
        usedColorsInPreviousRow.addAll(usedColorsInCurrentRow)
        rowIndex++
    }

    return colors
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersScreen.kt
================================================
package com.byteflipper.random.ui.numbers

import android.view.SoundEffectConstants
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material.icons.outlined.Autorenew
import androidx.compose.material.icons.outlined.Settings
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R
import kotlinx.coroutines.launch
import kotlin.math.max
import kotlin.math.min
import kotlin.math.ceil
import kotlin.math.sqrt

import com.byteflipper.random.ui.components.FlipCardOverlay
import com.byteflipper.random.ui.components.rememberFlipCardState
import com.byteflipper.random.ui.components.FlipCardControls
import com.byteflipper.random.ui.components.GeneratorConfigDialog
import com.byteflipper.random.ui.components.SizedFab
import com.byteflipper.random.ui.theme.getRainbowColors
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.TextUnit
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository

private const val MIN_DELAY_MS = 1_000
private const val MAX_DELAY_MS = 60_000

// Функция для получения контрастного цвета текста на основе цвета фона
private fun getContrastColor(backgroundColor: Color): Color {
    // Вычисляем яркость цвета фона (формула luminance)
    val luminance = backgroundColor.luminance()

    // Если фон светлый (luminance > 0.5), используем черный текст
    // Если фон темный (luminance <= 0.5), используем белый текст
    return if (luminance > 0.5f) {
        Color.Black
    } else {
        Color.White
    }
}
private const val DEFAULT_DELAY_MS = 3_000

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NumbersScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val haptics = LocalHapticFeedback.current
    val view = LocalView.current
    val scrollState = rememberScrollState()
    val context = LocalContext.current

    var fromText by rememberSaveable { mutableStateOf("1") }
    var toText by rememberSaveable { mutableStateOf("10") }
    var delayText by rememberSaveable { mutableStateOf("") }
    var countText by rememberSaveable { mutableStateOf("1") }

    // Новые параметры
    var allowRepetitions by rememberSaveable { mutableStateOf(true) }
    var useDelay by rememberSaveable { mutableStateOf(true) }

    // Хранение использованных чисел
    var usedNumbers by rememberSaveable { mutableStateOf(setOf<Int>()) }
    var showResetDialog by rememberSaveable { mutableStateOf(false) }

    // Диалог настроек
    var showConfigDialog by rememberSaveable { mutableStateOf(false) }

    // Значения на сторонах карточки - теперь списки
    var frontValues by rememberSaveable { mutableStateOf<List<Int>>(emptyList()) }
    var backValues by rememberSaveable { mutableStateOf<List<Int>>(emptyList()) }

    // Позиции FAB
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }

    // Пульс FAB
    val fabPulseProgress = remember { Animatable(0f) }
    val fabScale = remember { Animatable(1f) }

    // Цвета
    val primaryColor = MaterialTheme.colorScheme.primary
    // Настройки приложения (для размера FAB)
    val settingsRepo = remember { SettingsRepository.fromContext(context) }
    val settings: Settings by settingsRepo.settingsFlow.collectAsState(initial = Settings())

    // Состояние и контроллер для переиспользуемой карточки
    val flipCardState = rememberFlipCardState()
    val flipCardController = FlipCardControls(flipCardState)

    fun parseIntOrNull(text: String): Int? = text.trim().toIntOrNull()

    fun resetUsedNumbers() {
        usedNumbers = emptySet()
        showResetDialog = false
        scope.launch {
            snackbarHostState.showSnackbar(context.getString(R.string.history_cleared))
        }
    }

    fun validateInputs(): Pair<IntRange, Int>? {
        val from = parseIntOrNull(fromText)
        val to = parseIntOrNull(toText)
        val count = parseIntOrNull(countText) ?: 1

        if (from == null || to == null) {
            scope.launch {
                snackbarHostState.showSnackbar(context.getString(R.string.enter_valid_numbers))
            }
            return null
        }

        if (count < 1) {
            scope.launch {
                snackbarHostState.showSnackbar(context.getString(R.string.count_must_be_positive))
            }
            return null
        }

        val range = if (from <= to) from..to else to..from
        val rangeSize = range.last - range.first + 1

        if (!allowRepetitions) {
            val availableNumbers = range.toSet() - usedNumbers
            if (availableNumbers.size < count) {
                if (availableNumbers.isEmpty()) {
                    scope.launch {
                        val res = snackbarHostState.showSnackbar(
                            message = context.getString(R.string.all_numbers_used),
                            actionLabel = context.getString(R.string.reset)
                        )
                        if (res == androidx.compose.material3.SnackbarResult.ActionPerformed) {
                            resetUsedNumbers()
                        }
                    }
                    return null
                } else {
                    scope.launch {
                        snackbarHostState.showSnackbar(context.getString(R.string.only_available_numbers, availableNumbers.size))
                    }
                    return null
                }
            }
        }

        return Pair(range, count)
    }

    fun generateNumbers(range: IntRange, count: Int): List<Int> {
        return if (allowRepetitions) {
            List(count) { range.random() }
        } else {
            // Исключаем использованные числа
            val availableNumbers = range.toSet() - usedNumbers
            if (availableNumbers.size >= count) {
                val selected = availableNumbers.shuffled().take(count)
                // Добавляем выбранные числа к использованным
                usedNumbers = usedNumbers + selected
                selected
            } else {
                // Не должно происходить, так как мы проверяем в validateInputs
                emptyList()
            }
        }
    }


    // Сброс использованных чисел при изменении диапазона или режима повторений
    LaunchedEffect(fromText, toText, allowRepetitions) {
        if (allowRepetitions) {
            usedNumbers = emptySet()
        } else {
            // При изменении диапазона очищаем только числа вне нового диапазона
            val from = parseIntOrNull(fromText)
            val to = parseIntOrNull(toText)
            if (from != null && to != null) {
                val range = if (from <= to) from..to else to..from
                usedNumbers = usedNumbers.filter { it in range }.toSet()
            }
        }
    }

    fun triggerFabPulse() = scope.launch {
        haptics.performHapticFeedback(HapticFeedbackType.LongPress)
        view.playSoundEffect(SoundEffectConstants.CLICK)

        fabPulseProgress.snapTo(0f)
        val ring = launch {
            fabPulseProgress.animateTo(1f, tween(500, easing = FastOutSlowInEasing))
            fabPulseProgress.snapTo(0f)
        }
        val scale = launch {
            fabScale.animateTo(1.12f, spring(dampingRatio = 0.4f, stiffness = Spring.StiffnessMedium))
            fabScale.animateTo(1f, spring(dampingRatio = 0.7f, stiffness = Spring.StiffnessLow))
        }
        ring.join()
        scale.join()
    }

    

    // Диалог сброса заменён на snackbar с действием (см. validateInputs)

    // Диалог настроек
    GeneratorConfigDialog(
        visible = showConfigDialog,
        onDismissRequest = { showConfigDialog = false },
        countText = countText,
        onCountChange = { countText = it },
        allowRepetitions = allowRepetitions,
        onAllowRepetitionsChange = { allowRepetitions = it },
        usedNumbers = usedNumbers,
        availableRange = run {
                                val from = parseIntOrNull(fromText)
                                val to = parseIntOrNull(toText)
                                if (from != null && to != null) {
                if (from <= to) from..to else to..from
            } else null
        },
        onResetUsedNumbers = { resetUsedNumbers() },
        useDelay = useDelay,
        onUseDelayChange = { useDelay = it },
        delayText = delayText,
        onDelayChange = { delayText = it },
        minDelayMs = MIN_DELAY_MS,
        maxDelayMs = MAX_DELAY_MS,
        defaultDelayMs = DEFAULT_DELAY_MS
    )

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.number)) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = {
            Column(
                horizontalAlignment = Alignment.End,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // FAB для настроек
                SmallFloatingActionButton(
                    onClick = { showConfigDialog = true },
                    containerColor = MaterialTheme.colorScheme.secondaryContainer,
                    contentColor = MaterialTheme.colorScheme.onSecondaryContainer
                ) {
                    Icon(painter = painterResource(R.drawable.settings_24px), contentDescription = stringResource(R.string.settings))
                }

                // Основная FAB для генерации
                Box(
                    modifier = Modifier.onGloballyPositioned { coords ->
                        fabSize = coords.size
                        val pos = coords.positionInRoot()
                        fabCenterInRoot = Offset(pos.x + fabSize.width / 2f, pos.y + fabSize.height / 2f)
                    }
                ) {
                    // Пульс-эффект
                    if (fabPulseProgress.value > 0f && fabSize.width > 0) {
                        Canvas(
                            modifier = Modifier
                                .matchParentSize()
                                .alpha(fabPulseProgress.value)
                        ) {
                            val c = Offset(size.width / 2f, size.height / 2f)
                            val baseR = min(size.width, size.height) / 2f
                            val t = fabPulseProgress.value
                            val r = baseR + baseR * 1.5f * t

                            drawCircle(
                                brush = Brush.radialGradient(
                                    colors = listOf(
                                        primaryColor.copy(alpha = 0.4f * (1f - t)),
                                        primaryColor.copy(alpha = 0.2f * (1f - t)),
                                        primaryColor.copy(alpha = 0f)
                                    ),
                                    center = c,
                                    radius = max(1f, r)
                                ),
                                center = c,
                                radius = r
                            )
                        }
                    }

                    SizedFab(
                        size = settings.fabSize,
                        onClick = {
                            val result = validateInputs() ?: return@SizedFab
                            val (range, count) = result
                            val delayParsed = if (useDelay) {
                                parseIntOrNull(delayText) ?: DEFAULT_DELAY_MS
                            } else {
                                1000
                            }
                            val delayMs = delayParsed.coerceIn(MIN_DELAY_MS, MAX_DELAY_MS)

                            if (!flipCardController.isVisible()) {
                                flipCardController.open()
                            }
                            flipCardController.spinAndReveal(
                                effectiveDelayMs = delayMs,
                                onReveal = { targetIsFront ->
                                    val newNumbers = generateNumbers(range, count)
                                    if (targetIsFront) {
                                        frontValues = newNumbers
                                    } else {
                                        backValues = newNumbers
                                    }
                                },
                                onSpinCompleted = {
                                    haptics.performHapticFeedback(HapticFeedbackType.TextHandleMove)
                                }
                            )
                        },
                        containerColor = MaterialTheme.colorScheme.primaryContainer,
                        contentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.graphicsLayer {
                            scaleX = fabScale.value
                            scaleY = fabScale.value
                        }
                    ) {
                        Icon(painterResource(R.drawable.autorenew_24px), contentDescription = stringResource(R.string.generate))
                    }
                }
            }
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // Основной контент с blur (зависит от прогресса скрима карточки)
            val blurRadius = (8f * flipCardController.scrimProgress.value).dp
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur(blurRadius)
                    .verticalScroll(scrollState),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    stringResource(R.string.from),
                    style = MaterialTheme.typography.labelLarge,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(Modifier.height(48.dp))
                BasicTextField(
                    value = fromText,
                    onValueChange = { newValue ->
                        fromText = newValue.filter { ch -> ch.isDigit() || ch == '-' }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        fontSize = 64.sp
                    )
                )

                Spacer(Modifier.height(48.dp))

                Text(
                    stringResource(R.string.to),
                    style = MaterialTheme.typography.labelLarge,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(Modifier.height(48.dp))
                BasicTextField(
                    value = toText,
                    onValueChange = { newValue ->
                        toText = newValue.filter { ch -> ch.isDigit() || ch == '-' }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        fontSize = 64.sp
                    )
                )
            }

            // Переиспользуемый оверлей с карточкой
            val resultsCountForSizing = max(frontValues.size, backValues.size)
            val configuration = LocalConfiguration.current
            val maxCardSideDp = (min(configuration.screenWidthDp, configuration.screenHeightDp) - 64).coerceAtLeast(200).dp

            fun computeCardSize(count: Int): Dp {
                val base = 280
                val scale = when {
                    count <= 10 -> 1.0
                    count <= 25 -> 1.15
                    count <= 50 -> 1.3
                    else -> 1.5
                }
                val target = (base * scale).toInt()
                val clamped = target.coerceIn(240, maxCardSideDp.value.toInt())
                return clamped.dp
            }

            fun columnsFor(count: Int): Int {
                if (count <= 1) return 1
                val approx = ceil(sqrt(count.toDouble())).toInt()
                return approx.coerceIn(3, 10)
            }

            val dynamicCardSize = computeCardSize(resultsCountForSizing)

            fun numberFontSizeFor(count: Int, cardSize: Dp): TextUnit {
                // Адаптивный размер текста в зависимости от размера карточки и количества чисел
                val baseSize = when {
                    count <= 5 -> cardSize.value * 0.08f  // Для малого количества - крупный текст
                    count <= 10 -> cardSize.value * 0.06f
                    count <= 25 -> cardSize.value * 0.05f
                    count <= 50 -> cardSize.value * 0.04f
                    else -> cardSize.value * 0.035f
                }
                return baseSize.coerceIn(18f, 36f).sp
            }

            // Получить цвета радуги и выбрать случайный для карточки
            val rainbowColors = getRainbowColors()
            val cardColor = remember(frontValues) { rainbowColors.random() }

            FlipCardOverlay(
                state = flipCardState,
                anchorInRoot = fabCenterInRoot,
                onClosed = {
                    // Пульс по закрытию + очистка локального результата
                    triggerFabPulse()
                    frontValues = emptyList()
                    backValues = emptyList()
                },
                cardSize = dynamicCardSize,
                // Используем один и тот же цвет для обеих сторон карточки
                frontContainerColor = cardColor,
                backContainerColor = cardColor,
                frontContent = {
                    if (frontValues.isNotEmpty()) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center,
                            modifier = Modifier.padding((dynamicCardSize.value * 0.03f).coerceIn(8f, 24f).dp)
                        ) {
                            if (frontValues.size == 1) {
                                // Адаптивный размер шрифта для одиночного числа - увеличен для лучшей видимости
                                val singleNumberFontSize = (dynamicCardSize.value * 0.4f).coerceIn(56f, 140f).sp
                                // Адаптируем цвет текста под цвет фона карточки
                                val textColor = getContrastColor(cardColor)
                                Text(
                                    text = frontValues[0].toString(),
                                    style = MaterialTheme.typography.displayLarge.copy(fontSize = singleNumberFontSize),
                                    fontWeight = FontWeight.Bold,
                                    color = textColor
                                )
                            } else {
                                val cols = columnsFor(frontValues.size)
                                val numberSize = numberFontSizeFor(frontValues.size, dynamicCardSize)
                                // Адаптивный размер заголовка
                                val headerFontSize = (dynamicCardSize.value * 0.04f).coerceIn(16f, 28f).sp
                                // Адаптируем цвет текста под цвет фона карточки
                                val headerTextColor = getContrastColor(cardColor).copy(alpha = 0.8f)
                                Text(
                                    text = stringResource(R.string.results),
                                    style = MaterialTheme.typography.labelMedium.copy(fontSize = headerFontSize),
                                    color = headerTextColor
                                )
                                Spacer(Modifier.height(6.dp))
                                frontValues.chunked(cols).forEach { rowNumbers ->
                                    Row(
                                        horizontalArrangement = Arrangement.Center,
                                        modifier = Modifier.fillMaxWidth()
                                    ) {
                                        rowNumbers.forEach { number ->
                                            // Адаптируем цвет текста под цвет фона карточки
                                            val numberTextColor = getContrastColor(cardColor)
                                            Text(
                                                text = number.toString(),
                                                fontSize = numberSize,
                                                fontWeight = FontWeight.Bold,
                                                color = numberTextColor,
                                                modifier = Modifier.padding(horizontal = 2.dp, vertical = 1.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                backContent = {
                    if (backValues.isNotEmpty()) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center,
                            modifier = Modifier.padding((dynamicCardSize.value * 0.03f).coerceIn(8f, 24f).dp)
                        ) {
                            if (backValues.size == 1) {
                                // Адаптивный размер шрифта для одиночного числа - увеличен для лучшей видимости
                                val singleNumberFontSize = (dynamicCardSize.value * 0.4f).coerceIn(56f, 140f).sp
                                // Адаптируем цвет текста под цвет фона карточки
                                val textColor = getContrastColor(cardColor)
                                Text(
                                    text = backValues[0].toString(),
                                    style = MaterialTheme.typography.displayLarge.copy(fontSize = singleNumberFontSize),
                                    fontWeight = FontWeight.Bold,
                                    color = textColor
                                )
                            } else {
                                val cols = columnsFor(backValues.size)
                                val numberSize = numberFontSizeFor(backValues.size, dynamicCardSize)
                                // Адаптивный размер заголовка
                                val headerFontSize = (dynamicCardSize.value * 0.04f).coerceIn(16f, 28f).sp
                                // Адаптируем цвет текста под цвет фона карточки
                                val headerTextColor = getContrastColor(cardColor).copy(alpha = 0.8f)
                                Text(
                                    text = stringResource(R.string.results),
                                    style = MaterialTheme.typography.labelMedium.copy(fontSize = headerFontSize),
                                    color = headerTextColor
                                )
                                Spacer(Modifier.height(6.dp))
                                backValues.chunked(cols).forEach { rowNumbers ->
                                    Row(
                                        horizontalArrangement = Arrangement.Center,
                                        modifier = Modifier.fillMaxWidth()
                                    ) {
                                        rowNumbers.forEach { number ->
                                            // Адаптируем цвет текста под цвет фона карточки
                                            val numberTextColor = getContrastColor(cardColor)
                                            Text(
                                                text = number.toString(),
                                                fontSize = numberSize,
                                                fontWeight = FontWeight.Bold,
                                                color = numberTextColor,
                                                modifier = Modifier.padding(horizontal = 2.dp, vertical = 1.dp)
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsScreen.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.SegmentedButton
import androidx.compose.material3.SegmentedButtonDefaults
import androidx.compose.material3.SingleChoiceSegmentedButtonRow
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.data.settings.ThemeMode
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.data.settings.AppLanguage
import kotlinx.coroutines.launch
import android.os.Build
import com.byteflipper.random.R
import com.byteflipper.random.ui.components.PreferenceCategory
import com.byteflipper.random.ui.components.SwitchPreference

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(onBack: () -> Unit) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val repo = remember { SettingsRepository.fromContext(context) }
    val settings: Settings by repo.settingsFlow.collectAsState(initial = Settings())

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.settings)) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
                    }
                }
            )
        },
        contentWindowInsets = WindowInsets.systemBars
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.Top,
            horizontalAlignment = Alignment.Start
        ) {
            PreferenceCategory(title = stringResource(R.string.theme), description = stringResource(R.string.theme_description))
            val themeKey = when (settings.themeMode) {
                ThemeMode.System -> "system"
                ThemeMode.Light -> "light"
                ThemeMode.Dark -> "dark"
            }
            SingleChoiceSegmentedButtonRow(modifier = Modifier.padding(horizontal = 16.dp)) {
                val items = listOf(
                    "system" to stringResource(R.string.system_theme),
                    "light" to stringResource(R.string.light_theme),
                    "dark" to stringResource(R.string.dark_theme)
                )
                items.forEachIndexed { index, (key, label) ->
                    SegmentedButton(
                        selected = themeKey == key,
                        onClick = {
                            val mode = when (key) {
                                "light" -> ThemeMode.Light
                                "dark" -> ThemeMode.Dark
                                else -> ThemeMode.System
                            }
                            scope.launch { repo.setThemeMode(mode) }
                        },
                        shape = SegmentedButtonDefaults.itemShape(index, items.size),
                        colors = SegmentedButtonDefaults.colors(
                            activeContainerColor = MaterialTheme.colorScheme.primaryContainer,
                            activeContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                            inactiveContainerColor = MaterialTheme.colorScheme.surface,
                            inactiveContentColor = MaterialTheme.colorScheme.onSurface
                        )
                    ) {
                        Text(label)
                    }
                }
            }

            HorizontalDivider(modifier = Modifier.padding(top = 12.dp))

            val dynamicSupported = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
            PreferenceCategory(
                title = stringResource(R.string.dynamic_colors),
                description = if (dynamicSupported) stringResource(R.string.dynamic_colors_description) else stringResource(R.string.android_12_required)
            )
            SwitchPreference(
                title = stringResource(R.string.dynamic_colors),
                descriptionOn = stringResource(R.string.use_wallpaper_colors),
                descriptionOff = stringResource(R.string.disabled),
                checked = settings.dynamicColors && dynamicSupported,
                onCheckedChange = { enabled -> if (dynamicSupported) scope.launch { repo.setDynamicColors(enabled) } }
            )

            HorizontalDivider(modifier = Modifier.padding(top = 12.dp))

            PreferenceCategory(title = stringResource(R.string.fab_size), description = stringResource(R.string.fab_size_description))
            val fabKey = when (settings.fabSize) {
                FabSizeSetting.Small -> "s"
                FabSizeSetting.Medium -> "m"
                FabSizeSetting.Large -> "l"
            }
            SingleChoiceSegmentedButtonRow(modifier = Modifier.padding(horizontal = 16.dp)) {
                val fabItems = listOf(
                    "s" to stringResource(R.string.fab_size_small),
                    "m" to stringResource(R.string.fab_size_medium),
                    "l" to stringResource(R.string.fab_size_large)
                )
                fabItems.forEachIndexed { index, (key, label) ->
                    SegmentedButton(
                        selected = fabKey == key,
                        onClick = {
                            val size = when (key) {
                                "s" -> FabSizeSetting.Small
                                "l" -> FabSizeSetting.Large
                                else -> FabSizeSetting.Medium
                            }
                            scope.launch { repo.setFabSize(size) }
                        },
                        shape = SegmentedButtonDefaults.itemShape(index, fabItems.size),
                        colors = SegmentedButtonDefaults.colors(
                            activeContainerColor = MaterialTheme.colorScheme.primaryContainer,
                            activeContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                            inactiveContainerColor = MaterialTheme.colorScheme.surface,
                            inactiveContentColor = MaterialTheme.colorScheme.onSurface
                        )
                    ) {
                        Text(label)
                    }
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Color.kt
================================================
package com.byteflipper.random.ui.theme
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

val primaryLight = Color(0xFF415F91)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFD6E3FF)
val onPrimaryContainerLight = Color(0xFF284777)
val secondaryLight = Color(0xFF565F71)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFDAE2F9)
val onSecondaryContainerLight = Color(0xFF3E4759)
val tertiaryLight = Color(0xFF705575)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFFAD8FD)
val onTertiaryContainerLight = Color(0xFF573E5C)
val errorLight = Color(0xFFBA1A1A)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFDAD6)
val onErrorContainerLight = Color(0xFF93000A)
val backgroundLight = Color(0xFFF9F9FF)
val onBackgroundLight = Color(0xFF191C20)
val surfaceLight = Color(0xFFF9F9FF)
val onSurfaceLight = Color(0xFF191C20)
val surfaceVariantLight = Color(0xFFE0E2EC)
val onSurfaceVariantLight = Color(0xFF44474E)
val outlineLight = Color(0xFF74777F)
val outlineVariantLight = Color(0xFFC4C6D0)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF2E3036)
val inverseOnSurfaceLight = Color(0xFFF0F0F7)
val inversePrimaryLight = Color(0xFFAAC7FF)
val surfaceDimLight = Color(0xFFD9D9E0)
val surfaceBrightLight = Color(0xFFF9F9FF)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF3F3FA)
val surfaceContainerLight = Color(0xFFEDEDF4)
val surfaceContainerHighLight = Color(0xFFE7E8EE)
val surfaceContainerHighestLight = Color(0xFFE2E2E9)

val primaryLightMediumContrast = Color(0xFF133665)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF506DA0)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF2E3647)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF646D80)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF452E4A)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF7F6484)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF740006)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCF2C27)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFF9F9FF)
val onBackgroundLightMediumContrast = Color(0xFF191C20)
val surfaceLightMediumContrast = Color(0xFFF9F9FF)
val onSurfaceLightMediumContrast = Color(0xFF0F1116)
val surfaceVariantLightMediumContrast = Color(0xFFE0E2EC)
val onSurfaceVariantLightMediumContrast = Color(0xFF33363E)
val outlineLightMediumContrast = Color(0xFF4F525A)
val outlineVariantLightMediumContrast = Color(0xFF6A6D75)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF2E3036)
val inverseOnSurfaceLightMediumContrast = Color(0xFFF0F0F7)
val inversePrimaryLightMediumContrast = Color(0xFFAAC7FF)
val surfaceDimLightMediumContrast = Color(0xFFC5C6CD)
val surfaceBrightLightMediumContrast = Color(0xFFF9F9FF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF3F3FA)
val surfaceContainerLightMediumContrast = Color(0xFFE7E8EE)
val surfaceContainerHighLightMediumContrast = Color(0xFFDCDCE3)
val surfaceContainerHighestLightMediumContrast = Color(0xFFD1D1D8)

val primaryLightHighContrast = Color(0xFF032B5B)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF2A497A)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF232C3D)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF41495B)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF3A2440)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF59405E)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600004)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF98000A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFF9F9FF)
val onBackgroundLightHighContrast = Color(0xFF191C20)
val surfaceLightHighContrast = Color(0xFFF9F9FF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFE0E2EC)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF292C33)
val outlineVariantLightHighContrast = Color(0xFF464951)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF2E3036)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFAAC7FF)
val surfaceDimLightHighContrast = Color(0xFFB8B8BF)
val surfaceBrightLightHighContrast = Color(0xFFF9F9FF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF0F0F7)
val surfaceContainerLightHighContrast = Color(0xFFE2E2E9)
val surfaceContainerHighLightHighContrast = Color(0xFFD3D4DB)
val surfaceContainerHighestLightHighContrast = Color(0xFFC5C6CD)

val primaryDark = Color(0xFFAAC7FF)
val onPrimaryDark = Color(0xFF0A305F)
val primaryContainerDark = Color(0xFF284777)
val onPrimaryContainerDark = Color(0xFFD6E3FF)
val secondaryDark = Color(0xFFBEC6DC)
val onSecondaryDark = Color(0xFF283141)
val secondaryContainerDark = Color(0xFF3E4759)
val onSecondaryContainerDark = Color(0xFFDAE2F9)
val tertiaryDark = Color(0xFFDDBCE0)
val onTertiaryDark = Color(0xFF3F2844)
val tertiaryContainerDark = Color(0xFF573E5C)
val onTertiaryContainerDark = Color(0xFFFAD8FD)
val errorDark = Color(0xFFFFB4AB)
val onErrorDark = Color(0xFF690005)
val errorContainerDark = Color(0xFF93000A)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF111318)
val onBackgroundDark = Color(0xFFE2E2E9)
val surfaceDark = Color(0xFF111318)
val onSurfaceDark = Color(0xFFE2E2E9)
val surfaceVariantDark = Color(0xFF44474E)
val onSurfaceVariantDark = Color(0xFFC4C6D0)
val outlineDark = Color(0xFF8E9099)
val outlineVariantDark = Color(0xFF44474E)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE2E2E9)
val inverseOnSurfaceDark = Color(0xFF2E3036)
val inversePrimaryDark = Color(0xFF415F91)
val surfaceDimDark = Color(0xFF111318)
val surfaceBrightDark = Color(0xFF37393E)
val surfaceContainerLowestDark = Color(0xFF0C0E13)
val surfaceContainerLowDark = Color(0xFF191C20)
val surfaceContainerDark = Color(0xFF1D2024)
val surfaceContainerHighDark = Color(0xFF282A2F)
val surfaceContainerHighestDark = Color(0xFF33353A)

val primaryDarkMediumContrast = Color(0xFFCDDDFF)
val onPrimaryDarkMediumContrast = Color(0xFF002551)
val primaryContainerDarkMediumContrast = Color(0xFF7491C7)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFD4DCF2)
val onSecondaryDarkMediumContrast = Color(0xFF1D2636)
val secondaryContainerDarkMediumContrast = Color(0xFF8891A5)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFF3D2F7)
val onTertiaryDarkMediumContrast = Color(0xFF331D39)
val tertiaryContainerDarkMediumContrast = Color(0xFFA487A9)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFD2CC)
val onErrorDarkMediumContrast = Color(0xFF540003)
val errorContainerDarkMediumContrast = Color(0xFFFF5449)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF111318)
val onBackgroundDarkMediumContrast = Color(0xFFE2E2E9)
val surfaceDarkMediumContrast = Color(0xFF111318)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF44474E)
val onSurfaceVariantDarkMediumContrast = Color(0xFFDADCE6)
val outlineDarkMediumContrast = Color(0xFFAFB2BB)
val outlineVariantDarkMediumContrast = Color(0xFF8E9099)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE2E2E9)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF282A2F)
val inversePrimaryDarkMediumContrast = Color(0xFF294878)
val surfaceDimDarkMediumContrast = Color(0xFF111318)
val surfaceBrightDarkMediumContrast = Color(0xFF43444A)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF06070C)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1B1E22)
val surfaceContainerDarkMediumContrast = Color(0xFF26282D)
val surfaceContainerHighDarkMediumContrast = Color(0xFF313238)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3C3E43)
val primaryDarkHighContrast = Color(0xFFEBF0FF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFFA6C3FC)
val onPrimaryContainerDarkHighContrast = Color(0xFF000B20)
val secondaryDarkHighContrast = Color(0xFFEBF0FF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFBAC3D8)
val onSecondaryContainerDarkHighContrast = Color(0xFF030B1A)
val tertiaryDarkHighContrast = Color(0xFFFFE9FF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFD8B8DC)
val onTertiaryContainerDarkHighContrast = Color(0xFF16041D)
val errorDarkHighContrast = Color(0xFFFFECE9)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
val onErrorContainerDarkHighContrast = Color(0xFF220001)
val backgroundDarkHighContrast = Color(0xFF111318)
val onBackgroundDarkHighContrast = Color(0xFFE2E2E9)
val surfaceDarkHighContrast = Color(0xFF111318)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF44474E)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFEEEFF9)
val outlineVariantDarkHighContrast = Color(0xFFC0C2CC)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE2E2E9)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF294878)
val surfaceDimDarkHighContrast = Color(0xFF111318)
val surfaceBrightDarkHighContrast = Color(0xFF4E5056)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF1D2024)
val surfaceContainerDarkHighContrast = Color(0xFF2E3036)
val surfaceContainerHighDarkHighContrast = Color(0xFF393B41)
val surfaceContainerHighestDarkHighContrast = Color(0xFF45474C)

// Р¦РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ РєР°СЂС‚РѕС‡РµРє Р¶СЂРµР±РёСЏ (СЃРІРµС‚Р»Р°СЏ С‚РµРјР°)
val rainbowRedLight = Color(0xFFFF4444)
val rainbowOrangeLight = Color(0xFFFF8800)
val rainbowYellowLight = Color(0xFFFFFF00)
val rainbowGreenLight = Color(0xFF44FF44)
val rainbowCyanLight = Color(0xFF00FFFF)
val rainbowBlueLight = Color(0xFF4444FF)
val rainbowPurpleLight = Color(0xFFAA44FF)
val rainbowPinkLight = Color(0xFFFF69B4)
val rainbowTealLight = Color(0xFF20B2AA)
val rainbowCoralLight = Color(0xFFFF7F50)
val rainbowMintLight = Color(0xFF98FB98)
val rainbowOliveLight = Color(0xFF9ACD32)
val rainbowLavenderLight = Color(0xFFE6E6FA)
val rainbowGoldLight = Color(0xFFFFD700)

// Р¦РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ РєР°СЂС‚РѕС‡РµРє Р¶СЂРµР±РёСЏ (С‚РµРјРЅР°СЏ С‚РµРјР°)
val rainbowRedDark = Color(0xFFFF6666)
val rainbowOrangeDark = Color(0xFFFF9944)
val rainbowYellowDark = Color(0xFFFFFF44)
val rainbowGreenDark = Color(0xFF66FF66)
val rainbowCyanDark = Color(0xFF44FFFF)
val rainbowBlueDark = Color(0xFF6666FF)
val rainbowPurpleDark = Color(0xFFBB66FF)
val rainbowPinkDark = Color(0xFFFF8DA1)
val rainbowTealDark = Color(0xFF40E0D0)
val rainbowCoralDark = Color(0xFFFF8C69)
val rainbowMintDark = Color(0xFF98F5B8)
val rainbowOliveDark = Color(0xFFB8D42A)
val rainbowLavenderDark = Color(0xFFE6E6FA)
val rainbowGoldDark = Color(0xFFFFED4E)

// РЎРїРёСЃРєРё С†РІРµС‚РѕРІ СЂР°РґСѓРіРё РґР»СЏ СЂР°Р·РЅС‹С… С‚РµРј
val rainbowColorsLight = listOf(
    rainbowRedLight,
    rainbowOrangeLight,
    rainbowYellowLight,
    rainbowGreenLight,
    rainbowCyanLight,
    rainbowBlueLight,
    rainbowPurpleLight,
    rainbowPinkLight,
    rainbowTealLight,
    rainbowCoralLight,
    rainbowMintLight,
    rainbowOliveLight,
    rainbowLavenderLight,
    rainbowGoldLight
)

val rainbowColorsDark = listOf(
    rainbowRedDark,
    rainbowOrangeDark,
    rainbowYellowDark,
    rainbowGreenDark,
    rainbowCyanDark,
    rainbowBlueDark,
    rainbowPurpleDark,
    rainbowPinkDark,
    rainbowTealDark,
    rainbowCoralDark,
    rainbowMintDark,
    rainbowOliveDark,
    rainbowLavenderDark,
    rainbowGoldDark
)

@Composable
fun getRainbowColors(): List<Color> {
    return if (isSystemInDarkTheme()) {
        rainbowColorsDark
    } else {
        rainbowColorsLight
    }
}










================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Theme.kt
================================================
package com.byteflipper.random.ui.theme
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext

private val lightScheme = lightColorScheme(
    primary = primaryLight,
    onPrimary = onPrimaryLight,
    primaryContainer = primaryContainerLight,
    onPrimaryContainer = onPrimaryContainerLight,
    secondary = secondaryLight,
    onSecondary = onSecondaryLight,
    secondaryContainer = secondaryContainerLight,
    onSecondaryContainer = onSecondaryContainerLight,
    tertiary = tertiaryLight,
    onTertiary = onTertiaryLight,
    tertiaryContainer = tertiaryContainerLight,
    onTertiaryContainer = onTertiaryContainerLight,
    error = errorLight,
    onError = onErrorLight,
    errorContainer = errorContainerLight,
    onErrorContainer = onErrorContainerLight,
    background = backgroundLight,
    onBackground = onBackgroundLight,
    surface = surfaceLight,
    onSurface = onSurfaceLight,
    surfaceVariant = surfaceVariantLight,
    onSurfaceVariant = onSurfaceVariantLight,
    outline = outlineLight,
    outlineVariant = outlineVariantLight,
    scrim = scrimLight,
    inverseSurface = inverseSurfaceLight,
    inverseOnSurface = inverseOnSurfaceLight,
    inversePrimary = inversePrimaryLight,
    surfaceDim = surfaceDimLight,
    surfaceBright = surfaceBrightLight,
    surfaceContainerLowest = surfaceContainerLowestLight,
    surfaceContainerLow = surfaceContainerLowLight,
    surfaceContainer = surfaceContainerLight,
    surfaceContainerHigh = surfaceContainerHighLight,
    surfaceContainerHighest = surfaceContainerHighestLight,
)

private val darkScheme = darkColorScheme(
    primary = primaryDark,
    onPrimary = onPrimaryDark,
    primaryContainer = primaryContainerDark,
    onPrimaryContainer = onPrimaryContainerDark,
    secondary = secondaryDark,
    onSecondary = onSecondaryDark,
    secondaryContainer = secondaryContainerDark,
    onSecondaryContainer = onSecondaryContainerDark,
    tertiary = tertiaryDark,
    onTertiary = onTertiaryDark,
    tertiaryContainer = tertiaryContainerDark,
    onTertiaryContainer = onTertiaryContainerDark,
    error = errorDark,
    onError = onErrorDark,
    errorContainer = errorContainerDark,
    onErrorContainer = onErrorContainerDark,
    background = backgroundDark,
    onBackground = onBackgroundDark,
    surface = surfaceDark,
    onSurface = onSurfaceDark,
    surfaceVariant = surfaceVariantDark,
    onSurfaceVariant = onSurfaceVariantDark,
    outline = outlineDark,
    outlineVariant = outlineVariantDark,
    scrim = scrimDark,
    inverseSurface = inverseSurfaceDark,
    inverseOnSurface = inverseOnSurfaceDark,
    inversePrimary = inversePrimaryDark,
    surfaceDim = surfaceDimDark,
    surfaceBright = surfaceBrightDark,
    surfaceContainerLowest = surfaceContainerLowestDark,
    surfaceContainerLow = surfaceContainerLowDark,
    surfaceContainer = surfaceContainerDark,
    surfaceContainerHigh = surfaceContainerHighDark,
    surfaceContainerHighest = surfaceContainerHighestDark,
)

private val mediumContrastLightColorScheme = lightColorScheme(
    primary = primaryLightMediumContrast,
    onPrimary = onPrimaryLightMediumContrast,
    primaryContainer = primaryContainerLightMediumContrast,
    onPrimaryContainer = onPrimaryContainerLightMediumContrast,
    secondary = secondaryLightMediumContrast,
    onSecondary = onSecondaryLightMediumContrast,
    secondaryContainer = secondaryContainerLightMediumContrast,
    onSecondaryContainer = onSecondaryContainerLightMediumContrast,
    tertiary = tertiaryLightMediumContrast,
    onTertiary = onTertiaryLightMediumContrast,
    tertiaryContainer = tertiaryContainerLightMediumContrast,
    onTertiaryContainer = onTertiaryContainerLightMediumContrast,
    error = errorLightMediumContrast,
    onError = onErrorLightMediumContrast,
    errorContainer = errorContainerLightMediumContrast,
    onErrorContainer = onErrorContainerLightMediumContrast,
    background = backgroundLightMediumContrast,
    onBackground = onBackgroundLightMediumContrast,
    surface = surfaceLightMediumContrast,
    onSurface = onSurfaceLightMediumContrast,
    surfaceVariant = surfaceVariantLightMediumContrast,
    onSurfaceVariant = onSurfaceVariantLightMediumContrast,
    outline = outlineLightMediumContrast,
    outlineVariant = outlineVariantLightMediumContrast,
    scrim = scrimLightMediumContrast,
    inverseSurface = inverseSurfaceLightMediumContrast,
    inverseOnSurface = inverseOnSurfaceLightMediumContrast,
    inversePrimary = inversePrimaryLightMediumContrast,
    surfaceDim = surfaceDimLightMediumContrast,
    surfaceBright = surfaceBrightLightMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestLightMediumContrast,
    surfaceContainerLow = surfaceContainerLowLightMediumContrast,
    surfaceContainer = surfaceContainerLightMediumContrast,
    surfaceContainerHigh = surfaceContainerHighLightMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestLightMediumContrast,
)

private val highContrastLightColorScheme = lightColorScheme(
    primary = primaryLightHighContrast,
    onPrimary = onPrimaryLightHighContrast,
    primaryContainer = primaryContainerLightHighContrast,
    onPrimaryContainer = onPrimaryContainerLightHighContrast,
    secondary = secondaryLightHighContrast,
    onSecondary = onSecondaryLightHighContrast,
    secondaryContainer = secondaryContainerLightHighContrast,
    onSecondaryContainer = onSecondaryContainerLightHighContrast,
    tertiary = tertiaryLightHighContrast,
    onTertiary = onTertiaryLightHighContrast,
    tertiaryContainer = tertiaryContainerLightHighContrast,
    onTertiaryContainer = onTertiaryContainerLightHighContrast,
    error = errorLightHighContrast,
    onError = onErrorLightHighContrast,
    errorContainer = errorContainerLightHighContrast,
    onErrorContainer = onErrorContainerLightHighContrast,
    background = backgroundLightHighContrast,
    onBackground = onBackgroundLightHighContrast,
    surface = surfaceLightHighContrast,
    onSurface = onSurfaceLightHighContrast,
    surfaceVariant = surfaceVariantLightHighContrast,
    onSurfaceVariant = onSurfaceVariantLightHighContrast,
    outline = outlineLightHighContrast,
    outlineVariant = outlineVariantLightHighContrast,
    scrim = scrimLightHighContrast,
    inverseSurface = inverseSurfaceLightHighContrast,
    inverseOnSurface = inverseOnSurfaceLightHighContrast,
    inversePrimary = inversePrimaryLightHighContrast,
    surfaceDim = surfaceDimLightHighContrast,
    surfaceBright = surfaceBrightLightHighContrast,
    surfaceContainerLowest = surfaceContainerLowestLightHighContrast,
    surfaceContainerLow = surfaceContainerLowLightHighContrast,
    surfaceContainer = surfaceContainerLightHighContrast,
    surfaceContainerHigh = surfaceContainerHighLightHighContrast,
    surfaceContainerHighest = surfaceContainerHighestLightHighContrast,
)

private val mediumContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkMediumContrast,
    onPrimary = onPrimaryDarkMediumContrast,
    primaryContainer = primaryContainerDarkMediumContrast,
    onPrimaryContainer = onPrimaryContainerDarkMediumContrast,
    secondary = secondaryDarkMediumContrast,
    onSecondary = onSecondaryDarkMediumContrast,
    secondaryContainer = secondaryContainerDarkMediumContrast,
    onSecondaryContainer = onSecondaryContainerDarkMediumContrast,
    tertiary = tertiaryDarkMediumContrast,
    onTertiary = onTertiaryDarkMediumContrast,
    tertiaryContainer = tertiaryContainerDarkMediumContrast,
    onTertiaryContainer = onTertiaryContainerDarkMediumContrast,
    error = errorDarkMediumContrast,
    onError = onErrorDarkMediumContrast,
    errorContainer = errorContainerDarkMediumContrast,
    onErrorContainer = onErrorContainerDarkMediumContrast,
    background = backgroundDarkMediumContrast,
    onBackground = onBackgroundDarkMediumContrast,
    surface = surfaceDarkMediumContrast,
    onSurface = onSurfaceDarkMediumContrast,
    surfaceVariant = surfaceVariantDarkMediumContrast,
    onSurfaceVariant = onSurfaceVariantDarkMediumContrast,
    outline = outlineDarkMediumContrast,
    outlineVariant = outlineVariantDarkMediumContrast,
    scrim = scrimDarkMediumContrast,
    inverseSurface = inverseSurfaceDarkMediumContrast,
    inverseOnSurface = inverseOnSurfaceDarkMediumContrast,
    inversePrimary = inversePrimaryDarkMediumContrast,
    surfaceDim = surfaceDimDarkMediumContrast,
    surfaceBright = surfaceBrightDarkMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkMediumContrast,
    surfaceContainerLow = surfaceContainerLowDarkMediumContrast,
    surfaceContainer = surfaceContainerDarkMediumContrast,
    surfaceContainerHigh = surfaceContainerHighDarkMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkMediumContrast,
)

private val highContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkHighContrast,
    onPrimary = onPrimaryDarkHighContrast,
    primaryContainer = primaryContainerDarkHighContrast,
    onPrimaryContainer = onPrimaryContainerDarkHighContrast,
    secondary = secondaryDarkHighContrast,
    onSecondary = onSecondaryDarkHighContrast,
    secondaryContainer = secondaryContainerDarkHighContrast,
    onSecondaryContainer = onSecondaryContainerDarkHighContrast,
    tertiary = tertiaryDarkHighContrast,
    onTertiary = onTertiaryDarkHighContrast,
    tertiaryContainer = tertiaryContainerDarkHighContrast,
    onTertiaryContainer = onTertiaryContainerDarkHighContrast,
    error = errorDarkHighContrast,
    onError = onErrorDarkHighContrast,
    errorContainer = errorContainerDarkHighContrast,
    onErrorContainer = onErrorContainerDarkHighContrast,
    background = backgroundDarkHighContrast,
    onBackground = onBackgroundDarkHighContrast,
    surface = surfaceDarkHighContrast,
    onSurface = onSurfaceDarkHighContrast,
    surfaceVariant = surfaceVariantDarkHighContrast,
    onSurfaceVariant = onSurfaceVariantDarkHighContrast,
    outline = outlineDarkHighContrast,
    outlineVariant = outlineVariantDarkHighContrast,
    scrim = scrimDarkHighContrast,
    inverseSurface = inverseSurfaceDarkHighContrast,
    inverseOnSurface = inverseOnSurfaceDarkHighContrast,
    inversePrimary = inversePrimaryDarkHighContrast,
    surfaceDim = surfaceDimDarkHighContrast,
    surfaceBright = surfaceBrightDarkHighContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkHighContrast,
    surfaceContainerLow = surfaceContainerLowDarkHighContrast,
    surfaceContainer = surfaceContainerDarkHighContrast,
    surfaceContainerHigh = surfaceContainerHighDarkHighContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkHighContrast,
)

@Immutable
data class ColorFamily(
    val color: Color,
    val onColor: Color,
    val colorContainer: Color,
    val onColorContainer: Color
)

val unspecified_scheme = ColorFamily(
    Color.Unspecified, Color.Unspecified, Color.Unspecified, Color.Unspecified
)

@Composable
fun RandomTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable() () -> Unit
) {
  val colorScheme = when {
      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
          val context = LocalContext.current
          if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
      }

      darkTheme -> darkScheme
      else -> lightScheme
  }

  MaterialTheme(
    colorScheme = colorScheme,
    typography = Typography,
    content = content
  )
}




================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Type.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)


================================================
FILE: app/src/main/java/com/byteflipper/random/utils/ChromeCustomTabUtil.kt
================================================
package com.byteflipper.random.utils

import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.browser.customtabs.CustomTabColorSchemeParams
import androidx.browser.customtabs.CustomTabsIntent
import com.byteflipper.random.R

object ChromeCustomTabUtil {

    private const val TAG = "ChromeCustomTabUtil"

    /**
     * Opens a URL in a Chrome Custom Tab or falls back to the default browser.
     *
     * @param context The application context.
     * @param url The URL to open.
     * @param primaryColor The primary color from the current MaterialTheme (as ARGB Int).
     */
    fun openUrl(context: Context, url: String, primaryColor: Int) {
        val uri = Uri.parse(url)
        try {
            val customTabsIntent = CustomTabsIntent.Builder()
                .setDefaultColorSchemeParams(
                    CustomTabColorSchemeParams.Builder()
                        .setToolbarColor(primaryColor)
                        .build()
                )
                .setShowTitle(true)
                // Add custom animations (optional, requires anim resources)
                // .setStartAnimations(context, R.anim.slide_in_right, R.anim.slide_out_left)
                // .setExitAnimations(context, android.R.anim.slide_in_left, android.R.anim.slide_out_right)
                .build()

            customTabsIntent.intent.putExtra(
                Intent.EXTRA_REFERRER,
                Uri.parse("android-app://" + context.packageName)
            )

            customTabsIntent.launchUrl(context, uri)

        } catch (e: ActivityNotFoundException) {
            Log.e(TAG, "Custom Tabs not supported or no browser found: ${e.message}")
            openUrlInDefaultBrowser(context, uri)
        } catch (e: Exception) {
            // Handle other potential exceptions during Custom Tab launch
            Log.e(TAG, "Error launching Custom Tab: ${e.message}", e)
            openUrlInDefaultBrowser(context, uri)
        }
    }

    private fun openUrlInDefaultBrowser(context: Context, uri: Uri) {
        val intent = Intent(Intent.ACTION_VIEW, uri)
        try {
            context.startActivity(intent)
        } catch (e: ActivityNotFoundException) {
            Log.e(TAG, "No browser found to open URL: ${e.message}")
            Toast.makeText(
                context,
                context.getString(R.string.error_no_browser_found),
                Toast.LENGTH_SHORT
            ).show()
        } catch (e: Exception) {
            Log.e(TAG, "Error opening URL in default browser: ${e.message}", e)
            Toast.makeText(
                context,
                context.getString(R.string.error_no_browser_found),
                Toast.LENGTH_SHORT
            ).show()
        }
    }
}



================================================
FILE: app/src/main/res/drawable/add_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M440,520L240,520Q223,520 211.5,508.5Q200,497 200,480Q200,463 211.5,451.5Q223,440 240,440L440,440L440,240Q440,223 451.5,211.5Q463,200 480,200Q497,200 508.5,211.5Q520,223 520,240L520,440L720,440Q737,440 748.5,451.5Q760,463 760,480Q760,497 748.5,508.5Q737,520 720,520L520,520L520,720Q520,737 508.5,748.5Q497,760 480,760Q463,760 451.5,748.5Q440,737 440,720L440,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/apps_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M240,800Q207,800 183.5,776.5Q160,753 160,720Q160,687 183.5,663.5Q207,640 240,640Q273,640 296.5,663.5Q320,687 320,720Q320,753 296.5,776.5Q273,800 240,800ZM480,800Q447,800 423.5,776.5Q400,753 400,720Q400,687 423.5,663.5Q447,640 480,640Q513,640 536.5,663.5Q560,687 560,720Q560,753 536.5,776.5Q513,800 480,800ZM720,800Q687,800 663.5,776.5Q640,753 640,720Q640,687 663.5,663.5Q687,640 720,640Q753,640 776.5,663.5Q800,687 800,720Q800,753 776.5,776.5Q753,800 720,800ZM240,560Q207,560 183.5,536.5Q160,513 160,480Q160,447 183.5,423.5Q207,400 240,400Q273,400 296.5,423.5Q320,447 320,480Q320,513 296.5,536.5Q273,560 240,560ZM480,560Q447,560 423.5,536.5Q400,513 400,480Q400,447 423.5,423.5Q447,400 480,400Q513,400 536.5,423.5Q560,447 560,480Q560,513 536.5,536.5Q513,560 480,560ZM720,560Q687,560 663.5,536.5Q640,513 640,480Q640,447 663.5,423.5Q687,400 720,400Q753,400 776.5,423.5Q800,447 800,480Q800,513 776.5,536.5Q753,560 720,560ZM240,320Q207,320 183.5,296.5Q160,273 160,240Q160,207 183.5,183.5Q207,160 240,160Q273,160 296.5,183.5Q320,207 320,240Q320,273 296.5,296.5Q273,320 240,320ZM480,320Q447,320 423.5,296.5Q400,273 400,240Q400,207 423.5,183.5Q447,160 480,160Q513,160 536.5,183.5Q560,207 560,240Q560,273 536.5,296.5Q513,320 480,320ZM720,320Q687,320 663.5,296.5Q640,273 640,240Q640,207 663.5,183.5Q687,160 720,160Q753,160 776.5,183.5Q800,207 800,240Q800,273 776.5,296.5Q753,320 720,320Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/autorenew_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M240,482Q240,498 242,513.5Q244,529 249,544Q254,561 248,576.5Q242,592 227,599Q211,607 195.5,600.5Q180,594 175,577Q167,554 163.5,530Q160,506 160,482Q160,348 253,254Q346,160 480,160L487,160L451,124Q440,113 440,96Q440,79 451,68Q462,57 479,57Q496,57 507,68L611,172Q623,184 623,200Q623,216 611,228L507,332Q496,343 479,343Q462,343 451,332Q440,321 440,304Q440,287 451,276L487,240L480,240Q380,240 310,310.5Q240,381 240,482ZM720,478Q720,462 718,446.5Q716,431 711,416Q706,399 712,383.5Q718,368 733,361Q749,353 764.5,359.5Q780,366 785,383Q793,406 796.5,430Q800,454 800,478Q800,612 707,706Q614,800 480,800L473,800L509,836Q520,847 520,864Q520,881 509,892Q498,903 481,903Q464,903 453,892L349,788Q337,776 337,760Q337,744 349,732L453,628Q464,617 481,617Q498,617 509,628Q520,639 520,656Q520,673 509,684L473,720L480,720Q580,720 650,649.5Q720,579 720,478Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/bug_report_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q415,840 359.5,808Q304,776 272,720L200,720Q183,720 171.5,708.5Q160,697 160,680Q160,663 171.5,651.5Q183,640 200,640L244,640Q241,620 240.5,600Q240,580 240,560L200,560Q183,560 171.5,548.5Q160,537 160,520Q160,503 171.5,491.5Q183,480 200,480L240,480Q240,460 240.5,440Q241,420 244,400L200,400Q183,400 171.5,388.5Q160,377 160,360Q160,343 171.5,331.5Q183,320 200,320L272,320Q286,297 303.5,277Q321,257 344,242L307,204Q296,193 296,176.5Q296,160 308,148Q319,137 336,137Q353,137 364,148L422,206Q450,197 479,197Q508,197 536,206L596,147Q607,136 623.5,136Q640,136 652,148Q663,159 663,176Q663,193 652,204L614,242Q637,257 655.5,276.5Q674,296 688,320L760,320Q777,320 788.5,331.5Q800,343 800,360Q800,377 788.5,388.5Q777,400 760,400L716,400Q719,420 719.5,440Q720,460 720,480L760,480Q777,480 788.5,491.5Q800,503 800,520Q800,537 788.5,548.5Q777,560 760,560L720,560Q720,580 719.5,600Q719,620 716,640L760,640Q777,640 788.5,651.5Q800,663 800,680Q800,697 788.5,708.5Q777,720 760,720L688,720Q656,776 600.5,808Q545,840 480,840ZM480,760Q546,760 593,713Q640,666 640,600L640,440Q640,374 593,327Q546,280 480,280Q414,280 367,327Q320,374 320,440L320,600Q320,666 367,713Q414,760 480,760ZM440,640L520,640Q537,640 548.5,628.5Q560,617 560,600Q560,583 548.5,571.5Q537,560 520,560L440,560Q423,560 411.5,571.5Q400,583 400,600Q400,617 411.5,628.5Q423,640 440,640ZM440,480L520,480Q537,480 548.5,468.5Q560,457 560,440Q560,423 548.5,411.5Q537,400 520,400L440,400Q423,400 411.5,411.5Q400,423 400,440Q400,457 411.5,468.5Q423,480 440,480ZM480,520Q480,520 480,520Q480,520 480,520L480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520L480,520Q480,520 480,520Q480,520 480,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/check_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M382,606L721,267Q733,255 749,255Q765,255 777,267Q789,279 789,295.5Q789,312 777,324L410,692Q398,704 382,704Q366,704 354,692L182,520Q170,508 170.5,491.5Q171,475 183,463Q195,451 211.5,451Q228,451 240,463L382,606Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/check_box_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M424,536L338,450Q327,439 310,439Q293,439 282,450Q271,461 271,478Q271,495 282,506L396,620Q408,632 424,632Q440,632 452,620L678,394Q689,383 689,366Q689,349 678,338Q667,327 650,327Q633,327 622,338L424,536ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/code_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M193,481L348,636Q359,647 359,664Q359,681 348,692Q337,703 320,703Q303,703 292,692L108,508Q102,502 99.5,495Q97,488 97,480Q97,472 99.5,465Q102,458 108,452L292,268Q304,256 320.5,256Q337,256 349,268Q361,280 361,296.5Q361,313 349,325L193,481ZM767,479L612,324Q601,313 601,296Q601,279 612,268Q623,257 640,257Q657,257 668,268L852,452Q858,458 860.5,465Q863,472 863,480Q863,488 860.5,495Q858,502 852,508L668,692Q656,704 640,703.5Q624,703 612,691Q600,679 600,662.5Q600,646 612,634L767,479Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/colors_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M346,820L100,574Q90,564 85,552Q80,540 80,527Q80,514 85,502Q90,490 100,480L330,251L255,176Q242,163 241.5,145Q241,127 254,113Q267,99 286,99Q305,99 319,113L686,480Q696,490 700.5,502Q705,514 705,527Q705,540 700.5,552Q696,564 686,574L440,820Q430,830 418,835Q406,840 393,840Q380,840 368,835Q356,830 346,820ZM393,314L179,528Q179,528 179,528Q179,528 179,528L607,528Q607,528 607,528Q607,528 607,528L393,314ZM792,840Q756,840 731,814.5Q706,789 706,752Q706,725 719.5,701Q733,677 750,654L769,630Q778,619 792.5,618.5Q807,618 816,629L836,654Q852,677 866,701Q880,725 880,752Q880,789 854,814.5Q828,840 792,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/contrast_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM520,797Q639,782 719.5,692.5Q800,603 800,480Q800,357 719.5,267.5Q639,178 520,163L520,797Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/dark_mode_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q329,840 224.5,735.5Q120,631 120,480Q120,342 210,240.5Q300,139 440,122Q453,120 463,125.5Q473,131 479,140Q485,149 485.5,161Q486,173 478,184Q461,210 452.5,239Q444,268 444,300Q444,390 507,453Q570,516 660,516Q691,516 721.5,507Q752,498 776,482Q787,475 798.5,475.5Q810,476 819,481Q829,486 834.5,496Q840,506 838,520Q824,658 720.5,749Q617,840 480,840ZM480,760Q568,760 638,711.5Q708,663 740,585Q720,590 700,593Q680,596 660,596Q537,596 450.5,509.5Q364,423 364,300Q364,280 367,260Q370,240 375,220Q297,252 248.5,322Q200,392 200,480Q200,596 282,678Q364,760 480,760ZM470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/delete_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M280,840Q247,840 223.5,816.5Q200,793 200,760L200,240L200,240Q183,240 171.5,228.5Q160,217 160,200Q160,183 171.5,171.5Q183,160 200,160L360,160L360,160Q360,143 371.5,131.5Q383,120 400,120L560,120Q577,120 588.5,131.5Q600,143 600,160L600,160L760,160Q777,160 788.5,171.5Q800,183 800,200Q800,217 788.5,228.5Q777,240 760,240L760,240L760,760Q760,793 736.5,816.5Q713,840 680,840L280,840ZM680,240L280,240L280,760Q280,760 280,760Q280,760 280,760L680,760Q680,760 680,760Q680,760 680,760L680,240ZM400,680Q417,680 428.5,668.5Q440,657 440,640L440,360Q440,343 428.5,331.5Q417,320 400,320Q383,320 371.5,331.5Q360,343 360,360L360,640Q360,657 371.5,668.5Q383,680 400,680ZM560,680Q577,680 588.5,668.5Q600,657 600,640L600,360Q600,343 588.5,331.5Q577,320 560,320Q543,320 531.5,331.5Q520,343 520,360L520,640Q520,657 531.5,668.5Q543,680 560,680ZM280,240L280,240L280,760Q280,760 280,760Q280,760 280,760L280,760Q280,760 280,760Q280,760 280,760L280,240Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/edit_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,760L257,760L648,369L591,312L200,703L200,760ZM160,840Q143,840 131.5,828.5Q120,817 120,800L120,703Q120,687 126,672.5Q132,658 143,647L648,143Q660,132 674.5,126Q689,120 705,120Q721,120 736,126Q751,132 762,144L817,200Q829,211 834.5,226Q840,241 840,256Q840,272 834.5,286.5Q829,301 817,313L313,817Q302,828 287.5,834Q273,840 257,840L160,840ZM760,256L760,256L704,200L704,200L760,256ZM619,341L591,312L591,312L648,369L648,369L619,341Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/format_size_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M560,280L420,280Q395,280 377.5,262.5Q360,245 360,220Q360,195 377.5,177.5Q395,160 420,160L820,160Q845,160 862.5,177.5Q880,195 880,220Q880,245 862.5,262.5Q845,280 820,280L680,280L680,740Q680,765 662.5,782.5Q645,800 620,800Q595,800 577.5,782.5Q560,765 560,740L560,280ZM200,480L140,480Q115,480 97.5,462.5Q80,445 80,420Q80,395 97.5,377.5Q115,360 140,360L380,360Q405,360 422.5,377.5Q440,395 440,420Q440,445 422.5,462.5Q405,480 380,480L320,480L320,740Q320,765 302.5,782.5Q285,800 260,800Q235,800 217.5,782.5Q200,765 200,740L200,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/gavel_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,760L600,760Q617,760 628.5,771.5Q640,783 640,800Q640,817 628.5,828.5Q617,840 600,840L200,840Q183,840 171.5,828.5Q160,817 160,800Q160,783 171.5,771.5Q183,760 200,760ZM329,589L216,476Q193,453 192.5,419.5Q192,386 215,363L244,334L472,560L443,589Q420,612 386,612Q352,612 329,589ZM640,392L414,164L443,135Q466,112 499.5,112.5Q533,113 556,136L669,249Q692,272 692,306Q692,340 669,363L640,392ZM796,772L302,278L358,222L852,716Q863,727 863,744Q863,761 852,772Q841,783 824,783Q807,783 796,772Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/github_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"     android:tint="?android:attr/colorControlNormal">
    <path android:fillColor="@android:color/white" android:pathData="M12,0.296c-6.627,0-12,5.372-12,12c0,5.302,3.438,9.8,8.206,11.387   c0.6,0.111,0.82-0.26,0.82-0.577c0-0.286-0.011-1.231-0.016-2.234c-3.338,0.726-4.043-1.416-4.043-1.416   C4.421,18.069,3.635,17.7,3.635,17.7c-1.089-0.745,0.082-0.729,0.082-0.729c1.205,0.085,1.839,1.237,1.839,1.237   c1.07,1.834,2.807,1.304,3.492,0.997C9.156,18.429,9.467,17.9,9.81,17.6c-2.665-0.303-5.467-1.332-5.467-5.93   c0-1.31,0.469-2.381,1.237-3.221C5.455,8.146,5.044,6.926,5.696,5.273c0,0,1.008-0.322,3.301,1.23   C9.954,6.237,10.98,6.104,12,6.099c1.02,0.005,2.047,0.138,3.006,0.404c2.29-1.553,3.297-1.23,3.297-1.23   c0.653,1.653,0.242,2.873,0.118,3.176c0.769,0.84,1.235,1.911,1.235,3.221c0,4.609-2.807,5.624-5.479,5.921   c0.43,0.372,0.814,1.103,0.814,2.222c0,1.606-0.014,2.898-0.014,3.293c0,0.319,0.216,0.694,0.824,0.576   c4.766-1.589,8.2-6.085,8.2-11.385C24,5.669,18.627,0.296,12,0.296z"/><path android:fillColor="@android:color/white" android:pathData="M4.545,17.526c-0.026,0.06-0.12,0.078-0.206,0.037c-0.087-0.039-0.136-0.121-0.108-0.18   c0.026-0.061,0.12-0.078,0.207-0.037C4.525,17.384,4.575,17.466,4.545,17.526L4.545,17.526z"/><path android:fillColor="@android:color/white" android:pathData="M5.031,18.068c-0.057,0.053-0.169,0.028-0.245-0.055c-0.079-0.084-0.093-0.196-0.035-0.249   c0.059-0.053,0.167-0.028,0.246,0.056C5.076,17.903,5.091,18.014,5.031,18.068L5.031,18.068z"/><path android:fillColor="@android:color/white" android:pathData="M5.504,18.759c-0.074,0.051-0.194,0.003-0.268-0.103c-0.074-0.107-0.074-0.235,0.002-0.286   c0.074-0.051,0.193-0.005,0.268,0.101C5.579,18.579,5.579,18.707,5.504,18.759L5.504,18.759z"/><path android:fillColor="@android:color/white" android:pathData="M6.152,19.427c-0.066,0.073-0.206,0.053-0.308-0.046c-0.105-0.097-0.134-0.234-0.068-0.307   c0.067-0.073,0.208-0.052,0.311,0.046C6.191,19.217,6.222,19.355,6.152,19.427L6.152,19.427z"/><path android:fillColor="@android:color/white" android:pathData="M7.047,19.814c-0.029,0.094-0.164,0.137-0.3,0.097C6.611,19.87,6.522,19.76,6.55,19.665   c0.028-0.095,0.164-0.139,0.301-0.096C6.986,19.609,7.075,19.719,7.047,19.814L7.047,19.814z"/><path android:fillColor="@android:color/white" android:pathData="M8.029,19.886c0.003,0.099-0.112,0.181-0.255,0.183c-0.143,0.003-0.26-0.077-0.261-0.174c0-0.1,0.113-0.181,0.256-0.184   C7.912,19.708,8.029,19.788,8.029,19.886L8.029,19.886z"/><path android:fillColor="@android:color/white" android:pathData="M8.943,19.731c0.017,0.096-0.082,0.196-0.224,0.222c-0.139,0.026-0.268-0.034-0.286-0.13   c-0.017-0.099,0.084-0.198,0.223-0.224C8.797,19.574,8.925,19.632,8.943,19.731L8.943,19.731z"/></vector>


================================================
FILE: app/src/main/res/drawable/ic_launcher_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>



================================================
FILE: app/src/main/res/drawable/ic_launcher_foreground.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>


================================================
FILE: app/src/main/res/drawable/ifl_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M640,700Q665,700 682.5,682.5Q700,665 700,640Q700,615 682.5,597.5Q665,580 640,580Q615,580 597.5,597.5Q580,615 580,640Q580,665 597.5,682.5Q615,700 640,700ZM480,540Q505,540 522.5,522.5Q540,505 540,480Q540,455 522.5,437.5Q505,420 480,420Q455,420 437.5,437.5Q420,455 420,480Q420,505 437.5,522.5Q455,540 480,540ZM320,380Q345,380 362.5,362.5Q380,345 380,320Q380,295 362.5,277.5Q345,260 320,260Q295,260 277.5,277.5Q260,295 260,320Q260,345 277.5,362.5Q295,380 320,380ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/info_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,680Q497,680 508.5,668.5Q520,657 520,640L520,480Q520,463 508.5,451.5Q497,440 480,440Q463,440 451.5,451.5Q440,463 440,480L440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,360Q497,360 508.5,348.5Q520,337 520,320Q520,303 508.5,291.5Q497,280 480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/light_mode_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,600Q530,600 565,565Q600,530 600,480Q600,430 565,395Q530,360 480,360Q430,360 395,395Q360,430 360,480Q360,530 395,565Q430,600 480,600ZM480,680Q397,680 338.5,621.5Q280,563 280,480Q280,397 338.5,338.5Q397,280 480,280Q563,280 621.5,338.5Q680,397 680,480Q680,563 621.5,621.5Q563,680 480,680ZM80,520Q63,520 51.5,508.5Q40,497 40,480Q40,463 51.5,451.5Q63,440 80,440L160,440Q177,440 188.5,451.5Q200,463 200,480Q200,497 188.5,508.5Q177,520 160,520L80,520ZM800,520Q783,520 771.5,508.5Q760,497 760,480Q760,463 771.5,451.5Q783,440 800,440L880,440Q897,440 908.5,451.5Q920,463 920,480Q920,497 908.5,508.5Q897,520 880,520L800,520ZM480,200Q463,200 451.5,188.5Q440,177 440,160L440,80Q440,63 451.5,51.5Q463,40 480,40Q497,40 508.5,51.5Q520,63 520,80L520,160Q520,177 508.5,188.5Q497,200 480,200ZM480,920Q463,920 451.5,908.5Q440,897 440,880L440,800Q440,783 451.5,771.5Q463,760 480,760Q497,760 508.5,771.5Q520,783 520,800L520,880Q520,897 508.5,908.5Q497,920 480,920ZM226,282L183,240Q171,229 171.5,212Q172,195 183,183Q195,171 212,171Q229,171 240,183L282,226Q293,238 293,254Q293,270 282,282Q271,294 254.5,293.5Q238,293 226,282ZM720,777L678,734Q667,722 667,705.5Q667,689 678,678Q689,666 705.5,666.5Q722,667 734,678L777,720Q789,731 788.5,748Q788,765 777,777Q765,789 748,789Q731,789 720,777ZM678,282Q666,271 666.5,254.5Q667,238 678,226L720,183Q731,171 748,171.5Q765,172 777,183Q789,195 789,212Q789,229 777,240L734,282Q722,293 706,293Q690,293 678,282ZM183,777Q171,765 171,748Q171,731 183,720L226,678Q238,667 254.5,667Q271,667 282,678Q294,689 293.5,705.5Q293,722 282,734L240,777Q229,789 212,788.5Q195,788 183,777ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/list_alt_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,680Q337,680 348.5,668.5Q360,657 360,640Q360,623 348.5,611.5Q337,600 320,600Q303,600 291.5,611.5Q280,623 280,640Q280,657 291.5,668.5Q303,680 320,680ZM320,520Q337,520 348.5,508.5Q360,497 360,480Q360,463 348.5,451.5Q337,440 320,440Q303,440 291.5,451.5Q280,463 280,480Q280,497 291.5,508.5Q303,520 320,520ZM320,360Q337,360 348.5,348.5Q360,337 360,320Q360,303 348.5,291.5Q337,280 320,280Q303,280 291.5,291.5Q280,303 280,320Q280,337 291.5,348.5Q303,360 320,360ZM480,680L640,680Q657,680 668.5,668.5Q680,657 680,640Q680,623 668.5,611.5Q657,600 640,600L480,600Q463,600 451.5,611.5Q440,623 440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,520L640,520Q657,520 668.5,508.5Q680,497 680,480Q680,463 668.5,451.5Q657,440 640,440L480,440Q463,440 451.5,451.5Q440,463 440,480Q440,497 451.5,508.5Q463,520 480,520ZM480,360L640,360Q657,360 668.5,348.5Q680,337 680,320Q680,303 668.5,291.5Q657,280 640,280L480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/looks_one_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,360L480,640Q480,657 491.5,668.5Q503,680 520,680Q537,680 548.5,668.5Q560,657 560,640L560,320Q560,303 548.5,291.5Q537,280 520,280L440,280Q423,280 411.5,291.5Q400,303 400,320Q400,337 411.5,348.5Q423,360 440,360L480,360ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/mobile_vibrate_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,840Q287,840 263.5,816.5Q240,793 240,760L240,200Q240,167 263.5,143.5Q287,120 320,120L640,120Q673,120 696.5,143.5Q720,167 720,200L720,760Q720,793 696.5,816.5Q673,840 640,840L320,840ZM640,760L640,200Q640,200 640,200Q640,200 640,200L320,200Q320,200 320,200Q320,200 320,200L320,760Q320,760 320,760Q320,760 320,760L640,760Q640,760 640,760Q640,760 640,760ZM480,320Q497,320 508.5,308.5Q520,297 520,280Q520,263 508.5,251.5Q497,240 480,240Q463,240 451.5,251.5Q440,263 440,280Q440,297 451.5,308.5Q463,320 480,320ZM0,560L0,400Q0,383 11.5,371.5Q23,360 40,360Q57,360 68.5,371.5Q80,383 80,400L80,560Q80,577 68.5,588.5Q57,600 40,600Q23,600 11.5,588.5Q0,577 0,560ZM120,640L120,320Q120,303 131.5,291.5Q143,280 160,280Q177,280 188.5,291.5Q200,303 200,320L200,640Q200,657 188.5,668.5Q177,680 160,680Q143,680 131.5,668.5Q120,657 120,640ZM880,560L880,400Q880,383 891.5,371.5Q903,360 920,360Q937,360 948.5,371.5Q960,383 960,400L960,560Q960,577 948.5,588.5Q937,600 920,600Q903,600 891.5,588.5Q880,577 880,560ZM760,640L760,320Q760,303 771.5,291.5Q783,280 800,280Q817,280 828.5,291.5Q840,303 840,320L840,640Q840,657 828.5,668.5Q817,680 800,680Q783,680 771.5,668.5Q760,657 760,640ZM320,760Q320,760 320,760Q320,760 320,760L320,760Q320,760 320,760Q320,760 320,760L320,200Q320,200 320,200Q320,200 320,200L320,200Q320,200 320,200Q320,200 320,200L320,760Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/mobile_vibrate_off_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">

  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,840Q287,840 263.5,816.5Q240,793 240,760L240,200Q240,167 263.5,143.5Q287,120 320,120L640,120Q673,120 696.5,143.5Q720,167 720,200L720,760Q720,793 696.5,816.5Q673,840 640,840L320,840ZM640,760L640,200Q640,200 640,200Q640,200 640,200L320,200Q320,200 320,200Q320,200 320,200L320,760Q320,760 320,760Q320,760 320,760L640,760Q640,760 640,760Q640,760 640,760ZM480,320Q497,320 508.5,308.5Q520,297 520,280Q520,263 508.5,251.5Q497,240 480,240Q463,240 451.5,251.5Q440,263 440,280Q440,297 451.5,308.5Q463,320 480,320ZM0,560L0,400Q0,383 11.5,371.5Q23,360 40,360Q57,360 68.5,371.5Q80,383 80,400L80,560Q80,577 68.5,588.5Q57,600 40,600Q23,600 11.5,588.5Q0,577 0,560ZM120,640L120,320Q120,303 131.5,291.5Q143,280 160,280Q177,280 188.5,291.5Q200,303 200,320L200,640Q200,657 188.5,668.5Q177,680 160,680Q143,680 131.5,668.5Q120,657 120,640ZM880,560L880,400Q880,383 891.5,371.5Q903,360 920,360Q937,360 948.5,371.5Q960,383 960,400L960,560Q960,577 948.5,588.5Q937,600 920,600Q903,600 891.5,588.5Q880,577 880,560ZM760,640L760,320Q760,303 771.5,291.5Q783,280 800,280Q817,280 828.5,291.5Q840,303 840,320L840,640Q840,657 828.5,668.5Q817,680 800,680Q783,680 771.5,668.5Q760,657 760,640ZM320,760Q320,760 320,760Q320,760 320,760L320,760Q320,760 320,760Q320,760 320,760L320,200Q320,200 320,200Q320,200 320,200L320,200Q320,200 320,200Q320,200 320,200L320,760Z"/>

  <path
      android:pathData="M160,160 L800,800"
      android:strokeColor="@android:color/white"
      android:strokeWidth="80"
      android:strokeLineCap="round"
      android:strokeLineJoin="round"/>
</vector>


================================================
FILE: app/src/main/res/drawable/music_note_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M400,840Q334,840 287,793Q240,746 240,680Q240,614 287,567Q334,520 400,520Q423,520 442.5,525.5Q462,531 480,542L480,160Q480,143 491.5,131.5Q503,120 520,120L680,120Q697,120 708.5,131.5Q720,143 720,160L720,240Q720,257 708.5,268.5Q697,280 680,280L560,280L560,680Q560,746 513,793Q466,840 400,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/music_off_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M764,876L84,196Q73,185 73,168Q73,151 84,140Q95,129 112,129Q129,129 140,140L820,820Q831,831 831,848Q831,865 820,876Q809,887 792,887Q775,887 764,876ZM560,280L560,350Q560,370 547.5,379.5Q535,389 520,389Q505,389 492.5,379Q480,369 480,349L480,160Q480,143 491.5,131.5Q503,120 520,120L680,120Q697,120 708.5,131.5Q720,143 720,160L720,240Q720,257 708.5,268.5Q697,280 680,280L560,280ZM400,840Q334,840 287,793Q240,746 240,680Q240,614 287,567Q334,520 400,520Q423,520 442.5,525.5Q462,531 480,542L480,480L560,560L560,680Q560,746 513,793Q466,840 400,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/night_sight_auto_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M440,760Q492,760 539,739Q586,718 620,679Q492,671 406,579.5Q320,488 320,360Q320,347 321,334.5Q322,322 324,310Q267,342 233.5,398Q200,454 200,520Q200,620 270,690Q340,760 440,760ZM440,840Q306,840 213,747Q120,654 120,520Q120,462 139,409.5Q158,357 192,315.5Q226,274 273,246.5Q320,219 377,212Q402,209 416,229.5Q430,250 417,272Q405,292 402.5,314.5Q400,337 400,360Q400,460 470,530Q540,600 640,600Q652,600 664,599.5Q676,599 688,595Q709,588 724.5,603.5Q740,619 734,639Q705,733 622.5,786.5Q540,840 440,840ZM656,360L636,416Q632,427 623,433.5Q614,440 603,440Q584,440 573.5,424.5Q563,409 569,392L671,105Q675,94 685,87Q695,80 707,80L733,80Q745,80 755,87Q765,94 769,105L871,392Q877,409 866.5,424.5Q856,440 837,440Q826,440 817,433.5Q808,427 804,416L784,360L656,360ZM674,306L766,306L720,160L674,306ZM407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/numbers_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M360,640L327,771Q324,784 314,792Q304,800 290,800Q271,800 259,785Q247,770 252,752L280,640L171,640Q151,640 139,624.5Q127,609 132,590Q135,576 146,568Q157,560 171,560L300,560L340,400L231,400Q211,400 199,384.5Q187,369 192,350Q195,336 206,328Q217,320 231,320L360,320L393,189Q396,176 406,168Q416,160 430,160Q449,160 461,175Q473,190 468,208L440,320L600,320L633,189Q636,176 646,168Q656,160 670,160Q689,160 701,175Q713,190 708,208L680,320L789,320Q809,320 821,335.5Q833,351 828,370Q825,384 814,392Q803,400 789,400L660,400L620,560L729,560Q749,560 761,575.5Q773,591 768,610Q765,624 754,632Q743,640 729,640L600,640L567,771Q564,784 554,792Q544,800 530,800Q511,800 499,785Q487,770 492,752L520,640L360,640ZM380,560L540,560L580,400L420,400L380,560Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/paid_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480ZM479,760Q493,760 503.5,749.5Q514,739 514,725L514,710Q564,701 600,671Q636,641 636,582Q636,540 612,505Q588,470 516,444Q456,424 433,409Q410,394 410,368Q410,342 428.5,327Q447,312 482,312Q502,312 517,319Q532,326 542,338Q552,350 564.5,354.5Q577,359 588,354Q603,348 608.5,333.5Q614,319 606,307Q590,284 566.5,268Q543,252 516,250L516,235Q516,221 505.5,210.5Q495,200 481,200Q467,200 456.5,210.5Q446,221 446,235L446,250Q396,261 368,294Q340,327 340,368Q340,415 367.5,444Q395,473 454,494Q517,517 541.5,535Q566,553 566,582Q566,615 542.5,630.5Q519,646 486,646Q460,646 439,633.5Q418,621 404,596Q396,582 383,577Q370,572 357,577Q343,582 336.5,596Q330,610 336,623Q352,657 379,678.5Q406,700 444,708L444,725Q444,739 454.5,749.5Q465,760 479,760Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/palette_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q398,880 325,848.5Q252,817 197.5,762.5Q143,708 111.5,635Q80,562 80,480Q80,397 112.5,324Q145,251 200.5,197Q256,143 330,111.5Q404,80 488,80Q568,80 639,107.5Q710,135 763.5,183.5Q817,232 848.5,298.5Q880,365 880,442Q880,557 810,618.5Q740,680 640,680L566,680Q557,680 553.5,685Q550,690 550,696Q550,708 565,730.5Q580,753 580,782Q580,832 552.5,856Q525,880 480,880ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480ZM260,520Q286,520 303,503Q320,486 320,460Q320,434 303,417Q286,400 260,400Q234,400 217,417Q200,434 200,460Q200,486 217,503Q234,520 260,520ZM380,360Q406,360 423,343Q440,326 440,300Q440,274 423,257Q406,240 380,240Q354,240 337,257Q320,274 320,300Q320,326 337,343Q354,360 380,360ZM580,360Q606,360 623,343Q640,326 640,300Q640,274 623,257Q606,240 580,240Q554,240 537,257Q520,274 520,300Q520,326 537,343Q554,360 580,360ZM700,520Q726,520 743,503Q760,486 760,460Q760,434 743,417Q726,400 700,400Q674,400 657,417Q640,434 640,460Q640,486 657,503Q674,520 700,520ZM480,800Q489,800 494.5,795Q500,790 500,782Q500,768 485,749Q470,730 470,692Q470,650 499,625Q528,600 570,600L640,600Q706,600 753,561.5Q800,523 800,442Q800,321 707.5,240.5Q615,160 488,160Q352,160 256,253Q160,346 160,480Q160,613 253.5,706.5Q347,800 480,800Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/person_apron_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,480Q414,480 367,433Q320,386 320,320Q320,254 367,207Q414,160 480,160Q546,160 593,207Q640,254 640,320Q640,386 593,433Q546,480 480,480ZM160,720L160,688Q160,654 177,625.5Q194,597 224,582Q284,552 348.5,536Q413,520 480,520Q547,520 611.5,536Q676,552 736,582Q766,597 783,625.5Q800,654 800,688L800,720Q800,753 776.5,776.5Q753,800 720,800L240,800Q207,800 183.5,776.5Q160,753 160,720ZM480,400Q513,400 536.5,376.5Q560,353 560,320Q560,287 536.5,263.5Q513,240 480,240Q447,240 423.5,263.5Q400,287 400,320Q400,353 423.5,376.5Q447,400 480,400ZM640,628L640,720L720,720L720,688Q720,677 715,668Q710,659 700,654Q686,646 670.5,639.5Q655,633 640,628ZM400,607L400,660L560,660L560,607Q540,603 520,601.5Q500,600 480,600Q460,600 440,601.5Q420,603 400,607ZM240,720L320,720L320,628Q305,633 289.5,639.5Q274,646 260,654Q250,659 245,668Q240,677 240,688L240,720ZM640,720Q620,720 600,720Q580,720 560,720L560,720L400,720L400,720Q380,720 360,720Q340,720 320,720L320,720L640,720ZM480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/privacy_tip_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,680Q497,680 508.5,668.5Q520,657 520,640L520,480Q520,463 508.5,451.5Q497,440 480,440Q463,440 451.5,451.5Q440,463 440,480L440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,360Q497,360 508.5,348.5Q520,337 520,320Q520,303 508.5,291.5Q497,280 480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM480,876Q473,876 467,875Q461,874 455,872Q320,827 240,705.5Q160,584 160,444L160,255Q160,230 174.5,210Q189,190 212,181L452,91Q466,86 480,86Q494,86 508,91L748,181Q771,190 785.5,210Q800,230 800,255L800,444Q800,584 720,705.5Q640,827 505,872Q499,874 493,875Q487,876 480,876ZM480,796Q584,763 652,664Q720,565 720,444L720,255Q720,255 720,255Q720,255 720,255L480,165Q480,165 480,165Q480,165 480,165L240,255Q240,255 240,255Q240,255 240,255L240,444Q240,565 308,664Q376,763 480,796ZM480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/rate_review_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M280,560L345,560Q353,560 360.5,557Q368,554 374,548L562,360Q571,351 575.5,339.5Q580,328 580,317Q580,306 575,295.5Q570,285 562,276L526,238Q517,229 506,224.5Q495,220 483,220Q472,220 460.5,224.5Q449,229 440,238L252,426Q246,432 243,439.5Q240,447 240,455L240,520Q240,537 251.5,548.5Q263,560 280,560ZM520,317L520,317L483,280L483,280L520,317ZM300,500L300,462L401,361L421,379L439,399L338,500L300,500ZM421,379L439,399L439,399L401,361L401,361L421,379ZM447,560L680,560Q697,560 708.5,548.5Q720,537 720,520Q720,503 708.5,491.5Q697,480 680,480L527,480L447,560ZM240,720L148,812Q129,831 104.5,820.5Q80,810 80,783L80,160Q80,127 103.5,103.5Q127,80 160,80L800,80Q833,80 856.5,103.5Q880,127 880,160L880,640Q880,673 856.5,696.5Q833,720 800,720L240,720ZM206,640L800,640Q800,640 800,640Q800,640 800,640L800,160Q800,160 800,160Q800,160 800,160L160,160Q160,160 160,160Q160,160 160,160L160,685L206,640ZM160,640L160,640L160,160Q160,160 160,160Q160,160 160,160L160,160Q160,160 160,160Q160,160 160,160L160,640Q160,640 160,640Q160,640 160,640Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/repeat_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M274,760L308,794Q320,806 319.5,822Q319,838 308,850Q296,862 279.5,862.5Q263,863 251,851L148,748Q142,742 139.5,735Q137,728 137,720Q137,712 139.5,705Q142,698 148,692L251,589Q263,577 279.5,577.5Q296,578 308,590Q319,602 319.5,618Q320,634 308,646L274,680L680,680Q680,680 680,680Q680,680 680,680L680,560Q680,543 691.5,531.5Q703,520 720,520Q737,520 748.5,531.5Q760,543 760,560L760,680Q760,713 736.5,736.5Q713,760 680,760L274,760ZM686,280L280,280Q280,280 280,280Q280,280 280,280L280,400Q280,417 268.5,428.5Q257,440 240,440Q223,440 211.5,428.5Q200,417 200,400L200,280Q200,247 223.5,223.5Q247,200 280,200L686,200L652,166Q640,154 640.5,138Q641,122 652,110Q664,98 680.5,97.5Q697,97 709,109L812,212Q818,218 820.5,225Q823,232 823,240Q823,248 820.5,255Q818,262 812,268L709,371Q697,383 680.5,382.5Q664,382 652,370Q641,358 640.5,342Q640,326 652,314L686,280Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/restart_alt_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M393,828Q290,799 225,714.5Q160,630 160,520Q160,463 179,411.5Q198,360 233,317Q244,305 260,304.5Q276,304 289,317Q300,328 300.5,344Q301,360 290,374Q266,405 253,442Q240,479 240,520Q240,601 287.5,664.5Q335,728 410,751Q423,755 431.5,766Q440,777 440,790Q440,810 426,821.5Q412,833 393,828ZM567,828Q548,833 534,821Q520,809 520,789Q520,777 528.5,766Q537,755 550,751Q625,727 672.5,664Q720,601 720,520Q720,420 650,350Q580,280 480,280L477,280L493,296Q504,307 504,324Q504,341 493,352Q482,363 465,363Q448,363 437,352L353,268Q347,262 344.5,255Q342,248 342,240Q342,232 344.5,225Q347,218 353,212L437,128Q448,117 465,117Q482,117 493,128Q504,139 504,156Q504,173 493,184L477,200L480,200Q614,200 707,293Q800,386 800,520Q800,629 735,714Q670,799 567,828Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/save_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L647,120Q663,120 677.5,126Q692,132 703,143L817,257Q828,268 834,282.5Q840,297 840,313L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM760,314L646,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L760,760Q760,760 760,760Q760,760 760,760L760,314ZM480,720Q530,720 565,685Q600,650 600,600Q600,550 565,515Q530,480 480,480Q430,480 395,515Q360,550 360,600Q360,650 395,685Q430,720 480,720ZM280,400L560,400Q577,400 588.5,388.5Q600,377 600,360L600,280Q600,263 588.5,251.5Q577,240 560,240L280,240Q263,240 251.5,251.5Q240,263 240,280L240,360Q240,377 251.5,388.5Q263,400 280,400ZM200,314L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200L200,200L200,314Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/settings_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M433,880Q406,880 386.5,862Q367,844 363,818L354,752Q341,747 329.5,740Q318,733 307,725L245,751Q220,762 195,753Q170,744 156,721L109,639Q95,616 101,590Q107,564 128,547L181,507Q180,500 180,493.5Q180,487 180,480Q180,473 180,466.5Q180,460 181,453L128,413Q107,396 101,370Q95,344 109,321L156,239Q170,216 195,207Q220,198 245,209L307,235Q318,227 330,220Q342,213 354,208L363,142Q367,116 386.5,98Q406,80 433,80L527,80Q554,80 573.5,98Q593,116 597,142L606,208Q619,213 630.5,220Q642,227 653,235L715,209Q740,198 765,207Q790,216 804,239L851,321Q865,344 859,370Q853,396 832,413L779,453Q780,460 780,466.5Q780,473 780,480Q780,487 780,493.5Q780,500 778,507L831,547Q852,564 858,590Q864,616 850,639L802,721Q788,744 763,753Q738,762 713,751L653,725Q642,733 630,740Q618,747 606,752L597,818Q593,844 573.5,862Q554,880 527,880L433,880ZM440,800L519,800L533,694Q564,686 590.5,670.5Q617,655 639,633L738,674L777,606L691,541Q696,527 698,511.5Q700,496 700,480Q700,464 698,448.5Q696,433 691,419L777,354L738,286L639,328Q617,305 590.5,289.5Q564,274 533,266L520,160L441,160L427,266Q396,274 369.5,289.5Q343,305 321,327L222,286L183,354L269,418Q264,433 262,448Q260,463 260,480Q260,496 262,511Q264,526 269,541L183,606L222,674L321,632Q343,655 369.5,670.5Q396,686 427,694L440,800ZM482,620Q540,620 581,579Q622,538 622,480Q622,422 581,381Q540,340 482,340Q423,340 382.5,381Q342,422 342,480Q342,538 382.5,579Q423,620 482,620ZM480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/settings_backup_restore_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q354,840 257,763.5Q160,687 131,568Q127,553 137,540.5Q147,528 164,526Q180,524 193,532Q206,540 211,556Q235,646 310,703Q385,760 480,760Q597,760 678.5,678.5Q760,597 760,480Q760,363 678.5,281.5Q597,200 480,200Q411,200 351,232Q291,264 250,320L320,320Q337,320 348.5,331.5Q360,343 360,360Q360,377 348.5,388.5Q337,400 320,400L160,400Q143,400 131.5,388.5Q120,377 120,360L120,200Q120,183 131.5,171.5Q143,160 160,160Q177,160 188.5,171.5Q200,183 200,200L200,254Q251,190 324.5,155Q398,120 480,120Q555,120 620.5,148.5Q686,177 734.5,225.5Q783,274 811.5,339.5Q840,405 840,480Q840,555 811.5,620.5Q783,686 734.5,734.5Q686,783 620.5,811.5Q555,840 480,840ZM480,560Q447,560 423.5,536.5Q400,513 400,480Q400,447 423.5,423.5Q447,400 480,400Q513,400 536.5,423.5Q560,447 560,480Q560,513 536.5,536.5Q513,560 480,560Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/telegram_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"     android:tint="?android:attr/colorControlNormal">
    <path android:fillColor="@android:color/white" android:pathData="M12,0C5.373,0,0,5.373,0,12s5.373,12,12,12s12-5.373,12-12S18.627,0,12,0z    M17.562,8.161c-0.18,1.897-0.962,6.502-1.359,8.627c-0.168,0.9-0.5,1.201-0.82,1.23c-0.697,0.064-1.226-0.461-1.901-0.903   c-1.056-0.692-1.653-1.123-2.678-1.799c-1.185-0.781-0.417-1.21,0.258-1.911c0.177-0.184,3.247-2.977,3.307-3.23   c0.007-0.032,0.015-0.15-0.056-0.212s-0.174-0.041-0.248-0.024c-0.106,0.024-1.793,1.139-5.062,3.345   c-0.479,0.329-0.913,0.489-1.302,0.481c-0.428-0.009-1.252-0.242-1.865-0.442c-0.751-0.244-1.349-0.374-1.297-0.788   c0.027-0.216,0.324-0.437,0.892-0.663c3.498-1.524,5.831-2.529,6.998-3.015c3.333-1.386,4.025-1.627,4.477-1.635   C17.472,7.214,17.608,7.681,17.562,8.161z"/></vector>


================================================
FILE: app/src/main/res/drawable/timer_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M400,120Q383,120 371.5,108.5Q360,97 360,80Q360,63 371.5,51.5Q383,40 400,40L560,40Q577,40 588.5,51.5Q600,63 600,80Q600,97 588.5,108.5Q577,120 560,120L400,120ZM480,560Q497,560 508.5,548.5Q520,537 520,520L520,360Q520,343 508.5,331.5Q497,320 480,320Q463,320 451.5,331.5Q440,343 440,360L440,520Q440,537 451.5,548.5Q463,560 480,560ZM480,880Q406,880 340.5,851.5Q275,823 226,774Q177,725 148.5,659.5Q120,594 120,520Q120,446 148.5,380.5Q177,315 226,266Q275,217 340.5,188.5Q406,160 480,160Q542,160 599,180Q656,200 706,238L734,210Q745,199 762,199Q779,199 790,210Q801,221 801,238Q801,255 790,266L762,294Q800,344 820,401Q840,458 840,520Q840,594 811.5,659.5Q783,725 734,774Q685,823 619.5,851.5Q554,880 480,880ZM480,800Q596,800 678,718Q760,636 760,520Q760,404 678,322Q596,240 480,240Q364,240 282,322Q200,404 200,520Q200,636 282,718Q364,800 480,800ZM480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/transparent_drawable.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="@android:color/transparent" />
</shape>


================================================
FILE: app/src/main/res/drawable/tune_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q463,840 451.5,828.5Q440,817 440,800L440,640Q440,623 451.5,611.5Q463,600 480,600Q497,600 508.5,611.5Q520,623 520,640L520,680L800,680Q817,680 828.5,691.5Q840,703 840,720Q840,737 828.5,748.5Q817,760 800,760L520,760L520,800Q520,817 508.5,828.5Q497,840 480,840ZM160,760Q143,760 131.5,748.5Q120,737 120,720Q120,703 131.5,691.5Q143,680 160,680L320,680Q337,680 348.5,691.5Q360,703 360,720Q360,737 348.5,748.5Q337,760 320,760L160,760ZM320,600Q303,600 291.5,588.5Q280,577 280,560L280,520L160,520Q143,520 131.5,508.5Q120,497 120,480Q120,463 131.5,451.5Q143,440 160,440L280,440L280,400Q280,383 291.5,371.5Q303,360 320,360Q337,360 348.5,371.5Q360,383 360,400L360,560Q360,577 348.5,588.5Q337,600 320,600ZM480,520Q463,520 451.5,508.5Q440,497 440,480Q440,463 451.5,451.5Q463,440 480,440L800,440Q817,440 828.5,451.5Q840,463 840,480Q840,497 828.5,508.5Q817,520 800,520L480,520ZM640,360Q623,360 611.5,348.5Q600,337 600,320L600,160Q600,143 611.5,131.5Q623,120 640,120Q657,120 668.5,131.5Q680,143 680,160L680,200L800,200Q817,200 828.5,211.5Q840,223 840,240Q840,257 828.5,268.5Q817,280 800,280L680,280L680,320Q680,337 668.5,348.5Q657,360 640,360ZM160,280Q143,280 131.5,268.5Q120,257 120,240Q120,223 131.5,211.5Q143,200 160,200L480,200Q497,200 508.5,211.5Q520,223 520,240Q520,257 508.5,268.5Q497,280 480,280L160,280Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/update_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q405,840 339.5,811.5Q274,783 225.5,734.5Q177,686 148.5,620.5Q120,555 120,480Q120,405 148.5,339.5Q177,274 225.5,225.5Q274,177 339.5,148.5Q405,120 480,120Q562,120 635.5,155Q709,190 760,254L760,200Q760,183 771.5,171.5Q783,160 800,160Q817,160 828.5,171.5Q840,183 840,200L840,360Q840,377 828.5,388.5Q817,400 800,400L640,400Q623,400 611.5,388.5Q600,377 600,360Q600,343 611.5,331.5Q623,320 640,320L710,320Q669,264 609,232Q549,200 480,200Q363,200 281.5,281.5Q200,363 200,480Q200,597 281.5,678.5Q363,760 480,760Q575,760 650,703Q725,646 749,556Q754,540 767,532Q780,524 796,526Q813,528 823,540.5Q833,553 829,568Q800,687 703,763.5Q606,840 480,840ZM520,464L620,564Q631,575 631,592Q631,609 620,620Q609,631 592,631Q575,631 564,620L452,508Q446,502 443,494.5Q440,487 440,479L440,320Q440,303 451.5,291.5Q463,280 480,280Q497,280 508.5,291.5Q520,303 520,320L520,464Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/vk_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24" android:tint="?android:attr/colorControlNormal"><path android:fillColor="@android:color/white" android:pathData="M22.316,1.684C20.632,0,17.921,0,12.5,0h-1C6.079,0,3.368,0,1.684,1.684C0,3.368,0,6.079,0,11.5v1   c0,5.421,0,8.131,1.684,9.816S6.079,24,11.5,24h1c5.421,0,8.131,0,9.816-1.684C24,20.632,24,17.921,24,12.5v-1   C24,6.079,24,3.368,22.316,1.684z M19.503,17h-1.75c-0.667,0-0.863-0.532-2.05-1.719c-1.039-1.001-1.484-1.131-1.743-1.131   c-0.353,0-0.458,0.1-0.458,0.6v1.569c0,0.43-0.137,0.681-1.25,0.681c-1.854,0-3.892-1.126-5.339-3.202   c-2.17-3.041-2.763-5.34-2.763-5.803c0-0.26,0.1-0.495,0.6-0.495h1.751c0.447,0,0.615,0.196,0.783,0.68   c0.856,2.493,2.3,4.672,2.893,4.672c0.222,0,0.324-0.103,0.324-0.667V9.608c-0.065-1.186-0.696-1.284-0.696-1.706   c0-0.195,0.167-0.402,0.445-0.402h2.751c0.371,0,0.5,0.198,0.5,0.643v3.467c0,0.37,0.161,0.5,0.272,0.5   c0.223,0,0.408-0.13,0.816-0.538c1.261-1.409,2.151-3.578,2.151-3.578c0.112-0.26,0.316-0.495,0.762-0.495h1.75   c0.529,0,0.641,0.272,0.529,0.643c-0.223,1.02-2.355,4.023-2.355,4.023c-0.186,0.297-0.26,0.445,0,0.779   c0.186,0.26,0.797,0.779,1.205,1.261c0.752,0.846,1.319,1.559,1.477,2.051C20.254,16.75,20.003,17,19.503,17z"/></vector>


================================================
FILE: app/src/main/res/drawable/web_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M160,800Q127,800 103.5,776.5Q80,753 80,720L80,240Q80,207 103.5,183.5Q127,160 160,160L800,160Q833,160 856.5,183.5Q880,207 880,240L880,720Q880,753 856.5,776.5Q833,800 800,800L160,800ZM160,720L580,720L580,580L160,580L160,720Q160,720 160,720Q160,720 160,720ZM660,720L800,720Q800,720 800,720Q800,720 800,720L800,360L660,360L660,720ZM160,500L580,500L580,360L160,360L160,500Z"/>
</vector>



================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
    <monochrome android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_monochrome.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_monochrome_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_monochrome_round.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_monochrome_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/values/colors.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="primary_light">#FF236488</color>
</resources>


================================================
FILE: app/src/main/res/values/ic_launcher_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#F6F6F6</color>
</resources>


================================================
FILE: app/src/main/res/values/ic_launcher_monochrome_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_monochrome_background">#FFFFFF</color>
</resources>


================================================
FILE: app/src/main/res/values/strings.xml
================================================
<resources>
    <string name="app_name">Random</string>

    <!-- Common strings -->
    <string name="back">Back</string>
    <string name="settings">Settings</string>
    <string name="save">Save</string>
    <string name="cancel">Cancel</string>
    <string name="reset">Reset</string>
    <string name="edit">Edit</string>
    <string name="delete">Delete</string>
    <string name="rename">Rename</string>
    <string name="add">Add</string>
    <string name="generate">Generate</string>
    <string name="results">Results:</string>
    <string name="disabled">Disabled</string>
    <string name="enabled">Enabled</string>

    <!-- Main screen -->
    <string name="random">Random</string>
    <string name="numbers">Numbers</string>
    <string name="list">List</string>
    <string name="dice">Dice</string>
    <string name="lot">Lot</string>
    <string name="coin">Coin</string>

    <!-- Lot screen -->
    <string name="lot_title">Lot</string>
    <string name="vibration_on">Vibration: on</string>
    <string name="vibration_off">Vibration: off</string>
    <string name="show_all">Show all</string>
    <string name="reshuffle">Reshuffle</string>
    <string name="minimum_3_fields">At least 3 fields</string>
    <string name="minimum_1_marked">At least 1 marked</string>
    <string name="marked_more_than_total">Marked more than total</string>
    <string name="total_fields_label">Total fields</string>
    <string name="marked_fields_label">Marked fields</string>

    <!-- List components -->
    <string name="new_list">New list</string>
    <string name="list_name">List name</string>
    <string name="my_list">My list</string>
    <string name="item_1">Item 1</string>
    <string name="item_2">Item 2</string>
    <string name="item_3">Item 3</string>
    <string name="title">Title</string>
    <string name="use_preset">Use preset</string>
    <string name="share_preset">Share preset</string>
    <string name="preset_actions">Preset actions</string>
    <string name="rename_list">Rename list</string>
    <string name="new_name">New name</string>
    <string name="save_settings">Save settings</string>
    <string name="list_empty">List is empty</string>
    <string name="all_options_used">All options used up</string>

    <!-- Numbers screen -->
    <string name="number">Number</string>
    <string name="from">FROM</string>
    <string name="to">TO</string>
    <string name="history_cleared">Used numbers history cleared</string>
    <string name="enter_valid_numbers">Enter valid numbers in \'FROM\' and \'TO\'</string>
    <string name="count_must_be_positive">Count must be greater than 0</string>
    <string name="all_numbers_used">All numbers used</string>
    <string name="only_available_numbers">Only %1$d unused numbers available</string>

    <!-- Settings screen -->
    <string name="theme">Theme</string>
    <string name="theme_description">Choose app theme</string>
    <string name="system_theme">System</string>
    <string name="light_theme">Light</string>
    <string name="dark_theme">Dark</string>
    <string name="language">Language</string>
    <string name="language_description">Choose app language</string>
    <string name="language_system">System</string>
    <string name="language_english">English</string>
    <string name="language_russian">Russian</string>
    <string name="dynamic_colors">Dynamic colors</string>
    <string name="dynamic_colors_description">Adapt palette to wallpaper (Material You)</string>
    <string name="android_12_required">Android 12+ required</string>
    <string name="use_wallpaper_colors">Use wallpaper colors (Android 12+)</string>
    <string name="fab_size">FAB size</string>
    <string name="fab_size_description">Size of main action button on screens</string>
    <string name="fab_size_small">S (Small)</string>
    <string name="fab_size_small_desc">Compact size</string>
    <string name="fab_size_medium">M (Medium)</string>
    <string name="fab_size_medium_desc">Standard size</string>
    <string name="fab_size_large">L (Large)</string>
    <string name="fab_size_large_desc">Large size</string>
    <string name="loading">Loading...</string>
    <string name="open_after_save">Open after saving</string>
    <string name="roll_dice">Roll</string>
    <string name="dice_count">Dice count</string>
    <string name="sum">Sum</string>
    <string name="heads">Heads</string>
    <string name="tails">Tails</string>
    <string name="result">Result</string>
    <string name="swipe_hint">Swipe up to flip</string>
    <string name="generator_settings">Generator settings</string>
    <string name="result_count">Number of results</string>
    <string name="allow_repetitions">Allow repetitions</string>
    <string name="used_count">Used</string>
    <string name="reset_history">Reset used numbers history</string>

    <!-- Dialogs -->
    <string name="use_delay">Use delay</string>
    <string name="delay">Delay</string>
    <string name="seconds">sec</string>
    <string name="seconds_short">s</string>
    <string name="fixed_delay_1_second">Fixed delay: 1 second</string>
    <string name="close">Close</string>

    <string name="expandable_section_collapse">Collapse</string>
    <string name="expandable_section_expand">Expand</string>

    <!-- About Screen -->
    <string name="about_app">About App</string>
    <string name="version">Version</string>
    <string name="app_icon">App icon</string>
    <string name="made_with_love">Made with вќ¤пёЏ by ByteFlipper</string>
    <string name="contact_us">Contact Us</string>
    <!-- Categories -->
    <string name="support_feedback_category_title">Support &amp; Feedback</string>
    <string name="connect_with_us_category_title">Connect With Us</string>
    <string name="development_category_title">Development</string>
    <!-- Actions/Links -->
    <string name="bug_report_title">Bug Report</string>
    <string name="bug_report_subtitle">Please describe the problem and send it to us</string>
    <string name="rate_the_app_title">Rate the app</string>
    <string name="rate_the_app_subtitle">Rate the app on Google Play</string>
    <string name="other_apps_title">Other Apps</string>
    <string name="other_apps_subtitle">Our Other Apps</string>
    <string name="other_apps_url" translatable="false">https://www.google.com/</string>
    <string name="website_title">ByteFlipper Website</string>
    <string name="website_subtitle">Our Website</string>
    <string name="website_url" translatable="false">https://byteflipper.web.app/</string>
    <string name="vk_title">VK</string>
    <string name="vk_subtitle">Our community on VK</string>
    <string name="vk_url" translatable="false">https://vk.com/byteflipper</string>
    <string name="telegram_title">Telegram</string>
    <string name="telegram_subtitle">Our Telegram Channel</string>
    <string name="telegram_url" translatable="false">https://t.me/byte_flipper</string>
    <string name="youtube_title">YouTube</string>
    <string name="youtube_subtitle">Our YouTube Channel</string>
    <string name="youtube_url" translatable="false">https://www.youtube.com/</string>
    <string name="discord_title">Discord</string>
    <string name="discord_subtitle">Our Discord Server</string>
    <string name="discord_url" translatable="false">https://discord.gg/byteflipper</string>
    <string name="github_title">Github</string>
    <string name="github_subtitle">Our Github Repository</string>
    <string name="github_url" translatable="false">https://github.com/ByteFlipper-58/</string>
    <string name="source_code_title">Source Code</string>
    <string name="source_code_subtitle">Source code of the application on GitHub</string>
    <string name="source_code_url" translatable="false">https://github.com/ByteFlipper-58/random</string>
    <string name="error_no_browser_found">No browser found to open URL</string>
</resources>


================================================
FILE: app/src/main/res/values/themes.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.Random" parent="android:Theme.Material.Light.NoActionBar" />

    <style name="App.Starting" parent="Theme.SplashScreen">
        <item name="windowSplashScreenAnimatedIcon">@drawable/logo</item>
        <item name="postSplashScreenTheme">@style/Theme.Random</item>
    </style>
</resources>


================================================
FILE: app/src/main/res/values-night/themes.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.Random" parent="android:Theme.Material.Light.NoActionBar" />

    <style name="App.Starting" parent="Theme.SplashScreen">
        <item name="windowSplashScreenAnimatedIcon">@drawable/logo</item>
        <item name="postSplashScreenTheme">@style/Theme.Random</item>
    </style>
</resources>


================================================
FILE: app/src/main/res/values-ru/strings.xml
================================================
<resources>
    <string name="app_name">Рандом</string>

    <!-- Общие строки -->
    <string name="back">Назад</string>
    <string name="settings">Настройки</string>
    <string name="save">Сохранить</string>
    <string name="cancel">Отмена</string>
    <string name="reset">Сбросить</string>
    <string name="edit">Редактировать</string>
    <string name="delete">Удалить</string>
    <string name="rename">Переименовать</string>
    <string name="add">Добавить</string>
    <string name="generate">Сгенерировать</string>
    <string name="results">Результаты:</string>
    <string name="disabled">Отключено</string>
    <string name="enabled">Включено</string>

    <!-- Главный экран -->
    <string name="random">Рандом</string>
    <string name="numbers">Числа</string>
    <string name="list">Список</string>
    <string name="dice">Игральные кости</string>
    <string name="lot">Жребий</string>
    <string name="coin">Монетка</string>

    <!-- Экран жребия -->
    <string name="lot_title">Жребий</string>
    <string name="vibration_on">Вибрация: вкл</string>
    <string name="vibration_off">Вибрация: выкл</string>
    <string name="show_all">Показать все</string>
    <string name="reshuffle">Перетасовать</string>
    <string name="minimum_3_fields">Минимум 3 поля</string>
    <string name="minimum_1_marked">Минимум 1 отмеченное</string>
    <string name="marked_more_than_total">Отмеченных больше, чем всего</string>
    <string name="total_fields_label">Общее количество полей</string>
    <string name="marked_fields_label">Количество отмеченных</string>

    <!-- Компоненты списков -->
    <string name="new_list">Новый список</string>
    <string name="list_name">Название списка</string>
    <string name="my_list">Мой список</string>
    <string name="item_1">Элемент 1</string>
    <string name="item_2">Элемент 2</string>
    <string name="item_3">Элемент 3</string>
    <string name="title">Заголовок</string>
    <string name="use_preset">Использовать пресет</string>
    <string name="share_preset">Поделиться пресетом</string>
    <string name="preset_actions">Действия с пресетом</string>
    <string name="rename_list">Переименовать список</string>
    <string name="new_name">Новое название</string>
    <string name="save_settings">Сохранить параметры</string>
    <string name="list_empty">Список пуст</string>
    <string name="all_options_used">Все варианты закончились</string>

    <!-- Экран чисел -->
    <string name="number">Число</string>
    <string name="from">ОТ</string>
    <string name="to">ДО</string>
    <string name="history_cleared">История использованных чисел очищена</string>
    <string name="enter_valid_numbers">Введите корректные числа в поля \'ОТ\' и \'ДО\'</string>
    <string name="count_must_be_positive">Количество должно быть больше 0</string>
    <string name="all_numbers_used">Все числа использованы</string>
    <string name="only_available_numbers">Доступно только %1$d неиспользованных чисел</string>

    <!-- Экран настроек -->
    <string name="theme">Тема</string>
    <string name="theme_description">Выбор оформления приложения</string>
    <string name="system_theme">Системная</string>
    <string name="light_theme">Светлая</string>
    <string name="dark_theme">Тёмная</string>
    <string name="language">Язык</string>
    <string name="language_description">Выбор языка приложения</string>
    <string name="language_system">Системный</string>
    <string name="language_english">English</string>
    <string name="language_russian">Русский</string>
    <string name="dynamic_colors">Динамические цвета</string>
    <string name="dynamic_colors_description">Адаптация палитры к обоям (Material You)</string>
    <string name="android_12_required">Требуется Android 12+</string>
    <string name="use_wallpaper_colors">Использовать цвета обоев (Android 12+)</string>
    <string name="fab_size">Размер FAB</string>
    <string name="fab_size_description">Размер основной кнопки действия на экранах</string>
    <string name="fab_size_small">S (Small)</string>
    <string name="fab_size_small_desc">Компактный размер</string>
    <string name="fab_size_medium">M (Medium)</string>
    <string name="fab_size_medium_desc">Стандартный размер</string>
    <string name="fab_size_large">L (Large)</string>
    <string name="fab_size_large_desc">Крупный размер</string>
    <string name="loading">Загрузка...</string>
    <string name="open_after_save">Открыть после сохранения</string>
    <string name="roll_dice">Бросить</string>
    <string name="dice_count">Количество кубиков</string>
    <string name="sum">Сумма</string>
    <string name="heads">Орёл</string>
    <string name="tails">Решка</string>
    <string name="result">Результат</string>
    <string name="swipe_hint">Свайп вверх — подбросить</string>
    <string name="generator_settings">Настройки генерации</string>
    <string name="result_count">Количество результатов</string>
    <string name="allow_repetitions">Разрешить повторения</string>
    <string name="used_count">Использовано</string>
    <string name="reset_history">Сбросить историю использованных чисел</string>

    <!-- Диалоги -->
    <string name="use_delay">Использовать задержку</string>
    <string name="delay">Задержка</string>
    <string name="seconds">сек</string>
    <string name="seconds_short">с</string>
    <string name="fixed_delay_1_second">Фиксированная задержка: 1 секунда</string>
    <string name="close">Закрыть</string>
    <string name="error_no_browser_found">Браузер не найден для открытия URL</string>

    <string name="expandable_section_collapse">Свернуть</string>
    <string name="expandable_section_expand">Развернуть</string>

    <!-- About Screen -->
    <string name="about_app">О приложении</string>
    <string name="version">Версия</string>
    <string name="app_icon">Иконка приложения</string>
    <string name="made_with_love">Сделано с ❤️ ByteFlipper</string>
    <string name="contact_us">Связаться с нами</string>

    <!-- Categories -->
    <string name="support_feedback_category_title">Поддержка и отзывы</string>
    <string name="connect_with_us_category_title">Мы в сети</string>
    <string name="development_category_title">Разработка</string>

    <!-- Actions/Links -->
    <string name="bug_report_title">Сообщить об ошибке</string>
    <string name="bug_report_subtitle">Опишите проблему и отправьте нам</string>
    <string name="rate_the_app_title">Оценить приложение</string>
    <string name="rate_the_app_subtitle">Поставьте оценку в Google Play</string>
    <string name="other_apps_title">Другие приложения</string>
    <string name="other_apps_subtitle">Наши другие приложения</string>

    <string name="website_title">Сайт ByteFlipper</string>
    <string name="website_subtitle">Наш сайт</string>

    <string name="vk_title">ВКонтакте</string>
    <string name="vk_subtitle">Наше сообщество</string>

    <string name="telegram_title">Telegram</string>
    <string name="telegram_subtitle">Наш канал в Telegram</string>

    <string name="youtube_title">YouTube</string>
    <string name="youtube_subtitle">Наш канал на YouTube</string>

    <string name="discord_title">Discord</string>
    <string name="discord_subtitle">Наш сервер Discord</string>

    <string name="github_title">GitHub</string>
    <string name="github_subtitle">Наш репозиторий на GitHub</string>

    <string name="source_code_title">Исходный код</string>
    <string name="source_code_subtitle">Исходный код приложения на GitHub</string>
</resources>


================================================
FILE: app/src/main/res/xml/backup_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>


================================================
FILE: app/src/main/res/xml/data_extraction_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>


================================================
FILE: app/src/main/res/xml/locale_config.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<locale-config xmlns:android="http://schemas.android.com/apk/res/android">
   <locale android:name="en"/> <!-- English -->
   <locale android:name="ru"/> <!-- Russian -->
</locale-config>




================================================
FILE: app/src/test/java/com/byteflipper/random/ExampleUnitTest.kt
================================================
package com.byteflipper.random

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}


================================================
FILE: gradle/libs.versions.toml
================================================
[versions]
agp = "8.12.0"
browser = "1.8.0"
kotlin = "2.2.10"
coreKtx = "1.17.0"
junit = "4.13.2"
junitVersion = "1.3.0"
espressoCore = "3.7.0"
lifecycleRuntimeKtx = "2.9.2"
activityCompose = "1.10.1"
composeBom = "2025.08.01"
navigationCompose = "2.9.3"
materialIconsExtended = "1.7.8"
room = "2.7.2"
ksp = "2.2.0-2.0.2"
navigationComposeVersion = "2.9.3"
datastore = "1.1.1"
googleGmsGoogleServices = "4.4.3"
firebaseAnalytics = "23.0.0"
firebaseCrashlytics = "20.0.0"
googleFirebaseCrashlytics = "3.0.6"
firebaseMessaging = "25.0.0"
firebaseInappmessagingDisplay = "22.0.0"
playBilling = "8.0.0"
material3 = "1.3.2"
reorderable = "3.0.0"
appcompat = "1.7.0"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
androidx-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "materialIconsExtended" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
androidx-browser = { module = "androidx.browser:browser", version.ref = "browser" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationComposeVersion" }
androidx-datastore-preferences = { group = "androidx.datastore", name = "datastore-preferences", version.ref = "datastore" }
firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics", version.ref = "firebaseAnalytics" }
firebase-crashlytics = { group = "com.google.firebase", name = "firebase-crashlytics", version.ref = "firebaseCrashlytics" }
firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging", version.ref = "firebaseMessaging" }
firebase-inappmessaging-display = { group = "com.google.firebase", name = "firebase-inappmessaging-display", version.ref = "firebaseInappmessagingDisplay" }
play-billing = { group = "com.android.billingclient", name = "billing", version.ref = "playBilling" }
material3 = { group = "androidx.compose.material3", name = "material3", version.ref = "material3" }
reorderable = { module = "sh.calvin.reorderable:reorderable", version = "3.0.0" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
google-gms-google-services = { id = "com.google.gms.google-services", version.ref = "googleGmsGoogleServices" }
google-firebase-crashlytics = { id = "com.google.firebase.crashlytics", version.ref = "googleFirebaseCrashlytics" }




================================================
FILE: gradle/wrapper/gradle-wrapper.properties
================================================
#Thu Aug 14 22:02:28 CEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: .github/ISSUE_TEMPLATE.md
================================================
## рџђ› Bug Report

### Description
A clear and concise description of what the bug is.

### Steps to Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

### Expected Behavior
A clear and concise description of what you expected to happen.

### Actual Behavior
A clear and concise description of what actually happened.

### Device Information
- **Device**: [e.g. Samsung Galaxy S21]
- **Android Version**: [e.g. Android 13]
- **App Version**: [e.g. 1.0.0]

### Additional Context
Add any other context about the problem here.

---

## рџ’Ў Feature Request

### Description
A clear and concise description of what you want to happen.

### Use Case
Describe the use case for this feature.

### Additional Context
Add any other context or screenshots about the feature request here.

---

## вќ“ Question

### Description
A clear and concise description of your question.

### Additional Context
Add any other context or details that might help answer your question.

---

**Thank you for helping us improve Random!** рџЋІвњЁ



================================================
FILE: .github/PULL_REQUEST_TEMPLATE.md
================================================
## Description
Brief description of changes made in this PR.

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Code refactoring

## Testing
- [ ] Unit tests pass
- [ ] Tested on different Android versions
- [ ] Manual testing completed

## Screenshots (if applicable)
Add screenshots for UI changes or new features.

---

**Thank you for contributing to Random!** рџЋІвњЁ


