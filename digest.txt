Directory structure:
└── Random/
    ├── README.md
    ├── build.gradle.kts
    ├── CONTRIBUTING.md
    ├── gradle.properties
    ├── gradlew
    ├── gradlew.bat
    ├── LICENSE
    ├── README_EN.md
    ├── settings.gradle.kts
    ├── app/
    │   ├── build.gradle.kts
    │   ├── google-services.json
    │   ├── proguard-rules.pro
    │   └── src/
    │       ├── androidTest/
    │       │   └── java/
    │       │       └── com/
    │       │           └── byteflipper/
    │       │               └── random/
    │       │                   └── ExampleInstrumentedTest.kt
    │       ├── main/
    │       │   ├── AndroidManifest.xml
    │       │   ├── java/
    │       │   │   └── com/
    │       │   │       └── byteflipper/
    │       │   │           └── random/
    │       │   │               ├── MainActivity.kt
    │       │   │               ├── RandomApplication.kt
    │       │   │               ├── data/
    │       │   │               │   ├── db/
    │       │   │               │   │   ├── AppDatabase.kt
    │       │   │               │   │   └── Converters.kt
    │       │   │               │   ├── di/
    │       │   │               │   │   └── DatabaseModule.kt
    │       │   │               │   ├── preset/
    │       │   │               │   │   ├── ListPreset.kt
    │       │   │               │   │   ├── ListPresetDao.kt
    │       │   │               │   │   └── ListPresetRepository.kt
    │       │   │               │   └── settings/
    │       │   │               │       └── SettingsRepository.kt
    │       │   │               ├── domain/
    │       │   │               │   ├── coin/
    │       │   │               │   │   ├── CoinSide.kt
    │       │   │               │   │   └── usecase/
    │       │   │               │   │       └── TossCoinUseCase.kt
    │       │   │               │   ├── di/
    │       │   │               │   │   └── UseCaseModule.kt
    │       │   │               │   ├── dice/
    │       │   │               │   │   └── usecase/
    │       │   │               │   │       └── RollDiceUseCase.kt
    │       │   │               │   ├── lists/
    │       │   │               │   │   ├── ListSortingMode.kt
    │       │   │               │   │   └── usecase/
    │       │   │               │   │       ├── GenerateListResultsUseCase.kt
    │       │   │               │   │       └── SortListResultsUseCase.kt
    │       │   │               │   ├── lot/
    │       │   │               │   │   └── usecase/
    │       │   │               │   │       ├── GenerateMarkedIndicesUseCase.kt
    │       │   │               │   │       └── ValidateLotInputsUseCase.kt
    │       │   │               │   └── numbers/
    │       │   │               │       ├── SortingMode.kt
    │       │   │               │       └── usecase/
    │       │   │               │           ├── GenerateNumbersUseCase.kt
    │       │   │               │           └── ValidateNumberInputsUseCase.kt
    │       │   │               ├── navigation/
    │       │   │               │   ├── NavGraph.kt
    │       │   │               │   └── NavTransitions.kt
    │       │   │               ├── ui/
    │       │   │               │   ├── about/
    │       │   │               │   │   ├── AboutContent.kt
    │       │   │               │   │   ├── AboutScaffold.kt
    │       │   │               │   │   ├── AboutScreen.kt
    │       │   │               │   │   ├── AboutTopBar.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── AnimatedActionItem.kt
    │       │   │               │   │       ├── ExpandableSection.kt
    │       │   │               │   │       ├── HeroAppCard.kt
    │       │   │               │   │       ├── IconCard.kt
    │       │   │               │   │       ├── InfoCard.kt
    │       │   │               │   │       └── VersionInfoCard.kt
    │       │   │               │   ├── app/
    │       │   │               │   │   ├── AppRoot.kt
    │       │   │               │   │   └── AppViewModel.kt
    │       │   │               │   ├── coin/
    │       │   │               │   │   ├── CoinContent.kt
    │       │   │               │   │   ├── CoinOverlay.kt
    │       │   │               │   │   ├── CoinScaffold.kt
    │       │   │               │   │   ├── CoinScreen.kt
    │       │   │               │   │   ├── CoinTopBar.kt
    │       │   │               │   │   └── CoinViewModel.kt
    │       │   │               │   ├── components/
    │       │   │               │   │   ├── CustomChip.kt
    │       │   │               │   │   ├── EditorList.kt
    │       │   │               │   │   ├── GeneratorConfigDialog.kt
    │       │   │               │   │   ├── HapticsManager.kt
    │       │   │               │   │   ├── SizedFab.kt
    │       │   │               │   │   └── flip/
    │       │   │               │   │       ├── FlipCardController.kt
    │       │   │               │   │       ├── FlipCardDefaults.kt
    │       │   │               │   │       ├── FlipCardOverlay.kt
    │       │   │               │   │       └── FlipCardState.kt
    │       │   │               │   ├── dice/
    │       │   │               │   │   ├── DiceContent.kt
    │       │   │               │   │   ├── DiceScaffold.kt
    │       │   │               │   │   ├── DiceScreen.kt
    │       │   │               │   │   ├── DiceTopBar.kt
    │       │   │               │   │   ├── DiceViewModel.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── DiceDieFace.kt
    │       │   │               │   │       ├── DiceFabControls.kt
    │       │   │               │   │       ├── DiceGridLayout.kt
    │       │   │               │   │       └── DiceOverlay.kt
    │       │   │               │   ├── home/
    │       │   │               │   │   ├── HomeContent.kt
    │       │   │               │   │   ├── HomeScaffold.kt
    │       │   │               │   │   ├── HomeScreen.kt
    │       │   │               │   │   ├── HomeTopBar.kt
    │       │   │               │   │   ├── HomeViewModel.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── CreateListDialog.kt
    │       │   │               │   │       ├── MenuCard.kt
    │       │   │               │   │       ├── PresetActionButton.kt
    │       │   │               │   │       ├── PresetButton.kt
    │       │   │               │   │       ├── PresetCard.kt
    │       │   │               │   │       ├── PresetList.kt
    │       │   │               │   │       ├── PresetQuickActionButton.kt
    │       │   │               │   │       └── RenameListDialog.kt
    │       │   │               │   ├── lists/
    │       │   │               │   │   ├── ListContent.kt
    │       │   │               │   │   ├── ListScaffold.kt
    │       │   │               │   │   ├── ListScreen.kt
    │       │   │               │   │   ├── ListTopBar.kt
    │       │   │               │   │   ├── ListViewModel.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── ListFabControls.kt
    │       │   │               │   │       ├── ListRenameDialog.kt
    │       │   │               │   │       ├── ListResultsDisplay.kt
    │       │   │               │   │       ├── ListSaveDialog.kt
    │       │   │               │   │       └── ListSortingMode.kt
    │       │   │               │   ├── lot/
    │       │   │               │   │   ├── LotContent.kt
    │       │   │               │   │   ├── LotScaffold.kt
    │       │   │               │   │   ├── LotScreen.kt
    │       │   │               │   │   ├── LotTopBar.kt
    │       │   │               │   │   ├── LotViewModel.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── LotColorUtils.kt
    │       │   │               │   │       ├── LotFab.kt
    │       │   │               │   │       ├── LotFabMode.kt
    │       │   │               │   │       ├── LotGrid.kt
    │       │   │               │   │       ├── LotGridCard.kt
    │       │   │               │   │       ├── LotGridLayout.kt
    │       │   │               │   │       ├── LotModels.kt
    │       │   │               │   │       └── LotOverlay.kt
    │       │   │               │   ├── numbers/
    │       │   │               │   │   ├── NumbersContent.kt
    │       │   │               │   │   ├── NumbersScaffold.kt
    │       │   │               │   │   ├── NumbersScreen.kt
    │       │   │               │   │   ├── NumbersTopBar.kt
    │       │   │               │   │   ├── NumbersViewModel.kt
    │       │   │               │   │   └── components/
    │       │   │               │   │       ├── NumbersFabControls.kt
    │       │   │               │   │       ├── NumbersResetDialog.kt
    │       │   │               │   │       ├── NumbersResultsDisplay.kt
    │       │   │               │   │       └── NumbersUiUtils.kt
    │       │   │               │   ├── settings/
    │       │   │               │   │   ├── SettingsContent.kt
    │       │   │               │   │   ├── SettingsScaffold.kt
    │       │   │               │   │   ├── SettingsScreen.kt
    │       │   │               │   │   ├── SettingsTopBar.kt
    │       │   │               │   │   ├── SettingsViewModel.kt
    │       │   │               │   │   ├── appearance/
    │       │   │               │   │   │   ├── SettingsAppearanceContent.kt
    │       │   │               │   │   │   ├── SettingsAppearanceScaffold.kt
    │       │   │               │   │   │   └── SettingsAppearanceScreen.kt
    │       │   │               │   │   ├── components/
    │       │   │               │   │   │   ├── PreferenceCategory.kt
    │       │   │               │   │   │   ├── RadioButtonGroupPreference.kt
    │       │   │               │   │   │   ├── RadioButtonPreference.kt
    │       │   │               │   │   │   ├── SettingsCategoryCard.kt
    │       │   │               │   │   │   └── SwitchPreference.kt
    │       │   │               │   │   └── general/
    │       │   │               │   │       ├── SettingsGeneralContent.kt
    │       │   │               │   │       ├── SettingsGeneralScaffold.kt
    │       │   │               │   │       └── SettingsGeneralScreen.kt
    │       │   │               │   ├── setup/
    │       │   │               │   │   ├── MaterialYouVectorDrawable.kt
    │       │   │               │   │   ├── PermissionIconCollage.kt
    │       │   │               │   │   ├── SetupBottomBar.kt
    │       │   │               │   │   ├── SetupScreen.kt
    │       │   │               │   │   ├── SetupViewModel.kt
    │       │   │               │   │   ├── SineWaveLine.kt
    │       │   │               │   │   └── SplashScreen.kt
    │       │   │               │   └── theme/
    │       │   │               │       ├── Color.kt
    │       │   │               │       ├── Dimens.kt
    │       │   │               │       ├── Shapes.kt
    │       │   │               │       ├── Theme.kt
    │       │   │               │       └── Type.kt
    │       │   │               └── utils/
    │       │   │                   ├── ChromeCustomTabUtil.kt
    │       │   │                   └── Constants.kt
    │       │   └── res/
    │       │       ├── resources.properties
    │       │       ├── drawable/
    │       │       │   ├── add_24px.xml
    │       │       │   ├── apps_24px.xml
    │       │       │   ├── arrow_back_24px.xml
    │       │       │   ├── autorenew_24px.xml
    │       │       │   ├── bolt_24px.xml
    │       │       │   ├── bug_report_24px.xml
    │       │       │   ├── campaign_24px.xml
    │       │       │   ├── celebration_24px.xml
    │       │       │   ├── check_24px.xml
    │       │       │   ├── check_box_24px.xml
    │       │       │   ├── check_circle_24px.xml
    │       │       │   ├── circle_notifications_24px.xml
    │       │       │   ├── code_24px.xml
    │       │       │   ├── colors_24px.xml
    │       │       │   ├── contrast_24px.xml
    │       │       │   ├── dark_mode_24px.xml
    │       │       │   ├── delete_24px.xml
    │       │       │   ├── edit_24px.xml
    │       │       │   ├── explosion_24px.xml
    │       │       │   ├── favorite_24px.xml
    │       │       │   ├── format_size_24px.xml
    │       │       │   ├── gavel_24px.xml
    │       │       │   ├── github_24.xml
    │       │       │   ├── ic_launcher_background.xml
    │       │       │   ├── ic_launcher_foreground.xml
    │       │       │   ├── ifl_24px.xml
    │       │       │   ├── info_24px.xml
    │       │       │   ├── light_mode_24px.xml
    │       │       │   ├── list_alt_24px.xml
    │       │       │   ├── looks_one_24px.xml
    │       │       │   ├── mobile_vibrate_24px.xml
    │       │       │   ├── mobile_vibrate_off_24px.xml
    │       │       │   ├── music_note_24px.xml
    │       │       │   ├── music_off_24px.xml
    │       │       │   ├── news_24px.xml
    │       │       │   ├── night_sight_auto_24px.xml
    │       │       │   ├── numbers_24px.xml
    │       │       │   ├── paid_24px.xml
    │       │       │   ├── palette_24px.xml
    │       │       │   ├── person_apron_24px.xml
    │       │       │   ├── privacy_tip_24px.xml
    │       │       │   ├── rate_review_24px.xml
    │       │       │   ├── release_alert_24px.xml
    │       │       │   ├── repeat_24px.xml
    │       │       │   ├── restart_alt_24px.xml
    │       │       │   ├── save_24px.xml
    │       │       │   ├── settings_24px.xml
    │       │       │   ├── settings_backup_restore_24px.xml
    │       │       │   ├── sort_24px.xml
    │       │       │   ├── star_shine_24px.xml
    │       │       │   ├── telegram_24.xml
    │       │       │   ├── timer_24px.xml
    │       │       │   ├── transparent_drawable.xml
    │       │       │   ├── tune_24px.xml
    │       │       │   ├── update_24px.xml
    │       │       │   ├── vk_24.xml
    │       │       │   └── web_24px.xml
    │       │       ├── font/
    │       │       │   └── montserrat_bold.xml
    │       │       ├── mipmap-anydpi-v26/
    │       │       │   ├── ic_launcher.xml
    │       │       │   ├── ic_launcher_monochrome.xml
    │       │       │   ├── ic_launcher_monochrome_round.xml
    │       │       │   └── ic_launcher_round.xml
    │       │       ├── mipmap-hdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-mdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   ├── ic_launcher_foreground.webp
    │       │       │   ├── ic_launcher_monochrome.webp
    │       │       │   ├── ic_launcher_monochrome_foreground.webp
    │       │       │   ├── ic_launcher_monochrome_round.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── values/
    │       │       │   ├── colors.xml
    │       │       │   ├── font_certs.xml
    │       │       │   ├── ic_launcher_background.xml
    │       │       │   ├── ic_launcher_monochrome_background.xml
    │       │       │   ├── strings.xml
    │       │       │   └── themes.xml
    │       │       ├── values-be/
    │       │       │   └── strings.xml
    │       │       ├── values-night/
    │       │       │   └── themes.xml
    │       │       ├── values-pl/
    │       │       │   └── strings.xml
    │       │       ├── values-ru/
    │       │       │   └── strings.xml
    │       │       ├── values-uk/
    │       │       │   └── strings.xml
    │       │       └── xml/
    │       │           ├── backup_rules.xml
    │       │           ├── data_extraction_rules.xml
    │       │           └── locale_config.xml
    │       └── test/
    │           └── java/
    │               └── com/
    │                   └── byteflipper/
    │                       └── random/
    │                           └── ExampleUnitTest.kt
    ├── gradle/
    │   ├── libs.versions.toml
    │   └── wrapper/
    │       └── gradle-wrapper.properties
    └── .github/
        ├── ISSUE_TEMPLATE.md
        └── PULL_REQUEST_TEMPLATE.md

================================================
FILE: README.md
================================================
Error reading file with 'cp1251': 'charmap' codec can't decode byte 0x98 in position 1502: character maps to <undefined>


================================================
FILE: build.gradle.kts
================================================
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.56")
    }
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    alias(libs.plugins.google.gms.google.services) apply false
    alias(libs.plugins.google.firebase.crashlytics) apply false
    alias(libs.plugins.ksp) apply false
}


================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to Random

Thank you for your interest in contributing to the Random app! This document provides guidelines and information for contributors.

## рџљЂ Getting Started

### Prerequisites
- Android Studio Hedgehog or later
- Android SDK API 28+
- Kotlin 1.9+
- JDK 11+

### Setup
1. Fork the repository
2. Clone your fork: `git clone https://github.com/YOUR_USERNAME/Random.git`
3. Open the project in Android Studio
4. Sync Gradle files and build the project

## рџ›  Development Guidelines

### Code Style
- Follow Kotlin coding conventions
- Use meaningful variable and function names
- Add comments for complex logic
- Keep functions small and focused

### Architecture
- Follow MVVM pattern with Repository pattern
- Use Jetpack Compose for UI
- Implement proper separation of concerns
- Use dependency injection where appropriate

### Testing
- Write unit tests for business logic
- Test UI components with Compose testing
- Ensure all new features have test coverage

## рџ“ќ Pull Request Process

1. **Create a feature branch** from `main`
2. **Make your changes** following the guidelines above
3. **Test thoroughly** on different Android versions
4. **Update documentation** if needed
5. **Submit a PR** with a clear description

### PR Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Code refactoring

## Testing
- [ ] Unit tests pass
- [ ] UI tests pass
- [ ] Tested on different devices

## Screenshots (if applicable)
Add screenshots for UI changes
```

## рџђ› Bug Reports

When reporting bugs, please include:
- Device model and Android version
- Steps to reproduce
- Expected vs actual behavior
- Screenshots or screen recordings
- Logs (if applicable)

## рџ’Ў Feature Requests

For feature requests:
- Describe the use case
- Explain why it's needed
- Provide examples if possible
- Consider implementation complexity

## рџ“љ Resources

- [Kotlin Documentation](https://kotlinlang.org/docs/home.html)
- [Jetpack Compose](https://developer.android.com/jetpack/compose)
- [Material 3 Design](https://m3.material.io/)
- [Android Developer Guide](https://developer.android.com/guide)

## рџ¤ќ Community

- Join our [Discord server](https://discord.gg/byteflipper)
- Follow us on [Telegram](https://t.me/byte_flipper)
- Check out our [GitHub organization](https://github.com/ByteFlipper-58)

## рџ“„ License

By contributing, you agree that your contributions will be licensed under the MIT License.

---

Thank you for contributing to Random! рџЋІвњЁ



================================================
FILE: gradle.properties
================================================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

org.gradle.caching=true
org.gradle.daemon=true
org.gradle.parallel=true
kotlin.incremental=true
kotlin.compiler.execution.strategy=in-process


================================================
FILE: gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2024 ByteFlipper

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: README_EN.md
================================================
# Random вЂ” Random Generator рџЋІвњЁ

<div align="center">
  <img src="app/src/main/ic_launcher-playstore.png" alt="Random App Logo" width="120" height="120">
  <h3>When the choice is difficult вЂ” trust randomness</h3>
  <p>One tap вЂ” and the decision is ready</p>
  <p><a href="README.md">рџ‡·рџ‡є Р§РёС‚Р°С‚СЊ РЅР° СЂСѓСЃСЃРєРѕРј</a></p>
</div>

![Android 9+](https://img.shields.io/badge/Android-9%2B-3DDC84?logo=android&logoColor=white)
![Made with Kotlin](https://img.shields.io/badge/Made%20with-Kotlin-7F52FF?logo=kotlin&logoColor=white)
![Jetpack Compose](https://img.shields.io/badge/Jetpack%20Compose-UI-4285F4)
![Material 3](https://img.shields.io/badge/Material%203-Design-FF6F00)
![Privacy friendly](https://img.shields.io/badge/Privacy-friendly-00BFA5)
![No ads](https://img.shields.io/badge/No%20ads-%20-4CAF50)
![Offline](https://img.shields.io/badge/Works-Offline-795548)
![MIT](https://img.shields.io/badge/License-MIT-black)

## рџљЂ Features

- рџ”ў **Numbers**: set FROM-TO range, get 1-100 results. Available without repetitions and with beautiful "flip" animation.
- рџ“‹ **Lists**: enter your options or use presets. Choose random elements, consider "already dropped" ones.
- рџЋІ **Dice**: roll 1-10 dice, watch animation and sum of points.
- рџЋЇ **Lot**: grid of cards with marked cells вЂ” "show all" or "shuffle" in one tap.
- рџЄ™ **Coin**: realistic toss вЂ” heads or tails.
- вљ™пёЏ **Settings**: system/light/dark theme, dynamic colors (Material You), action button size.

## рџ“± How to use

### рџ”ў Numbers
1. Enter FROM and TO
2. Press "generate" в†’ get result(s)
3. Want without repetitions or delay? Check "Generator settings"

### рџ“‹ Lists
1. Add items (each on a new line) or open a saved list
2. Press "generate" в†’ random elements will drop
3. Save the list as a preset вЂ” it will appear on the main screen

### рџЋІ Dice
1. Choose the number of dice (1-10)
2. Press "roll" or tap on individual dice
3. Watch the total value

### рџЋЇ Lot
1. Specify the total number of cards and how many are marked
2. Generate and open вЂ” "Show all" or "Shuffle"

### рџЄ™ Coin
1. Swipe up on the coin or tap the button
2. Find out what came up вЂ” Heads or Tails

## рџ”ђ Privacy and convenience

- рџ”ђ **No accounts**, tracking or analytics
- рџ“µ **Works offline**, internet not required
- рџ’ѕ **Data and settings** stored locally on your device
- рџЊ“ **Dark theme support** and dynamic colors (Material You)
- рџЋЁ **Modern Material 3** design

## вќ“ FAQ

**Will there be repetitions during generation?**
> Can be enabled/disabled. For numbers and lists there is a "no repetitions" mode.

**Will my lists be saved?**
> Yes. You can save as a preset and quickly open from the main screen.

**Is there advertising or paid subscriptions?**
> No. The app is ad-free and payment-free.

**Do I need internet?**
> No, everything works locally.

## рџ“Ґ Download

- [Releases](https://github.com/ByteFlipper-58/Random/releases) tab (if not available вЂ” build the app in Android Studio)

## рџ›  Technologies

- **Language**: Kotlin
- **UI Framework**: Jetpack Compose
- **Design**: Material 3
- **Minimum Android version**: API 28 (Android 9.0)
- **Target Android version**: API 36 (Android 14)

## рџ¤ќ Feedback

Comments, ideas and suggestions are welcome! Leave an [issue](https://github.com/ByteFlipper-58/Random/issues) or suggest an improvement via [pull request](https://github.com/ByteFlipper-58/Random/pulls).

## рџ“„ License

MIT вЂ” use freely.

---

<div align="center">
  <p>Made with вќ¤пёЏ by <strong>ByteFlipper</strong> team</p>
</div>



================================================
FILE: settings.gradle.kts
================================================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
        maven { url = uri("https://jitpack.io") }
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
    }
}

rootProject.name = "Random"
include(":app")


================================================
FILE: app/build.gradle.kts
================================================
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
    alias(libs.plugins.google.gms.google.services)
    alias(libs.plugins.google.firebase.crashlytics)
}

apply(plugin = "com.google.dagger.hilt.android")

android {
    namespace = "com.byteflipper.random"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.byteflipper.random"
        minSdk = 26
        targetSdk = 36
        versionCode = 4
        versionName = "v1.1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlin {
        compilerOptions {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_11)
        }
    }
    buildFeatures {
        compose = true
        buildConfig = true
    }
}

dependencies {
    // AndroidX Рё Compose
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.appcompat)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.datastore.preferences)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.browser)
    implementation("net.kibotu:androidx-splashscreen-compose:1.0.0")

    // Firebase
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.messaging)
    implementation(libs.firebase.inappmessaging.display)

    // Play Billing Рё РїСЂРѕС‡РµРµ
    implementation(libs.play.billing)
    implementation(libs.reorderable)

    // Hilt
    implementation("com.google.dagger:hilt-android:2.56")
    implementation("androidx.hilt:hilt-navigation-compose:1.2.0")
    implementation(libs.androidx.ui.text.google.fonts)
    ksp("com.google.dagger:hilt-compiler:2.56")

    // Room annotation processor
    ksp(libs.androidx.room.compiler)

    implementation("com.github.racra:smooth-corner-rect-android-compose:v1.0.0")
    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5")

    // Tests
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


================================================
FILE: app/google-services.json
================================================
{
  "project_info": {
    "project_number": "38255035757",
    "project_id": "random-c528e",
    "storage_bucket": "random-c528e.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:38255035757:android:6cdda94a14587238a68664",
        "android_client_info": {
          "package_name": "com.byteflipper.random"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "AIzaSyDlHMXNsASeyTn6qo9k4VVVY_xyVZz-6rc"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}


================================================
FILE: app/proguard-rules.pro
================================================
# --- РћСЃРЅРѕРІРЅС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ (РЅСѓР¶РЅС‹ РґР»СЏ Р°РЅРЅРѕС‚Р°С†РёР№/Р»РёРЅРёР№ СЃС‚РµРєР°) ---
-keepattributes *Annotation*,InnerClasses,Signature
# (РµСЃР»Рё С…РѕС‚РёС‚Рµ СЃРѕС…СЂР°РЅСЏС‚СЊ РЅРѕРјРµСЂР° СЃС‚СЂРѕРє РґР»СЏ СѓРґРѕР±РЅРѕРіРѕ Р°РЅР°Р»РёР·Р° РєСЂР°С€РµР№ вЂ” СЂР°СЃРєРѕРјРјРµРЅС‚РёСЂСѓР№С‚Рµ)
#-keepattributes SourceFile,LineNumberTable

# --- Kotlin metadata (РЅСѓР¶РЅРѕ РґР»СЏ РєРѕСЂСЂРµРєС‚РЅРѕР№ СЂР°Р±РѕС‚С‹ РЅРµРєРѕС‚РѕСЂС‹С… Р±РёР±Р»РёРѕС‚РµРє Рё СЂРµС„Р»РµРєСЃРёРё) ---
-keep class kotlin.Metadata { *; }

# --- Keep РґР»СЏ Room: СЃСѓС‰РЅРѕСЃС‚Рё, DAO Рё TypeConverters ---
# РњС‹ РґРµСЂР¶РёРј РїР°РєРµС‚С‹ СЃ Р±Р°Р·РѕР№ РґР°РЅРЅС‹С… Рё СЃСѓС‰РЅРѕСЃС‚СЏРјРё С‡С‚РѕР±С‹ KSP/Room-СЃРіРµРЅРµСЂРёСЂРѕРІР°РЅРЅС‹Рµ РєР»Р°СЃСЃС‹ РєРѕСЂСЂРµРєС‚РЅРѕ СЂР°Р±РѕС‚Р°Р»Рё РїРѕСЃР»Рµ РѕР±С„СѓСЃРєР°С†РёРё.
-keep class com.byteflipper.random.data.db.** { *; }
-keep class com.byteflipper.random.data.preset.** { *; }

# РЎРѕС…СЂР°РЅСЏРµРј РјРµС‚РѕРґС‹ РїРѕРјРµС‡РµРЅРЅС‹Рµ @TypeConverter (РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ Room РїСЂРё РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРё С‚РёРїРѕРІ)
-keepclassmembers class * {
    @androidx.room.TypeConverter public *;
}

# --- Firebase & Google Play (Р°РЅР°Р»РёР·/РєСЂР°С€Р»РёС‚РёРєСЃ/messaging/in-app, Р±РёР»Р»РёРЅРі) ---
# Play Billing РєР»РёРµРЅС‚ РёСЃРїРѕР»СЊР·СѓРµС‚ reflection/РёРЅС‚РµСЂС„РµР№СЃС‹ вЂ” РґРµСЂР¶РёРј.
-keep class com.android.billingclient.** { *; }

# Firebase / Google Play СЃРµСЂРІРёСЃС‹ вЂ” РґРµСЂР¶РёРј РїСѓР±Р»РёС‡РЅС‹Рµ API (РїСЂРµРґРѕС‚РІСЂР°С‚РёС‚СЊ РїРѕС‚РµРЅС†РёР°Р»СЊРЅС‹Рµ РїСЂРѕР±Р»РµРјС‹ РїСЂРё РѕР±С„СѓСЃРєР°С†РёРё).
-keep class com.google.firebase.** { *; }
-keep class com.google.android.gms.** { *; }

# Р•СЃР»Рё Сѓ РІР°СЃ РµСЃС‚СЊ РєР»Р°СЃСЃС‹, РЅР°СЃР»РµРґСѓСЋС‰РёРµ FirebaseMessagingService / FirebaseMessagingReceiver вЂ” РґРµСЂР¶РёРј РёС… СЃРёРіРЅР°С‚СѓСЂС‹
-keep class * extends com.google.firebase.messaging.FirebaseMessagingService { *; }

# --- РЎС‚РѕСЂРѕРЅРЅРёРµ РЅРµР±РѕР»СЊС€РёРµ Р±РёР±Р»РёРѕС‚РµРєРё, РёСЃРїРѕР»СЊР·СѓРµРјС‹Рµ РІ РїСЂРѕРµРєС‚Рµ ---
# Splashscreen lib (net.kibotu) вЂ” РґРµСЂР¶РёРј, С‚.Рє. РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РІ MainActivity С‡РµСЂРµР· API.
-keep class net.kibotu.splashscreen.** { *; }

# --- РЈС‚РёР»РёС‚С‹/РєР»Р°СЃСЃС‹, РёСЃРїРѕР»СЊР·СѓРµРјС‹Рµ РёР· XML/РёРЅС‚РµРЅС‚РѕРІ (РЅР°РїСЂРёРјРµСЂ, CustomTabs helper) ---
# Р•СЃР»Рё Сѓ РІР°СЃ РµСЃС‚СЊ РєР»Р°СЃСЃС‹, РєРѕС‚РѕСЂС‹Рµ РІС‹Р·С‹РІР°СЋС‚СЃСЏ РёР· РјР°РЅРёС„РµСЃС‚Р° / С‡РµСЂРµР· reflection, РїРµСЂРµС‡РёСЃР»РёС‚Рµ/РґРµСЂР¶РёС‚Рµ РёС….
-keep class com.byteflipper.random.utils.** { *; }

# --- РћР±С‰РёРµ РїСЂР°РІРёР»Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё РґР»СЏ Р±РёР±Р»РёРѕС‚РµРє, РёСЃРїРѕР»СЊР·СѓСЋС‰РёС… reflection ---
-dontwarn com.google.firebase.**
-dontwarn com.android.billingclient.**
-dontwarn com.google.android.gms.**
# (РѕСЃС‚Р°РІСЊС‚Рµ СЌС‚Рё dontwarn, С‡С‚РѕР±С‹ R8 РЅРµ С€СѓРјРµР» РїРѕ СЃС‚РѕСЂРѕРЅРЅРёРј Р±РёР±Р»РёРѕС‚РµРєР°Рј)

# --- РћРїС†РёРѕРЅР°Р»СЊРЅРѕ: РѕСЃС‚Р°РІРёС‚СЊ РёРјРµРЅР° РґР»СЏ СѓРґРѕР±СЃС‚РІР° РѕС‚Р»Р°РґРєРё (РµСЃР»Рё РЅСѓР¶РЅРѕ) ---
#-keepnames class com.byteflipper.random.**

# --- РџСЂРёРјРµС‡Р°РЅРёРµ РїРѕ Crashlytics (РІР°Р¶РЅРѕ) ---
# РџСЂРё РІРєР»СЋС‡С‘РЅРЅРѕРј minify/shrink: РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ Р·Р°РіСЂСѓР¶Р°Р№С‚Рµ mapping.txt РІ Firebase Crashlytics РґР»СЏ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РєРѕСЂСЂРµРєС‚РЅРѕР№ РґРµРѕР±С„СѓСЃРєР°С†РёРё РѕС‚С‡РµС‚РѕРІ РѕР± РѕС€РёР±РєР°С….
# (СЃРј. firebase setup / gradle task: uploadCrashlyticsMappingFile)


================================================
FILE: app/src/androidTest/java/com/byteflipper/random/ExampleInstrumentedTest.kt
================================================
package com.byteflipper.random

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.byteflipper.random", appContext.packageName)
    }
}


================================================
FILE: app/src/main/AndroidManifest.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Required for Google Play Billing -->
    <uses-permission android:name="com.android.vending.BILLING" />
    <uses-permission android:name="android.permission.VIBRATE" />

    <application
        android:name=".RandomApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:localeConfig="@xml/locale_config"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Random">
        <service
            android:name="androidx.appcompat.app.AppLocalesMetadataHolderService"
            android:enabled="false"
            android:exported="false">
            <meta-data
                android:name="autoStoreLocales"
                android:value="true" />
        </service>
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/App.Starting">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


================================================
FILE: app/src/main/java/com/byteflipper/random/MainActivity.kt
================================================
package com.byteflipper.random

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.core.view.WindowCompat
import com.byteflipper.random.ui.app.AppRoot
import com.byteflipper.random.ui.theme.RandomTheme
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import androidx.lifecycle.lifecycleScope
import com.byteflipper.random.ui.setup.HeartBeatAnimation
import net.kibotu.splashscreen.SplashScreenDecorator
import net.kibotu.splashscreen.splash
import kotlin.time.Duration.Companion.milliseconds
import kotlin.time.Duration.Companion.seconds

@AndroidEntryPoint
class MainActivity : AppCompatActivity() {

    private var splashScreen: SplashScreenDecorator? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        if (savedInstanceState == null) {
            showSplash()
        }
        setTheme(R.style.Theme_Random)
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        WindowCompat.setDecorFitsSystemWindows(window, false)

        setContent {
            RandomTheme { AppRoot() }
        }

        lifecycleScope.launch {
            delay(1.seconds)
            splashScreen?.shouldKeepOnScreen = false
            delay(3.seconds)
            splashScreen?.dismiss()
        }
    }

    private fun showSplash() {
        val exitDuration = 800L
        val fadeDurationOffset = 200L

        splashScreen = splash {
            content {
                exitAnimationDuration = exitDuration
                composeViewFadeDurationOffset = fadeDurationOffset
                RandomTheme {
                    HeartBeatAnimation(
                        isVisible = isVisible.value,
                        exitAnimationDuration = exitAnimationDuration.milliseconds,
                        onStartExitAnimation = { startExitAnimation() }
                    )
                }
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/RandomApplication.kt
================================================
package com.byteflipper.random

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class RandomApplication : Application() {
    override fun onCreate() {
        super.onCreate()
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/AppDatabase.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetDao

@Database(
    entities = [ListPreset::class],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun listPresetDao(): ListPresetDao
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/Converters.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.TypeConverter

class Converters {
    @TypeConverter
    fun fromString(value: String?): List<String>? = when (value) {
        null -> null
        "" -> emptyList()
        else -> value.split("\u0001").map { it }
    }

    @TypeConverter
    fun listToString(list: List<String>?): String? = when (list) {
        null -> null
        emptyList<String>() -> ""
        else -> list.joinToString("\u0001")
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/di/DatabaseModule.kt
================================================
package com.byteflipper.random.data.di

import android.content.Context
import androidx.room.Room
import com.byteflipper.random.data.db.AppDatabase
import com.byteflipper.random.data.db.Converters
import com.byteflipper.random.data.preset.ListPresetDao
import com.byteflipper.random.data.preset.ListPresetRepository
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.utils.Constants.DATABASE_NAME
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    @Provides
    @Singleton
    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {
        return Room.databaseBuilder(
            context.applicationContext,
            AppDatabase::class.java,
            DATABASE_NAME
        )
            .fallbackToDestructiveMigration()
            .build()
    }

    @Provides
    @Singleton
    fun provideListPresetDao(database: AppDatabase): ListPresetDao {
        return database.listPresetDao()
    }

    @Provides
    @Singleton
    fun provideListPresetRepository(dao: ListPresetDao): ListPresetRepository {
        return ListPresetRepository(dao)
    }

    @Provides
    @Singleton
    fun provideSettingsRepository(@ApplicationContext context: Context): SettingsRepository {
        return SettingsRepository(context.applicationContext)
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPreset.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "list_presets")
data class ListPreset(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    val name: String,
    val items: List<String>
)





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetDao.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import kotlinx.coroutines.flow.Flow

@Dao
interface ListPresetDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun upsert(preset: ListPreset): Long

    @Update
    suspend fun update(preset: ListPreset)

    @Delete
    suspend fun delete(preset: ListPreset)

    @Query("SELECT * FROM list_presets ORDER BY name ASC")
    fun observeAll(): Flow<List<ListPreset>>

    @Query("SELECT * FROM list_presets WHERE id = :id")
    suspend fun getById(id: Long): ListPreset?
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetRepository.kt
================================================
package com.byteflipper.random.data.preset

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ListPresetRepository @Inject constructor(
    private val dao: ListPresetDao
) {
    fun observeAll(): Flow<List<ListPreset>> = dao.observeAll()

    suspend fun upsert(preset: ListPreset): Long = withContext(Dispatchers.IO) {
        dao.upsert(preset)
    }

    suspend fun delete(preset: ListPreset) = withContext(Dispatchers.IO) {
        dao.delete(preset)
    }

    suspend fun getById(id: Long): ListPreset? = withContext(Dispatchers.IO) {
        dao.getById(id)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/settings/SettingsRepository.kt
================================================
package com.byteflipper.random.data.settings

import android.content.Context
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.intPreferencesKey
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import com.byteflipper.random.utils.Constants
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import javax.inject.Inject
import javax.inject.Singleton

private val Context.dataStore by preferencesDataStore(name = Constants.DATASTORE_SETTINGS_NAME)

enum class ThemeMode(val value: Int) {
    System(0),
    Light(1),
    Dark(2);

    companion object {
        fun fromValue(value: Int?): ThemeMode = when (value) {
            1 -> Light
            2 -> Dark
            else -> System
        }
    }
}

enum class FabSizeSetting(val value: Int) {
    Small(0),
    Medium(1),
    Large(2);

    companion object {
        fun fromValue(value: Int?): FabSizeSetting = when (value) {
            0 -> Small
            2 -> Large
            else -> Medium
        }
    }
}

enum class AppLanguage(val value: Int, val localeTag: String) {
    System(0, "system"),
    English(1, "en"),
    Russian(2, "ru"),
    Ukrainian(3, "uk"),
    Belarusian(4, "be"),
    Polish(5, "pl");

    companion object {
        fun fromValue(value: Int?): AppLanguage = when (value) {
            1 -> English
            2 -> Russian
            3 -> Ukrainian
            4 -> Belarusian
            5 -> Polish
            else -> System
        }
    }
}

enum class HapticsIntensity(val value: Int) {
    Low(0),
    Medium(1),
    High(2);

    companion object {
        fun fromValue(value: Int?): HapticsIntensity = when (value) {
            0 -> Low
            2 -> High
            else -> Medium
        }
    }
}

data class Settings(
    val themeMode: ThemeMode = ThemeMode.System,
    val dynamicColors: Boolean = true,
    val fabSize: FabSizeSetting = FabSizeSetting.Medium,
    val appLanguage: AppLanguage = AppLanguage.System,
    val hapticsEnabled: Boolean = true,
    val hapticsIntensity: HapticsIntensity = HapticsIntensity.Medium,
    val setupCompleted: Boolean = false
)

@Singleton
class SettingsRepository @Inject constructor(
    @ApplicationContext private val appContext: Context
) {

    private object Keys {
        val themeMode: Preferences.Key<Int> = intPreferencesKey("theme_mode")
        val dynamicColors: Preferences.Key<Boolean> = booleanPreferencesKey("dynamic_colors")
        val fabSize: Preferences.Key<Int> = intPreferencesKey("fab_size")
        val appLanguage: Preferences.Key<Int> = intPreferencesKey("app_language")
        val hapticsEnabled: Preferences.Key<Boolean> = booleanPreferencesKey("haptics_enabled")
        val hapticsIntensity: Preferences.Key<Int> = intPreferencesKey("haptics_intensity")
        val setupCompleted: Preferences.Key<Boolean> = booleanPreferencesKey("setup_completed")

        // Default list storage
        val defaultListName: Preferences.Key<String> = stringPreferencesKey(Constants.DEFAULT_LIST_NAME_KEY)
        val defaultListItems: Preferences.Key<String> = stringPreferencesKey(Constants.DEFAULT_LIST_ITEMS_KEY)
    }

    val settingsFlow: Flow<Settings> = appContext.dataStore.data.map { prefs ->
        Settings(
            themeMode = ThemeMode.fromValue(prefs[Keys.themeMode]),
            dynamicColors = prefs[Keys.dynamicColors] ?: true,
            fabSize = FabSizeSetting.fromValue(prefs[Keys.fabSize]),
            appLanguage = AppLanguage.fromValue(prefs[Keys.appLanguage]),
            hapticsEnabled = prefs[Keys.hapticsEnabled] ?: true,
            hapticsIntensity = HapticsIntensity.fromValue(prefs[Keys.hapticsIntensity]),
            setupCompleted = prefs[Keys.setupCompleted] ?: false
        )
    }

    suspend fun setThemeMode(mode: ThemeMode) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.themeMode] = mode.value
        }
    }

    suspend fun setDynamicColors(enabled: Boolean) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.dynamicColors] = enabled
        }
    }

    suspend fun setFabSize(size: FabSizeSetting) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.fabSize] = size.value
        }
    }

    suspend fun setHapticsEnabled(enabled: Boolean) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.hapticsEnabled] = enabled
        }
    }

    suspend fun setHapticsIntensity(intensity: HapticsIntensity) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.hapticsIntensity] = intensity.value
        }
    }

    suspend fun setAppLanguage(language: AppLanguage) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.appLanguage] = language.value
        }
    }

    suspend fun setSetupCompleted(completed: Boolean) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.setupCompleted] = completed
        }
    }

    // Default list methods
    val defaultListNameFlow: Flow<String?> = appContext.dataStore.data.map { prefs ->
        prefs[Keys.defaultListName]
    }

    val defaultListItemsFlow: Flow<List<String>> = appContext.dataStore.data.map { prefs ->
        prefs[Keys.defaultListItems]?.split(com.byteflipper.random.utils.Constants.ITEMS_SEPARATOR) ?: emptyList()
    }

    suspend fun getDefaultListName(): String? {
        return appContext.dataStore.data.first()[Keys.defaultListName]
    }

    suspend fun getDefaultListItems(): List<String> {
        val joinedString: String? = appContext.dataStore.data.first()[Keys.defaultListItems]
        return joinedString?.split(com.byteflipper.random.utils.Constants.ITEMS_SEPARATOR)
            ?: emptyList()
    }

    suspend fun setDefaultListName(name: String) {
        appContext.dataStore.edit { prefs ->
            prefs[Keys.defaultListName] = name
        }
    }

    suspend fun setDefaultListItems(items: List<String>) {
        val joined = items.joinToString(com.byteflipper.random.utils.Constants.ITEMS_SEPARATOR)
        appContext.dataStore.edit { prefs ->
            prefs[Keys.defaultListItems] = joined
        }
    }


}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/coin/CoinSide.kt
================================================
package com.byteflipper.random.domain.coin

enum class CoinSide { HEADS, TAILS }





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/coin/usecase/TossCoinUseCase.kt
================================================
package com.byteflipper.random.domain.coin.usecase

import com.byteflipper.random.domain.coin.CoinSide
import kotlin.random.Random

class TossCoinUseCase {
    operator fun invoke(): CoinSide {
        return if (Random.nextBoolean()) CoinSide.HEADS else CoinSide.TAILS
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/di/UseCaseModule.kt
================================================
package com.byteflipper.random.domain.di

import com.byteflipper.random.domain.numbers.usecase.GenerateNumbersUseCase
import com.byteflipper.random.domain.numbers.usecase.ValidateNumberInputsUseCase
import com.byteflipper.random.domain.coin.usecase.TossCoinUseCase
import com.byteflipper.random.domain.dice.usecase.RollDiceUseCase
import com.byteflipper.random.domain.lot.usecase.ValidateLotInputsUseCase
import com.byteflipper.random.domain.lot.usecase.GenerateMarkedIndicesUseCase
import com.byteflipper.random.domain.lists.usecase.GenerateListResultsUseCase
import com.byteflipper.random.domain.lists.usecase.SortListResultsUseCase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object UseCaseModule {

    @Provides
    @Singleton
    fun provideValidateNumberInputsUseCase(): ValidateNumberInputsUseCase = ValidateNumberInputsUseCase()

    @Provides
    @Singleton
    fun provideGenerateNumbersUseCase(): GenerateNumbersUseCase = GenerateNumbersUseCase()

    @Provides
    @Singleton
    fun provideTossCoinUseCase(): TossCoinUseCase = TossCoinUseCase()

    @Provides
    @Singleton
    fun provideRollDiceUseCase(): RollDiceUseCase = RollDiceUseCase()

    @Provides
    @Singleton
    fun provideValidateLotInputsUseCase(): ValidateLotInputsUseCase = ValidateLotInputsUseCase()

    @Provides
    @Singleton
    fun provideGenerateMarkedIndicesUseCase(): GenerateMarkedIndicesUseCase = GenerateMarkedIndicesUseCase()

    @Provides
    @Singleton
    fun provideGenerateListResultsUseCase(): GenerateListResultsUseCase = GenerateListResultsUseCase()

    @Provides
    @Singleton
    fun provideSortListResultsUseCase(): SortListResultsUseCase = SortListResultsUseCase()
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/dice/usecase/RollDiceUseCase.kt
================================================
package com.byteflipper.random.domain.dice.usecase

import kotlin.random.Random

class RollDiceUseCase {
    /**
     * Р‘СЂРѕСЃРѕРє n С€РµСЃС‚РёРіСЂР°РЅРЅС‹С… РєСѓР±РёРєРѕРІ. Р’РѕР·РІСЂР°С‰Р°РµС‚ СЃРїРёСЃРѕРє Р·РЅР°С‡РµРЅРёР№ [1..6].
     */
    operator fun invoke(count: Int): List<Int> {
        if (count <= 0) return emptyList()
        return List(count) { Random.nextInt(1, 7) }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/lists/ListSortingMode.kt
================================================
package com.byteflipper.random.domain.lists

enum class ListSortingMode {
    Random,
    AlphabeticalAZ,
    AlphabeticalZA
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/lists/usecase/GenerateListResultsUseCase.kt
================================================
package com.byteflipper.random.domain.lists.usecase

class GenerateListResultsUseCase {
    data class Params(
        val baseItems: List<String>,
        val count: Int,
        val allowRepetitions: Boolean,
        val usedItems: Set<String>
    )

    operator fun invoke(params: Params): List<String> {
        val items = params.baseItems.map { it.trim() }.filter { it.isNotEmpty() }
        if (items.isEmpty()) return emptyList()
        if (params.allowRepetitions) {
            return List(params.count.coerceAtLeast(0)) { items.random() }
        }
        val pool = items.filter { it !in params.usedItems }.distinct()
        if (pool.isEmpty()) return emptyList()
        val k = params.count.coerceAtLeast(0).coerceAtMost(pool.size)
        return pool.shuffled().take(k)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/lists/usecase/SortListResultsUseCase.kt
================================================
package com.byteflipper.random.domain.lists.usecase

import com.byteflipper.random.domain.lists.ListSortingMode
import java.text.Normalizer
import java.util.Locale

class SortListResultsUseCase {
    data class Params(
        val input: List<String>,
        val mode: ListSortingMode
    )

    operator fun invoke(params: Params): List<String> {
        return when (params.mode) {
            ListSortingMode.Random -> params.input.shuffled()
            ListSortingMode.AlphabeticalAZ -> params.input.sortedWith(universalStringComparator())
            ListSortingMode.AlphabeticalZA -> params.input.sortedWith(universalStringComparator().reversed())
        }
    }

    private fun universalStringComparator(): Comparator<String> {
        return Comparator { a, b ->
            val ka = normalizeForSort(a)
            val kb = normalizeForSort(b)
            ka.compareTo(kb)
        }
    }

    private fun normalizeForSort(value: String): String {
        val trimmed = value.trim()
        if (trimmed.isEmpty()) return ""
        val lowerCased = trimmed.lowercase(Locale.ROOT)
        val decomposed = Normalizer.normalize(lowerCased, Normalizer.Form.NFKD)
        return decomposed.replace("\\p{M}+".toRegex(), "")
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/lot/usecase/GenerateMarkedIndicesUseCase.kt
================================================
package com.byteflipper.random.domain.lot.usecase

import kotlin.random.Random

class GenerateMarkedIndicesUseCase {
    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјРЅРѕР¶РµСЃС‚РІРѕ РёР· [marked] СѓРЅРёРєР°Р»СЊРЅС‹С… РёРЅРґРµРєСЃРѕРІ РІ РґРёР°РїР°Р·РѕРЅРµ [0, total).
     */
    operator fun invoke(total: Int, marked: Int): Set<Int> {
        if (total <= 0 || marked <= 0) return emptySet()
        if (marked >= total) return (0 until total).toSet()
        val indices = (0 until total).toMutableList()
        indices.shuffle(Random)
        return indices.take(marked).toSet()
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/lot/usecase/ValidateLotInputsUseCase.kt
================================================
package com.byteflipper.random.domain.lot.usecase

class ValidateLotInputsUseCase {
    data class Params(
        val totalText: String,
        val markedText: String
    )

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ (total, marked) РїСЂРё РІР°Р»РёРґРЅС‹С… РґР°РЅРЅС‹С… РёР»Рё null.
     * РўСЂРµР±РѕРІР°РЅРёСЏ: total >= 3, marked in [1..total].
     */
    operator fun invoke(params: Params): Pair<Int, Int>? {
        val total = params.totalText.trim().toIntOrNull() ?: return null
        val marked = params.markedText.trim().toIntOrNull() ?: return null
        if (total < 3) return null
        if (marked < 1) return null
        if (marked > total) return null
        return total to marked
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/numbers/SortingMode.kt
================================================
package com.byteflipper.random.domain.numbers

enum class SortingMode {
    Random,
    Ascending,
    Descending
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/numbers/usecase/GenerateNumbersUseCase.kt
================================================
package com.byteflipper.random.domain.numbers.usecase

import com.byteflipper.random.domain.numbers.SortingMode

class GenerateNumbersUseCase {
    data class Params(
        val range: IntRange,
        val count: Int,
        val allowRepetitions: Boolean,
        val usedNumbers: Set<Int>,
        val sortingMode: SortingMode
    )

    data class Result(
        val values: List<Int>,
        val updatedUsedNumbers: Set<Int>
    )

    operator fun invoke(params: Params): Result {
        val values = if (params.allowRepetitions) {
            List(params.count) { params.range.random() }
        } else {
            val available = params.range.filter { it !in params.usedNumbers }
            available.shuffled().take(params.count)
        }

        val sorted = when (params.sortingMode) {
            SortingMode.Random -> values.shuffled()
            SortingMode.Ascending -> values.sorted()
            SortingMode.Descending -> values.sortedDescending()
        }

        val newUsed = if (params.allowRepetitions) params.usedNumbers else params.usedNumbers + sorted
        return Result(values = sorted, updatedUsedNumbers = newUsed)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/domain/numbers/usecase/ValidateNumberInputsUseCase.kt
================================================
package com.byteflipper.random.domain.numbers.usecase

class ValidateNumberInputsUseCase {
    data class Params(
        val fromText: String,
        val toText: String,
        val countText: String,
        val allowRepetitions: Boolean,
        val usedNumbers: Set<Int>
    )

    /**
     * Р’Р°Р»РёРґРёСЂСѓРµС‚ РІС…РѕРґРЅС‹Рµ РїР°СЂР°РјРµС‚СЂС‹ Рё РІРѕР·РІСЂР°С‰Р°РµС‚ РґРёР°РїР°Р·РѕРЅ Рё РєРѕР»РёС‡РµСЃС‚РІРѕ, РµСЃР»Рё РІСЃС‘ РєРѕСЂСЂРµРєС‚РЅРѕ.
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ null РїСЂРё РЅРµРІР°Р»РёРґРЅС‹С… РґР°РЅРЅС‹С… РёР»Рё РЅРµРІРѕР·РјРѕР¶РЅРѕР№ РіРµРЅРµСЂР°С†РёРё Р±РµР· РїРѕРІС‚РѕСЂРѕРІ.
     */
    operator fun invoke(params: Params): Pair<IntRange, Int>? {
        val from = params.fromText.trim().toIntOrNull()
        val to = params.toText.trim().toIntOrNull()
        val count = params.countText.trim().toIntOrNull() ?: 1

        if (from == null || to == null) return null
        if (count < 1) return null

        val range = if (from <= to) from..to else to..from
        if (!params.allowRepetitions) {
            val available = range.count { it !in params.usedNumbers }
            if (available < count) return null
        }
        return range to count
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/navigation/NavGraph.kt
================================================
package com.byteflipper.random.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.NavType
import androidx.navigation.navArgument
import com.byteflipper.random.ui.home.HomeScreen
import com.byteflipper.random.ui.numbers.NumbersScreen
import com.byteflipper.random.ui.lists.ListScreen
import com.byteflipper.random.ui.coin.CoinScreen
import com.byteflipper.random.ui.lot.LotScreen
import com.byteflipper.random.ui.dice.DiceScreen
import com.byteflipper.random.ui.settings.SettingsScreen
import com.byteflipper.random.ui.settings.general.SettingsGeneralScreen
import com.byteflipper.random.ui.settings.appearance.SettingsAppearanceScreen
import com.byteflipper.random.ui.about.AboutScreen
import com.byteflipper.random.ui.setup.SetupScreen

sealed class Route(val route: String) {
    data object Setup : Route("setup")
    data object Home : Route("home")
    data object Numbers : Route("numbers")
    data object List : Route("list")
    data object ListWithId : Route("list/{id}")
    data object AddListPreset : Route("add_list_preset")
    data object Dice : Route("dice")
    data object Lot : Route("lot")
    data object Coin : Route("coin")
    data object Settings : Route("settings")
    data object SettingsGeneral : Route("settings_general")
    data object SettingsAppearance : Route("settings_appearance")
    data object About : Route("about")
}

@Composable
fun AppNavGraph(navController: NavHostController, startDestination: String = Route.Home.route) {
    NavHost(navController = navController, startDestination = startDestination) {
        composable(Route.Setup.route) {
            SetupScreen(onSetupComplete = {
                navController.navigate(Route.Home.route) {
                    popUpTo(Route.Setup.route) { inclusive = true }
                }
            })
        }
        composable(Route.Home.route) {
            HomeScreen(
                onOpenNumbers = { navController.navigate(Route.Numbers.route) },
                onOpenList = { navController.navigate(Route.List.route) },
                onOpenListById = { id -> navController.navigate("list/$id") },
                onOpenDice = { navController.navigate(Route.Dice.route) },
                onOpenLot = { navController.navigate(Route.Lot.route) },
                onOpenCoin = { navController.navigate(Route.Coin.route) },
                onOpenSettings = { navController.navigate(Route.Settings.route) },
                onOpenAbout = { navController.navigate(Route.About.route) },
                onAddNumbersPreset = { /* TODO: screen for number presets */ },
                onAddListPreset = { navController.navigate(Route.AddListPreset.route) }
            )
        }
        composable(
            route = Route.Numbers.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            NumbersScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Lot.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            LotScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Dice.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            DiceScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Coin.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            CoinScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.Settings.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            SettingsScreen(
                onBack = { navController.popBackStack() },
                onOpenGeneral = { navController.navigate(Route.SettingsGeneral.route) },
                onOpenAppearance = { navController.navigate(Route.SettingsAppearance.route) }
            )
        }
        composable(
            route = Route.SettingsGeneral.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            SettingsGeneralScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.SettingsAppearance.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            SettingsAppearanceScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.About.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            AboutScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.List.route,
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) {
            ListScreen(
                onBack = { navController.popBackStack() },
                onOpenListById = { id ->
                    navController.navigate("list/$id") {
                        popUpTo(Route.Home.route) { inclusive = false }
                    }
                }
            )
        }
        composable(
            route = Route.ListWithId.route,
            arguments = listOf(navArgument("id") { type = NavType.LongType }),
            enterTransition = NavTransitions.enter,
            exitTransition = NavTransitions.exit,
            popEnterTransition = NavTransitions.popEnter,
            popExitTransition = NavTransitions.popExit
        ) { backStackEntry ->
            val id = backStackEntry.arguments?.getLong("id")
            ListScreen(
                onBack = { navController.popBackStack() },
                presetId = id,
                onOpenListById = { nid -> navController.navigate("list/$nid") }
            )
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/navigation/NavTransitions.kt
================================================
package com.byteflipper.random.navigation

import androidx.compose.animation.AnimatedContentTransitionScope
import androidx.compose.animation.EnterTransition
import androidx.compose.animation.ExitTransition
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.navigation.NavBackStackEntry

object NavTransitions {
    val enter: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = { fadeIn() }

    val exit: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = { fadeOut() }

    val popEnter: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition = { fadeIn() }

    val popExit: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition = { fadeOut() }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/AboutContent.kt
================================================
package com.byteflipper.random.ui.about

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.BuildConfig
import com.byteflipper.random.R
import com.byteflipper.random.ui.about.components.AnimatedActionItem
import com.byteflipper.random.ui.about.components.ExpandableSection
import com.byteflipper.random.ui.about.components.HeroAppCard
import com.byteflipper.random.ui.about.components.InfoCard
import com.byteflipper.random.ui.about.components.VersionInfoCard

@Composable
fun AboutContent(
    modifier: Modifier = Modifier,
    onOpenUrl: (String) -> Unit
) {
    val scrollState = rememberScrollState()
    val primaryColorArgb = MaterialTheme.colorScheme.primary.toArgb()
    val otherAppsUrl = stringResource(R.string.app_name)

    Column(
        modifier = modifier
            .fillMaxSize()
            .verticalScroll(scrollState)
            .padding(horizontal = 20.dp, vertical = 24.dp),
        verticalArrangement = Arrangement.spacedBy(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // РћР±СЉРµРґРёРЅРµРЅРЅР°СЏ Hero СЃРµРєС†РёСЏ СЃ РёРЅС„РѕСЂРјР°С†РёРµР№ Рѕ РїСЂРёР»РѕР¶РµРЅРёРё
        HeroAppCard(
            title = stringResource(R.string.app_name),
            subtitle = "Р’Р°С€ РЅР°РґРµР¶РЅС‹Р№ РїРѕРјРѕС‰РЅРёРє РґР»СЏ СЃР»СѓС‡Р°Р№РЅРѕРіРѕ РІС‹Р±РѕСЂР°",
            appName = stringResource(R.string.app_name),
            developerName = "ByteFlipper",
            appIcon = painterResource(id = R.drawable.logo)
        )

        ExpandableSection(
            title = stringResource(R.string.support_feedback_category_title),
            icon = painterResource(id = R.drawable.bug_report_24px),
            expandedContentDescription = stringResource(R.string.expandable_section_expand),
            collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
        ) {
            Column {
                AnimatedActionItem(
                    title = stringResource(R.string.rate_the_app_title),
                    subtitle = stringResource(R.string.rate_the_app_subtitle),
                    icon = painterResource(R.drawable.rate_review_24px),
                    onClick = { onOpenUrl("https://play.google.com/store/apps/details?id=com.byteflipper.random") }
                )

                AnimatedActionItem(
                    title = stringResource(R.string.other_apps_title),
                    subtitle = stringResource(R.string.other_apps_subtitle),
                    icon = painterResource(R.drawable.apps_24px),
                    onClick = { onOpenUrl(otherAppsUrl) },
                    showDivider = false
                )
            }
        }

        ExpandableSection(
            title = stringResource(R.string.connect_with_us_category_title),
            icon = painterResource(id = R.drawable.web_24px),
            expandedContentDescription = stringResource(R.string.expandable_section_expand),
            collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
        ) {
            Column {
                AnimatedActionItem(
                    title = stringResource(R.string.website_title),
                    subtitle = stringResource(R.string.website_subtitle),
                    icon = painterResource(R.drawable.web_24px),
                    onClick = { onOpenUrl("https://byteflipper.web.app") }
                )

                AnimatedActionItem(
                    title = stringResource(R.string.vk_title),
                    subtitle = stringResource(R.string.vk_subtitle),
                    icon = painterResource(R.drawable.vk_24),
                    onClick = { onOpenUrl("https://vk.com/byteflipper") }
                )

                AnimatedActionItem(
                    title = stringResource(R.string.telegram_title),
                    subtitle = stringResource(R.string.telegram_subtitle),
                    icon = painterResource(R.drawable.telegram_24),
                    onClick = { onOpenUrl("https://t.me/byteflipper") },
                    showDivider = false
                )
            }
        }

        ExpandableSection(
            title = stringResource(R.string.development_category_title),
            icon = painterResource(id = R.drawable.code_24px),
            expandedContentDescription = stringResource(R.string.expandable_section_expand),
            collapsedContentDescription = stringResource(R.string.expandable_section_collapse)
        ) {
            Column {
                AnimatedActionItem(
                    title = stringResource(R.string.github_title),
                    subtitle = stringResource(R.string.github_subtitle),
                    icon = painterResource(R.drawable.github_24),
                    onClick = { onOpenUrl("https://github.com/ByteFlipper-58") }
                )

                AnimatedActionItem(
                    title = stringResource(R.string.source_code_title),
                    subtitle = stringResource(R.string.source_code_subtitle),
                    icon = painterResource(R.drawable.code_24px),
                    onClick = { onOpenUrl("https://github.com/ByteFlipper-58/random") },
                    showDivider = false
                )
            }
        }

        VersionInfoCard(
            versionTitle = stringResource(R.string.version),
            versionInfo = "${BuildConfig.VERSION_NAME} (${BuildConfig.VERSION_CODE})",
            icon = painterResource(id = R.drawable.update_24px)
        )

        InfoCard(
            text = stringResource(R.string.made_with_love)
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/AboutScaffold.kt
================================================
package com.byteflipper.random.ui.about

import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScaffold(
    onBack: () -> Unit,
    content: @Composable (innerPadding: androidx.compose.foundation.layout.PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { AboutTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/AboutScreen.kt
================================================
package com.byteflipper.random.ui.about

import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import com.byteflipper.random.utils.ChromeCustomTabUtil

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScreen(
    onBack: () -> Unit,
    modifier: Modifier = Modifier,
) {
    val context = LocalContext.current
    val primaryColorArgb = MaterialTheme.colorScheme.primary.toArgb()

    AboutScaffold(onBack) { innerPadding ->
        AboutContent(modifier = modifier.padding(innerPadding)) { url ->
            ChromeCustomTabUtil.openUrl(
                context = context,
                url = url,
                primaryColor = primaryColorArgb
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/AboutTopBar.kt
================================================
package com.byteflipper.random.ui.about

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { 
            Text(
                text = stringResource(R.string.about_app),
                style = MaterialTheme.typography.titleLarge,
                fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold
            ) 
        },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(
                    Icons.AutoMirrored.Filled.ArrowBack, 
                    contentDescription = stringResource(R.string.back),
                    tint = MaterialTheme.colorScheme.onSurface
                )
            }
        },
        colors = androidx.compose.material3.TopAppBarDefaults.topAppBarColors(
            containerColor = MaterialTheme.colorScheme.surface,
            titleContentColor = MaterialTheme.colorScheme.onSurface
        )
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/AnimatedActionItem.kt
================================================
package com.byteflipper.random.ui.about.components

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.interaction.collectIsPressedAsState
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp

@Composable
fun AnimatedActionItem(
    title: String,
    subtitle: String,
    icon: Painter,
    onClick: () -> Unit,
    modifier: Modifier = Modifier,
    showDivider: Boolean = true
) {
    val interactionSource = remember { MutableInteractionSource() }
    val isPressed by interactionSource.collectIsPressedAsState()
    
    val scale by animateFloatAsState(
        targetValue = if (isPressed) 0.98f else 1f,
        animationSpec = tween(durationMillis = 100),
        label = "scale"
    )
    
    val backgroundColor by animateColorAsState(
        targetValue = if (isPressed) 
            MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.1f) 
        else Color.Transparent,
        animationSpec = tween(durationMillis = 150),
        label = "backgroundColor"
    )

    Surface(
        modifier = modifier
            .fillMaxWidth()
            .scale(scale)
            .clip(RoundedCornerShape(16.dp))
            .background(backgroundColor)
            .clickable(
                interactionSource = interactionSource,
                indication = null
            ) { onClick() }
            .padding(horizontal = 16.dp, vertical = 16.dp),
        color = Color.Transparent
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(56.dp)
                    .clip(RoundedCornerShape(16.dp))
                    .background(
                        brush = Brush.linearGradient(
                            colors = listOf(
                                MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.8f),
                                MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.6f)
                            )
                        )
                    ),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(32.dp),
                    tint = MaterialTheme.colorScheme.primary
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis,
                    color = MaterialTheme.colorScheme.onSurface
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
            }
            
            Spacer(modifier = Modifier.width(8.dp))
            
            Icon(
                imageVector = Icons.AutoMirrored.Filled.ArrowForward,
                contentDescription = null,
                modifier = Modifier.size(20.dp),
                tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
            )
        }
    }

    if (showDivider) {
        HorizontalDivider(
            modifier = Modifier.padding(start = 88.dp, end = 16.dp),
            thickness = 0.5.dp,
            color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f)
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/ExpandableSection.kt
================================================
package com.byteflipper.random.ui.about.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import com.byteflipper.random.ui.theme.ShapesTokens
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

@Composable
fun ExpandableSection(
    title: String,
    icon: Painter,
    expandedContentDescription: String,
    collapsedContentDescription: String,
    modifier: Modifier = Modifier,
    initiallyExpanded: Boolean = false,
    content: @Composable () -> Unit
) {
    var expanded by remember { mutableStateOf(initiallyExpanded) }
    val interactionSource = remember { MutableInteractionSource() }
    
    val rotationState by animateFloatAsState(
        targetValue = if (expanded) 180f else 0f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessMedium
        ),
        label = "rotation"
    )
    

    ElevatedCard(
        modifier = modifier.fillMaxWidth(),
        elevation = CardDefaults.elevatedCardElevation(
            defaultElevation = if (expanded) 8.dp else 4.dp
        ),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.surfaceContainerLow
        )
    ) {
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(
                        interactionSource = interactionSource,
                        indication = null
                    ) { expanded = !expanded }
                    .padding(20.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Box(
                        modifier = Modifier
                            .size(48.dp)
                            .shadow(
                                elevation = 4.dp,
                                shape = RoundedCornerShape(14.dp),
                                clip = false
                            )
                            .clip(RoundedCornerShape(14.dp))
                            .background(
                                brush = Brush.linearGradient(
                                    colors = listOf(
                                        MaterialTheme.colorScheme.primaryContainer,
                                        MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.8f)
                                    )
                                )
                            ),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            painter = icon,
                            contentDescription = null, // Icon is decorative here
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(28.dp)
                        )
                    }

                    Spacer(modifier = Modifier.width(16.dp))

                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                }

                Box(
                    modifier = Modifier
                        .size(36.dp)
                        .clip(CircleShape)
                        .background(
                            MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.KeyboardArrowDown,
                        contentDescription = if (expanded) collapsedContentDescription else expandedContentDescription,
                        modifier = Modifier
                            .size(24.dp)
                            .rotate(rotationState),
                        tint = MaterialTheme.colorScheme.primary
                    )
                }
            }

            AnimatedVisibility(
                visible = expanded,
                enter = expandVertically(
                    animationSpec = spring(
                        dampingRatio = Spring.DampingRatioMediumBouncy,
                        stiffness = Spring.StiffnessLow
                    )
                ) + fadeIn(
                    animationSpec = tween(durationMillis = 300)
                ),
                exit = shrinkVertically(
                    animationSpec = tween(durationMillis = 200)
                ) + fadeOut(
                    animationSpec = tween(durationMillis = 150)
                )
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 4.dp, vertical = 8.dp)
                ) {
                    content()
                }
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/HeroAppCard.kt
================================================
Error reading file with 'cp1251': 'charmap' codec can't decode byte 0x98 in position 2723: character maps to <undefined>


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/IconCard.kt
================================================
package com.byteflipper.random.ui.about.components

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import com.byteflipper.random.ui.theme.ShapesTokens
import androidx.compose.material3.Card
import androidx.compose.material3.CardColors
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * РЈРЅРёРІРµСЂСЃР°Р»СЊРЅР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ РёРєРѕРЅРєРѕР№, Р·Р°РіРѕР»РѕРІРєРѕРј Рё РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёРј СЃРѕРґРµСЂР¶РёРјС‹Рј
 *
 * @param title Р·Р°РіРѕР»РѕРІРѕРє РєР°СЂС‚РѕС‡РєРё
 * @param icon РёРєРѕРЅРєР° РґР»СЏ РєР°СЂС‚РѕС‡РєРё
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 * @param subtitle РїРѕРґР·Р°РіРѕР»РѕРІРѕРє (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
 * @param isElevated РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ ElevatedCard РІРјРµСЃС‚Рѕ РѕР±С‹С‡РЅРѕР№ Card
 * @param colors С†РІРµС‚Р° РєР°СЂС‚РѕС‡РєРё
 * @param content РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРѕРµ СЃРѕРґРµСЂР¶РёРјРѕРµ РєР°СЂС‚РѕС‡РєРё
 */
@Composable
fun IconCard(
    title: String,
    icon: Painter,
    modifier: Modifier = Modifier,
    subtitle: String? = null,
    isElevated: Boolean = false,
    colors: CardColors = CardDefaults.cardColors(),
    content: @Composable () -> Unit = {}
) {
    if (isElevated) {
        ElevatedCard(
            modifier = modifier.fillMaxWidth(),
            colors = CardDefaults.elevatedCardColors(
                containerColor = colors.containerColor
            ),
            shape = ShapesTokens.MediumShape
        ) {
            IconCardContent(
                title = title,
                icon = icon,
                subtitle = subtitle,
                content = content
            )
        }
    } else {
        Card(
            modifier = modifier.fillMaxWidth(),
            colors = colors,
            shape = ShapesTokens.MediumShape
        ) {
            IconCardContent(
                title = title,
                icon = icon,
                subtitle = subtitle,
                content = content
            )
        }
    }
}

@Composable
private fun IconCardContent(
    title: String,
    icon: Painter,
    subtitle: String?,
    content: @Composable () -> Unit
) {
    Column(
        modifier = Modifier.padding(20.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(CircleShape)
                    .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(28.dp)
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                )
                
                subtitle?.let {
                    Text(
                        text = it,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                }
            }
        }

        if (content != {}) {
            Spacer(modifier = Modifier.size(16.dp))
            content()
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/InfoCard.kt
================================================
package com.byteflipper.random.ui.about.components

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import com.byteflipper.random.ui.theme.ShapesTokens
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp

/**
 * РџСЂРѕСЃС‚Р°СЏ РёРЅС„РѕСЂРјР°С†РёРѕРЅРЅР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ С‚РµРєСЃС‚РѕРј
 *
 * @param text С‚РµРєСЃС‚ РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 */
@Composable
fun InfoCard(
    text: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent
        ),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(16.dp))
                .background(
                    brush = Brush.linearGradient(
                        colors = listOf(
                            MaterialTheme.colorScheme.surfaceContainerHighest.copy(alpha = 0.8f),
                            MaterialTheme.colorScheme.surfaceContainer.copy(alpha = 0.9f)
                        )
                    )
                )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = text,
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurface,
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/about/components/VersionInfoCard.kt
================================================
package com.byteflipper.random.ui.about.components

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import com.byteflipper.random.ui.theme.ShapesTokens
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp

/**
 * РџРµСЂРµРёСЃРїРѕР»СЊР·СѓРµРјР°СЏ РєР°СЂС‚РѕС‡РєР° СЃ РёРЅС„РѕСЂРјР°С†РёРµР№ Рѕ РІРµСЂСЃРёРё
 *
 * @param versionTitle Р·Р°РіРѕР»РѕРІРѕРє (РЅР°РїСЂРёРјРµСЂ "Р’РµСЂСЃРёСЏ")
 * @param versionInfo РёРЅС„РѕСЂРјР°С†РёСЏ Рѕ РІРµСЂСЃРёРё (РЅР°РїСЂРёРјРµСЂ "1.0.0 (1)")
 * @param icon РёРєРѕРЅРєР° РґР»СЏ РєР°СЂС‚РѕС‡РєРё
 * @param modifier РјРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ СЃС‚РёР»РёР·Р°С†РёРё
 */
@Composable
fun VersionInfoCard(
    versionTitle: String,
    versionInfo: String,
    icon: Painter,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent
        ),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(16.dp))
                .background(
                    brush = Brush.linearGradient(
                        colors = listOf(
                            MaterialTheme.colorScheme.surfaceContainerHighest.copy(alpha = 0.8f),
                            MaterialTheme.colorScheme.surfaceContainer.copy(alpha = 0.9f)
                        )
                    )
                )
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(48.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        painter = icon,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(28.dp)
                    )
                }

                Spacer(modifier = Modifier.width(16.dp))

                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = versionTitle,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.SemiBold,
                        color = MaterialTheme.colorScheme.onSurface
                    )

                    Text(
                        text = versionInfo,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
} 


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/app/AppRoot.kt
================================================
package com.byteflipper.random.ui.app

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.os.LocaleListCompat
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.ThemeMode
import com.byteflipper.random.navigation.NavTransitions
import com.byteflipper.random.ui.about.AboutScreen
import com.byteflipper.random.ui.coin.CoinScreen
import com.byteflipper.random.ui.dice.DiceScreen
import com.byteflipper.random.ui.home.HomeScreen
import com.byteflipper.random.ui.lists.ListScreen
import com.byteflipper.random.ui.settings.appearance.SettingsAppearanceScreen
import com.byteflipper.random.ui.settings.general.SettingsGeneralScreen
import com.byteflipper.random.ui.settings.SettingsScreen
import com.byteflipper.random.ui.theme.RandomTheme
import com.byteflipper.random.ui.components.LocalHapticsManager
import com.byteflipper.random.ui.components.SystemHapticsManager
import com.byteflipper.random.ui.numbers.NumbersScreen
import com.byteflipper.random.ui.lot.LotScreen
import com.byteflipper.random.ui.setup.SetupScreen

object AppRoutes {
    const val Setup: String = "setup"
    const val Home: String = "home"
    const val Numbers: String = "numbers"
    const val List: String = "list"
    const val ListWithId: String = "list/{id}"
    const val Dice: String = "dice"
    const val Lot: String = "lot"
    const val Coin: String = "coin"
    const val Settings: String = "settings"
    const val SettingsGeneral: String = "settings_general"
    const val SettingsAppearance: String = "settings_appearance"
    const val About: String = "about"
}

@Composable
fun AppRoot() {
    val viewModel: AppViewModel = hiltViewModel()
    val context = LocalContext.current

    val initialSettings: Settings? by viewModel.initialSettings.collectAsStateWithLifecycle()
    val settings: Settings by viewModel.settingsFlow.collectAsStateWithLifecycle(
        initialValue = initialSettings ?: Settings()
    )

    LaunchedEffect(settings.appLanguage) {
        val tag = settings.appLanguage.localeTag
        val desiredLocales = if (tag == "system") {
            LocaleListCompat.getEmptyLocaleList()
        } else {
            LocaleListCompat.forLanguageTags(tag)
        }
        if (AppCompatDelegate.getApplicationLocales().toLanguageTags() != desiredLocales.toLanguageTags()) {
            AppCompatDelegate.setApplicationLocales(desiredLocales)
        }
    }

    val darkTheme = when (settings.themeMode) {
        ThemeMode.System -> isSystemInDarkTheme()
        ThemeMode.Light -> false
        ThemeMode.Dark -> true
    }

    RandomTheme(darkTheme = darkTheme, dynamicColor = settings.dynamicColors) {
        val hapticsManager = remember { SystemHapticsManager(context) }
        androidx.compose.runtime.CompositionLocalProvider(LocalHapticsManager provides hapticsManager) {
            Surface(
                modifier = Modifier.fillMaxSize(),
                color = MaterialTheme.colorScheme.background
            ) {
                val navController = rememberNavController()
                val startDestination = if (settings.setupCompleted) AppRoutes.Home else AppRoutes.Setup

                NavHost(navController = navController, startDestination = startDestination) {
                    composable(AppRoutes.Setup) {
                        SetupScreen(onSetupComplete = {
                            navController.navigate(AppRoutes.Home) {
                                popUpTo(AppRoutes.Setup) { inclusive = true }
                            }
                        })
                    }
                    composable(AppRoutes.Home) {
                        HomeScreen(
                            onOpenNumbers = { navController.navigate(AppRoutes.Numbers) },
                            onOpenList = { navController.navigate(AppRoutes.List) },
                            onOpenListById = { id -> navController.navigate("list/$id") },
                            onOpenDice = { navController.navigate(AppRoutes.Dice) },
                            onOpenLot = { navController.navigate(AppRoutes.Lot) },
                            onOpenCoin = { navController.navigate(AppRoutes.Coin) },
                            onOpenSettings = { navController.navigate(AppRoutes.Settings) },
                            onOpenAbout = { navController.navigate(AppRoutes.About) },
                            onAddNumbersPreset = { },
                            onAddListPreset = { navController.navigate("add_list_preset") }
                        )
                    }
                    composable(
                        route = AppRoutes.Numbers,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { NumbersScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.Lot,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { LotScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.Dice,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { DiceScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.Coin,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { CoinScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.Settings,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) {
                        SettingsScreen(
                            onBack = { navController.popBackStack() },
                            onOpenGeneral = { navController.navigate(AppRoutes.SettingsGeneral) },
                            onOpenAppearance = { navController.navigate(AppRoutes.SettingsAppearance) }
                        )
                    }

                    composable(
                        route = AppRoutes.SettingsGeneral,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { SettingsGeneralScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.SettingsAppearance,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { SettingsAppearanceScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.About,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { AboutScreen(onBack = { navController.popBackStack() }) }

                    composable(
                        route = AppRoutes.List,
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) {
                        ListScreen(
                            onBack = { navController.popBackStack() },
                            onOpenListById = { id ->
                                navController.navigate("list/$id") {
                                    popUpTo(AppRoutes.Home) { inclusive = false }
                                }
                            }
                        )
                    }

                    composable(
                        route = AppRoutes.ListWithId,
                        arguments = listOf(navArgument("id") { type = NavType.LongType }),
                        enterTransition = NavTransitions.enter,
                        exitTransition = NavTransitions.exit,
                        popEnterTransition = NavTransitions.popEnter,
                        popExitTransition = NavTransitions.popExit
                    ) { backStackEntry ->
                        val id = backStackEntry.arguments?.getLong("id")
                        ListScreen(
                            onBack = { navController.popBackStack() },
                            presetId = id,
                            onOpenListById = { newId -> navController.navigate("list/$newId") }
                        )
                    }
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/app/AppViewModel.kt
================================================
package com.byteflipper.random.ui.app

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.SettingsRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch

@HiltViewModel
class AppViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository
) : ViewModel() {

    val settingsFlow: Flow<Settings> = settingsRepository.settingsFlow

    private val _initialSettings: MutableStateFlow<Settings?> = MutableStateFlow(null)
    val initialSettings: StateFlow<Settings?> = _initialSettings.asStateFlow()

    val appLanguageTagFlow: Flow<String> = settingsRepository.settingsFlow
        .map { it.appLanguage.localeTag }
        .distinctUntilChanged()

    init {
        viewModelScope.launch {
            _initialSettings.value = settingsRepository.settingsFlow.first()
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinContent.kt
================================================
package com.byteflipper.random.ui.coin

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectVerticalDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.domain.coin.CoinSide

@Composable
fun CoinContent(
    modifier: Modifier = Modifier,
    coinSide: CoinSide,
    rotationX: Float,
    offsetY: Float,
    bgScale: Float,
    showResult: Boolean,
    onDragThrow: () -> Unit
) {
    val density = LocalDensity.current
    Box(modifier = modifier.fillMaxSize().background(Color(0xFF4E342E))) {
        Image(
            painter = painterResource(R.drawable.desk),
            contentDescription = null,
            contentScale = ContentScale.Crop,
            modifier = Modifier
                .matchParentSize()
                .graphicsLayer {
                    val parallax = (offsetY * 0.06f).coerceIn(-24f, 24f)
                    translationY = parallax
                    scaleX = bgScale
                    scaleY = bgScale
                    alpha = 0.98f
                }
        )

        Box(modifier = Modifier.matchParentSize(), contentAlignment = Alignment.Center) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                val coinSize = 236.dp
                val cameraDistancePx = with(density) { 96.dp.toPx() }
                val fillScale = 1.12f

                Box(
                    modifier = Modifier
                        .size(coinSize)
                        .offset(y = 12.dp)
                        .clickable(
                            interactionSource = remember { MutableInteractionSource() },
                            indication = null
                        ) { onDragThrow() }
                        .pointerInput(Unit) {
                            var totalDy = 0f
                            var minDy = 0f
                            var triggered = false
                            val threshold = with(density) { 16.dp.toPx() }
                            detectVerticalDragGestures(
                                onVerticalDrag = { _, dragAmount ->
                                    totalDy += dragAmount
                                    if (totalDy < minDy) minDy = totalDy
                                    if (!triggered && (minDy < -threshold || dragAmount < -threshold * 0.6f)) {
                                        triggered = true
                                        onDragThrow()
                                    }
                                },
                                onDragEnd = {
                                    totalDy = 0f
                                    minDy = 0f
                                    triggered = false
                                },
                                onDragCancel = {
                                    totalDy = 0f
                                    minDy = 0f
                                    triggered = false
                                }
                            )
                        },
                    contentAlignment = Alignment.Center
                ) {
                    Box(
                        modifier = Modifier
                            .matchParentSize()
                            .graphicsLayer {
                                this.rotationX = rotationX
                                this.translationY = offsetY
                                cameraDistance = cameraDistancePx
                                shape = CircleShape
                                clip = true
                            }
                    ) {
                        val angle = ((rotationX % 360f) + 360f) % 360f
                        val showFront = angle <= 90f || angle >= 270f

                        Image(
                            painter = painterResource(R.drawable.coin_front),
                            contentDescription = stringResource(R.string.tails),
                            contentScale = ContentScale.FillBounds,
                            modifier = Modifier
                                .matchParentSize()
                                .graphicsLayer {
                                    scaleX = fillScale
                                    scaleY = fillScale
                                    alpha = if (showFront) 1f else 0f
                                }
                        )

                        Image(
                            painter = painterResource(R.drawable.coin_back),
                            contentDescription = stringResource(R.string.heads),
                            contentScale = ContentScale.FillBounds,
                            modifier = Modifier
                                .matchParentSize()
                                .graphicsLayer {
                                    scaleX = fillScale
                                    scaleY = fillScale
                                    this.rotationX = 180f
                                    alpha = if (!showFront) 1f else 0f
                                }
                        )
                    }
                }
            }

            Column(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(horizontal = 16.dp, vertical = 24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                if (showResult) {
                    Text(
                        text = when (coinSide) {
                            CoinSide.HEADS -> "${stringResource(R.string.result)}: ${stringResource(R.string.heads)}"
                            CoinSide.TAILS -> "${stringResource(R.string.result)}: ${stringResource(R.string.tails)}"
                        },
                        style = MaterialTheme.typography.titleMedium,
                        color = Color.White,
                        textAlign = TextAlign.Center
                    )
                    Spacer(Modifier.padding(4.dp))
                }
                Text(
                    text = stringResource(R.string.swipe_hint),
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White.copy(alpha = 0.8f),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinOverlay.kt
================================================
package com.byteflipper.random.ui.coin

import androidx.activity.compose.BackHandler
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier

@Composable
fun CoinOverlay(
    scrimAlpha: Float,
    onDismiss: () -> Unit
) {
    BackHandler(enabled = true) { onDismiss() }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .clickable(
                interactionSource = remember { MutableInteractionSource() },
                indication = null
            ) { onDismiss() }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinScaffold.kt
================================================
package com.byteflipper.random.ui.coin

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CoinScaffold(
    onBack: () -> Unit,
    snackbarHostState: SnackbarHostState,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { CoinTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinScreen.kt
================================================
package com.byteflipper.random.ui.coin

import android.view.SoundEffectConstants
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectVerticalDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalHapticFeedback
import com.byteflipper.random.ui.components.LocalHapticsManager
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.domain.coin.CoinSide
import kotlin.random.Random

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CoinScreen(onBack: () -> Unit) {
    val scope = rememberCoroutineScope()
    val view = LocalView.current
    val density = LocalDensity.current
    val haptics = LocalHapticFeedback.current
    val hapticsManager = LocalHapticsManager.current
    val viewModel: CoinViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()
    val coinSide by viewModel.currentSide.collectAsStateWithLifecycle()
    val snackbarHostState = remember { SnackbarHostState() }
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    val rotationXAnim = remember { Animatable(0f) }
    val offsetYAnim = remember { Animatable(0f) } // px
    val bgScaleAnim = remember { Animatable(1.18f) }
    var isAnimating by rememberSaveable { mutableStateOf(false) }
    val scrimAlpha = remember { Animatable(0f) }
    var isOverlayVisible by rememberSaveable { mutableStateOf(false) }

    suspend fun toss() {
        if (isAnimating) return
        isAnimating = true

        val target = viewModel.toss()

        fun isFront(angle: Float): Boolean {
            val a = ((angle % 360f) + 360f) % 360f
            return a <= 90f || a >= 270f
        }
        val wantFront = (target == CoinSide.TAILS)
        val startFront = isFront(rotationXAnim.value)

        var halfTurns = Random.nextInt(8, 16)
        val needOdd = (wantFront != startFront)
        val isOdd = (halfTurns % 2 == 1)
        if (needOdd && !isOdd) halfTurns += 1
        if (!needOdd && isOdd) halfTurns += 1

        val startRotation = rotationXAnim.value
        val endRotation = startRotation + halfTurns * 180f

        val totalMs = 1200
        val upMs = (totalMs * 0.5f).toInt()
        val downMs = totalMs - upMs
        val throwHeightPx = with(density) { 200.dp.toPx() }

        view.playSoundEffect(SoundEffectConstants.CLICK)
        if (settings.hapticsEnabled) hapticsManager?.performPress(settings.hapticsIntensity)

        if (!uiState.isOverlayVisible) {
            viewModel.onEvent(CoinUiEvent.SetOverlayVisible(true))
            scrimAlpha.snapTo(0f)
            scrimAlpha.animateTo(1f, tween(250, easing = FastOutSlowInEasing))
        }

        val rot = scope.launch {
            rotationXAnim.animateTo(
                targetValue = endRotation,
                animationSpec = tween(durationMillis = totalMs, easing = FastOutSlowInEasing)
            )
        }
        val move = scope.launch {
            offsetYAnim.animateTo(
                targetValue = -throwHeightPx,
                animationSpec = tween(durationMillis = upMs, easing = FastOutSlowInEasing)
            )
            offsetYAnim.animateTo(
                targetValue = 0f,
                animationSpec = tween(durationMillis = downMs, easing = FastOutSlowInEasing)
            )
        }

        val bg = scope.launch {
            val near = 1.18f
            val far = 1.04f
            bgScaleAnim.animateTo(
                targetValue = far,
                animationSpec = tween(durationMillis = upMs, easing = FastOutSlowInEasing)
            )
            bgScaleAnim.animateTo(
                targetValue = near,
                animationSpec = tween(durationMillis = downMs, easing = FastOutSlowInEasing)
            )
        }

        rot.join()
        move.join()
        bg.join()
        scrimAlpha.animateTo(0f, tween(200, easing = FastOutSlowInEasing))
        viewModel.onEvent(CoinUiEvent.SetOverlayVisible(false))
        isAnimating = false
    }

    CoinScaffold(
        onBack = onBack,
        snackbarHostState = snackbarHostState
    ) { inner ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Transparent)
                .pointerInput(Unit) {
                    var totalDy = 0f
                    var minDy = 0f
                    var triggered = false
                    val threshold = with(density) { 16.dp.toPx() }
                    detectVerticalDragGestures(
                        onVerticalDrag = { _, dragAmount ->
                            totalDy += dragAmount
                            if (totalDy < minDy) minDy = totalDy
                            if (!triggered && !isAnimating && (minDy < -threshold || dragAmount < -threshold * 0.6f)) {
                                triggered = true
                                scope.launch { toss() }
                            }
                        },
                        onDragEnd = {
                            totalDy = 0f
                            minDy = 0f
                            triggered = false
                        },
                        onDragCancel = {
                            totalDy = 0f
                            minDy = 0f
                            triggered = false
                        }
                    )
                }
        ) {
            Box(modifier = Modifier.matchParentSize().padding(inner)) {
                CoinContent(
                    modifier = Modifier.matchParentSize(),
                    coinSide = coinSide,
                    rotationX = rotationXAnim.value,
                    offsetY = offsetYAnim.value,
                    bgScale = bgScaleAnim.value,
                    showResult = !isAnimating,
                    onDragThrow = { scope.launch { toss() } }
                )
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinTopBar.kt
================================================
package com.byteflipper.random.ui.coin

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CoinTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.coin)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/coin/CoinViewModel.kt
================================================
package com.byteflipper.random.ui.coin

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.domain.coin.CoinSide
import com.byteflipper.random.domain.coin.usecase.TossCoinUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class CoinUiState(
    val isOverlayVisible: Boolean = false
)

@HiltViewModel
class CoinViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository,
    private val tossCoin: TossCoinUseCase
) : ViewModel() {

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _currentSide = MutableStateFlow(CoinSide.HEADS)
    val currentSide: StateFlow<CoinSide> = _currentSide.asStateFlow()

    private val _uiState = MutableStateFlow(CoinUiState())
    val uiState: StateFlow<CoinUiState> = _uiState.asStateFlow()

    private val _effects = MutableSharedFlow<CoinUiEffect>()
    val effects: SharedFlow<CoinUiEffect> = _effects

    fun onEvent(event: CoinUiEvent) {
        when (event) {
            CoinUiEvent.Toss -> toss()
            is CoinUiEvent.SetOverlayVisible -> setOverlayVisible(event.visible)
        }
    }

    fun toss(): CoinSide {
        val result = tossCoin()
        _currentSide.value = result
        return result
    }

    fun setOverlayVisible(visible: Boolean) {
        _uiState.value = _uiState.value.copy(isOverlayVisible = visible)
    }
}

sealed interface CoinUiEvent {
    data object Toss : CoinUiEvent
    data class SetOverlayVisible(val visible: Boolean) : CoinUiEvent
}

sealed interface CoinUiEffect





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/CustomChip.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun CustomChip(
    label: String,
    selected: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val scale by animateFloatAsState(
        targetValue = if (selected) 1.05f else 1f,
        animationSpec = spring(dampingRatio = 0.4f),
        label = "chip_scale"
    )

    val backgroundColor by animateColorAsState(
        targetValue = if (selected)
            MaterialTheme.colorScheme.primaryContainer
        else
            MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.6f),
        animationSpec = spring(stiffness = 400f),
        label = "background_color"
    )

    val borderColor by animateColorAsState(
        targetValue = if (selected)
            MaterialTheme.colorScheme.primary
        else
            MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),
        animationSpec = spring(stiffness = 400f),
        label = "border_color"
    )

    val textColor by animateColorAsState(
        targetValue = if (selected)
            MaterialTheme.colorScheme.onPrimaryContainer
        else
            MaterialTheme.colorScheme.onSurfaceVariant,
        animationSpec = spring(stiffness = 400f),
        label = "text_color"
    )

    val shadowElevation by animateFloatAsState(
        targetValue = if (selected) 8f else 2f,
        animationSpec = spring(dampingRatio = 0.6f),
        label = "shadow_elevation"
    )

    Box(
        modifier = modifier
            .scale(scale)
            .shadow(
                elevation = shadowElevation.dp,
                shape = RoundedCornerShape(16.dp),
                spotColor = if (selected)
                    MaterialTheme.colorScheme.primary.copy(alpha = 0.25f)
                else
                    Color.Black.copy(alpha = 0.15f)
            )
            .clip(RoundedCornerShape(16.dp))
            .background(backgroundColor)
            .border(
                width = if (selected) 2.dp else 1.dp,
                color = borderColor,
                shape = RoundedCornerShape(16.dp)
            )
            .clickable { onClick() }
            .padding(horizontal = 10.dp, vertical = 6.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = label,
            color = textColor,
            fontSize = 12.sp,
            fontWeight = if (selected) FontWeight.SemiBold else FontWeight.Normal,
            letterSpacing = if (selected) 0.3.sp else 0.sp
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/EditorList.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.runtime.key
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.input.key.Key
import androidx.compose.ui.input.key.KeyEventType
import androidx.compose.ui.input.key.key
import androidx.compose.ui.input.key.onPreviewKeyEvent
import androidx.compose.ui.input.key.type
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

/**
 * РљРѕРјРїРѕРЅРµРЅС‚ СЂРµРґР°РєС‚РѕСЂР° СЃРїРёСЃРєР° СЃ РїРѕРІРµРґРµРЅРёРµРј С‚РµРєСЃС‚РѕРІРѕРіРѕ СЂРµРґР°РєС‚РѕСЂР°
 *
 * @param items РЎРїРёСЃРѕРє СЃС‚СЂРѕРє РґР»СЏ СЂРµРґР°РєС‚РёСЂРѕРІР°РЅРёСЏ
 * @param onItemsChange РљРѕР»Р»Р±РµРє РїСЂРё РёР·РјРµРЅРµРЅРёРё СЃРїРёСЃРєР° СЌР»РµРјРµРЅС‚РѕРІ
 * @param modifier РњРѕРґРёС„РёРєР°С‚РѕСЂ РґР»СЏ РєРѕРјРїРѕРЅРµРЅС‚Р°
 * @param minItems РњРёРЅРёРјР°Р»СЊРЅРѕРµ РєРѕР»РёС‡РµСЃС‚РІРѕ СЌР»РµРјРµРЅС‚РѕРІ РІ СЃРїРёСЃРєРµ (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ 1)
 */
@Composable
fun EditorList(
    items: SnapshotStateList<String>,
    onItemsChange: (List<String>) -> Unit = {},
    modifier: Modifier = Modifier,
    minItems: Int = 1
) {
    // РЎРѕСЃС‚РѕСЏРЅРёРµ С„РѕРєСѓСЃР°
    val focusRequesters = remember { mutableStateListOf<FocusRequester>() }
    val pendingFocusIndex = remember { mutableStateOf<Int?>(null) }

    // РЎРёРЅС…СЂРѕРЅРёР·Р°С†РёСЏ FocusRequester СЃ РєРѕР»РёС‡РµСЃС‚РІРѕРј СЌР»РµРјРµРЅС‚РѕРІ
    LaunchedEffect(items.size) {
        // РЎРёРЅС…СЂРѕРЅРёР·РёСЂСѓРµРј СЂР°Р·РјРµСЂ СЃРїРёСЃРєР° focusRequesters СЃ СЂР°Р·РјРµСЂРѕРј items
        when {
            focusRequesters.size < items.size -> {
                // Р”РѕР±Р°РІР»СЏРµРј РЅРµРґРѕСЃС‚Р°СЋС‰РёРµ FocusRequester
                repeat(items.size - focusRequesters.size) {
                    focusRequesters.add(FocusRequester())
                }
            }
            focusRequesters.size > items.size -> {
                // РЈРґР°Р»СЏРµРј Р»РёС€РЅРёРµ FocusRequester
                repeat(focusRequesters.size - items.size) {
                    focusRequesters.removeAt(focusRequesters.lastIndex)
                }
            }
        }
    }

    // РћР±СЂР°Р±РѕС‚РєР° РѕС‚Р»РѕР¶РµРЅРЅРѕРіРѕ С„РѕРєСѓСЃР°
    LaunchedEffect(items.size, pendingFocusIndex.value) {
        val index = pendingFocusIndex.value
        if (index != null && index in 0 until focusRequesters.size) {
            focusRequesters[index].requestFocus()
            pendingFocusIndex.value = null
        }
    }

    LazyColumn(modifier = modifier.fillMaxWidth()) {
        items(items.size) { index ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 6.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                BasicTextField(
                    value = items[index],
                    onValueChange = { newValue ->
                        items[index] = newValue
                        onItemsChange(items.toList())
                    },
                    modifier = Modifier
                        .weight(1f)
                        .focusRequester(
                            key(index) {
                                focusRequesters.getOrNull(index) ?: remember { FocusRequester() }
                            }
                        )
                        .onPreviewKeyEvent { event ->
                            if (event.type == KeyEventType.KeyDown) {
                                when (event.key) {
                                    Key.Backspace -> {
                                        // РЈРґР°Р»СЏРµРј СЃС‚СЂРѕРєСѓ С‚РѕР»СЊРєРѕ РµСЃР»Рё РѕРЅР° РїСѓСЃС‚Р°СЏ Рё РЅРµ РµРґРёРЅСЃС‚РІРµРЅРЅР°СЏ
                                        if (items[index].isEmpty() && items.size > minItems) {
                                            val newIndex = (index - 1).coerceAtLeast(0)
                                            items.removeAt(index)
                                            pendingFocusIndex.value = newIndex
                                            onItemsChange(items.toList())
                                            true
                                        } else {
                                            false
                                        }
                                    }
                                    else -> false
                                }
                            } else {
                                false
                            }
                        },
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary,
                        fontSize = 32.sp
                    ),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
                    keyboardActions = KeyboardActions(
                        onNext = {
                            if (index == items.lastIndex) {
                                // Р’ РїРѕСЃР»РµРґРЅРµРј РїРѕР»Рµ - РґРѕР±Р°РІР»СЏРµРј РЅРѕРІСѓСЋ СЃС‚СЂРѕРєСѓ
                                if (items[index].isNotBlank()) {
                                    items.add("")
                                    pendingFocusIndex.value = items.lastIndex
                                    onItemsChange(items.toList())
                                }
                            } else {
                                // РџРµСЂРµС…РѕРґРёРј Рє СЃР»РµРґСѓСЋС‰РµРјСѓ РїРѕР»СЋ
                                focusRequesters.getOrNull(index + 1)?.requestFocus()
                            }
                        }
                    )
                )
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/GeneratorConfigDialog.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.animation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.ui.settings.components.RadioOption
import kotlin.math.roundToInt

// Data РєР»Р°СЃСЃС‹ РґР»СЏ РіСЂСѓРїРїРёСЂРѕРІРєРё РїР°СЂР°РјРµС‚СЂРѕРІ
data class CountConfig(
    val text: String,
    val onChange: (String) -> Unit
)

data class RepetitionConfig(
    val allowRepetitions: Boolean,
    val onAllowRepetitionsChange: (Boolean) -> Unit,
    val usedNumbers: Set<Int>,
    val availableRange: IntRange?,
    val onResetUsedNumbers: () -> Unit
)

data class DelayConfig(
    val useDelay: Boolean,
    val onUseDelayChange: (Boolean) -> Unit,
    val delayText: String,
    val onDelayChange: (String) -> Unit,
    val minDelayMs: Int = 1_000,
    val maxDelayMs: Int = 60_000,
    val defaultDelayMs: Int = 3_000
)

data class SortingConfig(
    val options: List<RadioOption>,
    val selectedKey: String,
    val onChange: (String) -> Unit
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GeneratorConfigDialog(
    visible: Boolean,
    onDismissRequest: () -> Unit,
    countConfig: CountConfig,
    repetitionConfig: RepetitionConfig,
    delayConfig: DelayConfig,
    sortingConfig: SortingConfig? = null
) {
    if (!visible) return

    val sheetState = rememberModalBottomSheetState(
        skipPartiallyExpanded = false
    )

    ModalBottomSheet(
        onDismissRequest = onDismissRequest,
        sheetState = sheetState,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface,
        tonalElevation = 0.dp,
        dragHandle = {
            Surface(
                modifier = Modifier.padding(vertical = 8.dp),
                color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.4f),
                shape = MaterialTheme.shapes.extraLarge
            ) {
                Box(
                    modifier = Modifier
                        .size(width = 32.dp, height = 4.dp)
                )
            }
        }
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .navigationBarsPadding()
                .verticalScroll(rememberScrollState())
        ) {
            // Header СЃ СѓР»СѓС‡С€РµРЅРЅС‹Рј РґРёР·Р°Р№РЅРѕРј
            ConfigHeader(onDismissRequest = onDismissRequest)

            Column(
                modifier = Modifier.padding(vertical = 8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // РЎРµРєС†РёСЏ РєРѕР»РёС‡РµСЃС‚РІР° СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ
                ResultCountSection(countConfig = countConfig)

                // РЎРµРєС†РёСЏ СЃРѕСЂС‚РёСЂРѕРІРєРё (РµСЃР»Рё РµСЃС‚СЊ)
                sortingConfig?.let {
                    SortingSection(sortingConfig = it)
                }

                // РЎРµРєС†РёСЏ РїРѕРІС‚РѕСЂРµРЅРёР№
                RepetitionSection(repetitionConfig = repetitionConfig)

                // РЎРµРєС†РёСЏ Р·Р°РґРµСЂР¶РєРё
                DelaySection(delayConfig = delayConfig)
            }

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@Composable
private fun ConfigHeader(onDismissRequest: () -> Unit) {
    Surface(
        modifier = Modifier.fillMaxWidth(),
        color = MaterialTheme.colorScheme.surface
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 24.dp, vertical = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                painter = painterResource(id = R.drawable.tune_24px),
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(28.dp)
            )
            Spacer(modifier = Modifier.width(16.dp))
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = stringResource(R.string.generator_settings),
                    style = MaterialTheme.typography.headlineSmall,
                    color = MaterialTheme.colorScheme.onSurface
                )
                Text(
                    text = stringResource(R.string.customize_generation),
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
private fun ResultCountSection(countConfig: CountConfig) {
    val countVal = countConfig.text.toIntOrNull()?.coerceIn(1, 100) ?: 1

    ConfigSection(
        icon = painterResource(id = R.drawable.numbers_24px),
        title = stringResource(R.string.result_count),
        description = stringResource(R.string.result_count_description)
    ) {
        Column(modifier = Modifier.fillMaxWidth()) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                AssistChip(
                    onClick = { countConfig.onChange("1") },
                    label = { Text("1") },
                    modifier = Modifier.alpha(if (countVal == 1) 1f else 0.6f)
                )

                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    ),
                    shape = MaterialTheme.shapes.large
                ) {
                    Text(
                        text = countVal.toString(),
                        style = MaterialTheme.typography.headlineMedium,
                        color = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.padding(horizontal = 24.dp, vertical = 8.dp)
                    )
                }

                AssistChip(
                    onClick = { countConfig.onChange("100") },
                    label = { Text("100") },
                    modifier = Modifier.alpha(if (countVal == 100) 1f else 0.6f)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            Slider(
                value = countVal.toFloat(),
                onValueChange = { v ->
                    val nv = v.roundToInt().coerceIn(1, 100)
                    countConfig.onChange(nv.toString())
                },
                valueRange = 1f..100f,
                colors = SliderDefaults.colors(
                    thumbColor = MaterialTheme.colorScheme.primary,
                    activeTrackColor = MaterialTheme.colorScheme.primary
                )
            )
        }
    }
}

@Composable
private fun SortingSection(sortingConfig: SortingConfig) {
    ConfigSection(
        icon = painterResource(id = R.drawable.sort_24px),
        title = stringResource(R.string.sorting),
        description = stringResource(R.string.sorting_description)
    ) {
        Column(
            modifier = Modifier.fillMaxWidth(),
            verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            sortingConfig.options.forEach { option ->
                val selected = option.key == sortingConfig.selectedKey

                Surface(
                    onClick = { sortingConfig.onChange(option.key) },
                    modifier = Modifier.fillMaxWidth(),
                    shape = MaterialTheme.shapes.medium,
                    color = if (selected)
                        MaterialTheme.colorScheme.secondaryContainer
                    else
                        MaterialTheme.colorScheme.surface
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 16.dp, vertical = 12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        RadioButton(
                            selected = selected,
                            onClick = null
                        )
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(
                            text = option.title,
                            style = MaterialTheme.typography.bodyLarge,
                            color = if (selected)
                                MaterialTheme.colorScheme.onSecondaryContainer
                            else
                                MaterialTheme.colorScheme.onSurface
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun RepetitionSection(repetitionConfig: RepetitionConfig) {
    val hasUsedNumbers = !repetitionConfig.allowRepetitions &&
            repetitionConfig.usedNumbers.isNotEmpty() &&
            repetitionConfig.availableRange != null

    ConfigSection(
        icon = painterResource(id = R.drawable.repeat_24px),
        title = stringResource(R.string.allow_repetitions),
        description = if (hasUsedNumbers) {
            val totalCount = repetitionConfig.availableRange!!.count()
            val usedCount = repetitionConfig.usedNumbers.count {
                it in repetitionConfig.availableRange
            }
            "${stringResource(R.string.used_count)}: $usedCount / $totalCount"
        } else {
            stringResource(R.string.repetitions_description)
        },
        action = {
            Switch(
                checked = repetitionConfig.allowRepetitions,
                onCheckedChange = repetitionConfig.onAllowRepetitionsChange
            )
        }
    ) {
        AnimatedVisibility(
            visible = hasUsedNumbers,
            enter = expandVertically() + fadeIn(),
            exit = shrinkVertically() + fadeOut()
        ) {
            OutlinedCard(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp),
                colors = CardDefaults.outlinedCardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                TextButton(
                    onClick = repetitionConfig.onResetUsedNumbers,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(
                        imageVector = Icons.Default.RestartAlt,
                        contentDescription = null,
                        modifier = Modifier.size(18.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(stringResource(R.string.reset_history))
                }
            }
        }
    }
}

@Composable
private fun DelaySection(delayConfig: DelayConfig) {
    ConfigSection(
        icon = painterResource(id = R.drawable.timer_24px),
        title = stringResource(R.string.use_delay),
        description = if (delayConfig.useDelay) {
            stringResource(R.string.custom_delay_enabled)
        } else {
            stringResource(R.string.fixed_delay_1_second)
        },
        action = {
            Switch(
                checked = delayConfig.useDelay,
                onCheckedChange = delayConfig.onUseDelayChange
            )
        }
    ) {
        AnimatedVisibility(
            visible = delayConfig.useDelay,
            enter = expandVertically() + fadeIn(),
            exit = shrinkVertically() + fadeOut()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 12.dp)
            ) {
                val minSec = (delayConfig.minDelayMs / 1000).coerceAtLeast(1)
                val maxSec = (delayConfig.maxDelayMs / 1000).coerceAtLeast(minSec)
                val currentMs = delayConfig.delayText.toIntOrNull() ?: delayConfig.defaultDelayMs
                val currentSec = (currentMs / 1000).coerceIn(minSec, maxSec)

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    FilterChip(
                        selected = currentSec == minSec,
                        onClick = { delayConfig.onDelayChange((minSec * 1000).toString()) },
                        label = { Text("${minSec}s") }
                    )

                    Card(
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.tertiaryContainer
                        ),
                        shape = MaterialTheme.shapes.large
                    ) {
                        Text(
                            text = "$currentSec ${stringResource(R.string.seconds_short)}",
                            style = MaterialTheme.typography.titleLarge,
                            color = MaterialTheme.colorScheme.onTertiaryContainer,
                            modifier = Modifier.padding(horizontal = 20.dp, vertical = 8.dp)
                        )
                    }

                    FilterChip(
                        selected = currentSec == maxSec,
                        onClick = { delayConfig.onDelayChange((maxSec * 1000).toString()) },
                        label = { Text("${maxSec}s") }
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))

                Slider(
                    value = currentSec.toFloat(),
                    onValueChange = { v ->
                        val nv = v.roundToInt().coerceIn(minSec, maxSec)
                        delayConfig.onDelayChange((nv * 1000).toString())
                    },
                    valueRange = minSec.toFloat()..maxSec.toFloat(),
                    colors = SliderDefaults.colors(
                        thumbColor = MaterialTheme.colorScheme.tertiary,
                        activeTrackColor = MaterialTheme.colorScheme.tertiary
                    )
                )
            }
        }
    }
}

@Composable
private fun ConfigSection(
    icon: Painter,
    title: String,
    description: String? = null,
    action: @Composable (() -> Unit)? = null,
    content: @Composable ColumnScope.() -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
        ),
        shape = MaterialTheme.shapes.large
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.Top
            ) {
                Surface(
                    shape = MaterialTheme.shapes.medium,
                    color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),
                    modifier = Modifier.size(40.dp)
                ) {
                    Icon(
                        painter = icon,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier
                            .padding(8.dp)
                            .size(24.dp)
                    )
                }

                Spacer(modifier = Modifier.width(12.dp))

                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    description?.let {
                        Spacer(modifier = Modifier.height(2.dp))
                        Text(
                            text = it,
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                            maxLines = 2,
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                }

                action?.let {
                    Spacer(modifier = Modifier.width(8.dp))
                    it()
                }
            }

            Spacer(modifier = Modifier.height(12.dp))
            content()
        }
    }
}

// РђР»СЊС‚РµСЂРЅР°С‚РёРІРЅР°СЏ РІРµСЂСЃРёСЏ СЃ РѕСЂРёРіРёРЅР°Р»СЊРЅРѕР№ СЃРёРіРЅР°С‚СѓСЂРѕР№ РґР»СЏ РѕР±СЂР°С‚РЅРѕР№ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GeneratorConfigDialog(
    visible: Boolean,
    onDismissRequest: () -> Unit,
    // РљРѕР»РёС‡РµСЃС‚РІРѕ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ
    countText: String,
    onCountChange: (String) -> Unit,
    // РџРѕРІС‚РѕСЂРµРЅРёСЏ
    allowRepetitions: Boolean,
    onAllowRepetitionsChange: (Boolean) -> Unit,
    usedNumbers: Set<Int>,
    availableRange: IntRange?,
    onResetUsedNumbers: () -> Unit,
    // Р—Р°РґРµСЂР¶РєР°
    useDelay: Boolean,
    onUseDelayChange: (Boolean) -> Unit,
    delayText: String,
    onDelayChange: (String) -> Unit,
    minDelayMs: Int = 1_000,
    maxDelayMs: Int = 60_000,
    defaultDelayMs: Int = 3_000,
    // РЎРѕСЂС‚РёСЂРѕРІРєР° (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
    sortingOptions: List<RadioOption>? = null,
    selectedSortingKey: String? = null,
    onSortingChange: ((String) -> Unit)? = null
) {
    GeneratorConfigDialog(
        visible = visible,
        onDismissRequest = onDismissRequest,
        countConfig = CountConfig(
            text = countText,
            onChange = onCountChange
        ),
        repetitionConfig = RepetitionConfig(
            allowRepetitions = allowRepetitions,
            onAllowRepetitionsChange = onAllowRepetitionsChange,
            usedNumbers = usedNumbers,
            availableRange = availableRange,
            onResetUsedNumbers = onResetUsedNumbers
        ),
        delayConfig = DelayConfig(
            useDelay = useDelay,
            onUseDelayChange = onUseDelayChange,
            delayText = delayText,
            onDelayChange = onDelayChange,
            minDelayMs = minDelayMs,
            maxDelayMs = maxDelayMs,
            defaultDelayMs = defaultDelayMs
        ),
        sortingConfig = if (sortingOptions != null && selectedSortingKey != null && onSortingChange != null) {
            SortingConfig(
                options = sortingOptions,
                selectedKey = selectedSortingKey,
                onChange = onSortingChange
            )
        } else null
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/HapticsManager.kt
================================================
package com.byteflipper.random.ui.components

import android.content.Context
import android.os.VibrationEffect
import android.os.Vibrator
import android.os.VibratorManager
import android.os.Build
import androidx.compose.runtime.staticCompositionLocalOf
import com.byteflipper.random.data.settings.HapticsIntensity

interface HapticsManager {
    fun performPress(intensity: HapticsIntensity)
}

class SystemHapticsManager(private val appContext: Context) : HapticsManager {
    private fun vibrate(durationMs: Int, amplitude: Int) {
        val vibrator = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val manager = appContext.getSystemService(Context.VIBRATOR_MANAGER_SERVICE) as VibratorManager
            manager.defaultVibrator
        } else {
            @Suppress("DEPRECATION")
            appContext.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val effect = VibrationEffect.createOneShot(durationMs.toLong(), amplitude)
            vibrator.vibrate(effect)
        } else {
            @Suppress("DEPRECATION")
            vibrator.vibrate(durationMs.toLong())
        }
    }

    override fun performPress(intensity: HapticsIntensity) {
        val (duration, amplitude) = when (intensity) {
            HapticsIntensity.Low -> 15 to 60
            HapticsIntensity.Medium -> 25 to 120
            HapticsIntensity.High -> 35 to 255
        }
        vibrate(duration, amplitude)
    }
}

val LocalHapticsManager = staticCompositionLocalOf<HapticsManager?> { null }





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/SizedFab.kt
================================================
package com.byteflipper.random.ui.components

import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.LargeFloatingActionButton
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import com.byteflipper.random.data.settings.FabSizeSetting

@Composable
fun SizedFab(
    size: FabSizeSetting,
    onClick: () -> Unit,
    containerColor: Color,
    contentColor: Color,
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    when (size) {
        FabSizeSetting.Small -> SmallFloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
        FabSizeSetting.Medium -> FloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
        FabSizeSetting.Large -> LargeFloatingActionButton(
            onClick = onClick,
            containerColor = containerColor,
            contentColor = contentColor,
            modifier = modifier
        ) { content() }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/flip/FlipCardController.kt
================================================
package com.byteflipper.random.ui.components.flip

import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.withFrameNanos
import androidx.compose.ui.geometry.Offset
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.async
import kotlinx.coroutines.delay
import kotlinx.coroutines.joinAll
import kotlinx.coroutines.launch
import kotlin.math.PI
import kotlin.math.floor
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sin
import kotlin.math.sqrt

@Composable
fun FlipCardControls(state: FlipCardState): FlipCardController {
    val scope = rememberCoroutineScope()
    DisposableEffect(state) {
        onDispose {
            state.closeJob?.cancel()
            state.closeJob = null
            state.spinJob?.cancel()
            state.spinJob = null
            state.isSpinning = false
            state.isClosing = false
        }
    }
    return remember(state) {
        FlipCardController(state, scope)
    }
}

class FlipCardController internal constructor(
    private val state: FlipCardState,
    private val scope: CoroutineScope
) {
    fun open() {
        state.isVisible = true
        scope.launch {
            state.scrimProgress.stop()
            state.scrimProgress.animateTo(1f, tween(400, easing = FastOutSlowInEasing))
        }
    }

    fun startClose(anchorInRoot: Offset, onClosed: () -> Unit) {
        startCloseInternal(state, scope, anchorInRoot, onClosed)
    }

    fun spinAndReveal(
        effectiveDelayMs: Int,
        onReveal: (targetIsFront: Boolean) -> Unit,
        onSpinCompleted: (() -> Unit)? = null,
    ) {
        val inputDelayMs = effectiveDelayMs.coerceAtLeast(1)
        state.spinJob?.cancel()
        state.spinJob = scope.launch {
            state.isSpinning = true

            // Hide current text
            state.frontTextAlpha.animateTo(0f, tween(FlipCardDefaults.FlipHideTextMs))
            state.backTextAlpha.animateTo(0f, tween(FlipCardDefaults.FlipHideTextMs))

            // Rotation params based on delay
            val norm = (inputDelayMs - 1000).toFloat() / (60000 - 1000).toFloat()
            val weight = sqrt(1f - norm.coerceIn(0f, 1f))
            val rpsShort = FlipCardDefaults.RpsShort
            val rpsLong = FlipCardDefaults.RpsLong
            val rps = rpsLong + (rpsShort - rpsLong) * weight

            val totalRotations = max(1f, rps * (inputDelayMs / 1000f))
            val wholeRotations = floor(totalRotations)
            val finalRotationDelta = -(wholeRotations * 360f + 180f)

            state.cardRotation.stop()
            state.cardRotation.snapTo(state.lastStopAngle)
            val startAngle = state.lastStopAngle
            val targetAngle = startAngle + finalRotationDelta

            val targetNormalized = normalizeAngle(targetAngle)
            val targetIsFront = targetNormalized < 90f || targetNormalized > 270f

            // Jitter params
            val ampShort = FlipCardDefaults.AmpShort
            val ampLong = FlipCardDefaults.AmpLong
            val amp0 = ampLong + (ampShort - ampLong) * weight

            fun easeOutCubic(p: Float): Float {
                val om = 1f - p
                return 1f - om * om * om
            }

            var revealed = false
            val revealTime = min(400, (inputDelayMs * FlipCardDefaults.RevealFraction).toInt())

            val start = withFrameNanos { it }
            var now = start

            while (true) {
                now = withFrameNanos { it }
                val elapsedMs = ((now - start) / 1_000_000).toInt()
                val progress = (elapsedMs.toFloat() / inputDelayMs).coerceIn(0f, 1f)
                val eased = easeOutCubic(progress)

                val tSec = (now - start) / 1_000_000_000f
                val amp = amp0 * (1f - eased)
                val jitter = amp * (
                    0.5f * sin(2f * PI.toFloat() * 2.7f * tSec) +
                        0.3f * sin(2f * PI.toFloat() * 4.3f * tSec + 0.5f) +
                        0.2f * sin(2f * PI.toFloat() * 7.1f * tSec + 1.2f)
                    )

                val angle = startAngle + finalRotationDelta * eased + jitter
                state.cardRotation.snapTo(angle)

                if (!revealed && inputDelayMs - elapsedMs <= revealTime) {
                    onReveal(targetIsFront)
                    if (targetIsFront) {
                        scope.launch {
                            delay(FlipCardDefaults.RevealDelayMs.toLong())
                            state.frontTextAlpha.animateTo(1f, tween(300))
                        }
                    } else {
                        scope.launch {
                            delay(FlipCardDefaults.RevealDelayMs.toLong())
                            state.backTextAlpha.animateTo(1f, tween(300))
                        }
                    }
                    revealed = true
                }

                if (progress >= 1f) break
            }

            state.cardRotation.snapTo(targetAngle)
            state.lastStopAngle = targetAngle

            if (targetIsFront && state.frontTextAlpha.value < 1f) {
                state.frontTextAlpha.animateTo(1f, tween(200))
            } else if (!targetIsFront && state.backTextAlpha.value < 1f) {
                state.backTextAlpha.animateTo(1f, tween(200))
            }

            state.isSpinning = false
            onSpinCompleted?.invoke()
        }
    }

    fun isVisible(): Boolean = state.isVisible
    val scrimProgress get() = state.scrimProgress
}

internal fun normalizeAngle(angle: Float): Float {
    return ((angle % 360f) + 360f) % 360f
}

internal fun startCloseInternal(
    state: FlipCardState,
    scope: CoroutineScope,
    anchorInRoot: Offset,
    onClosed: () -> Unit
) {
    if (!state.isVisible || state.isClosing) return
    state.isClosing = true
    state.spinJob?.cancel()
    state.spinJob = null
    state.isSpinning = false

    state.closeJob?.cancel()
    state.closeJob = scope.launch {
        val dx = anchorInRoot.x - state.cardCenterInRoot.x
        val dy = anchorInRoot.y - state.cardCenterInRoot.y

        val animations = listOf(
            async { state.scrimProgress.animateTo(0f, tween(FlipCardDefaults.ScrimHideMs, easing = FastOutSlowInEasing)) },
            async { state.exitRotationZ.animateTo(FlipCardDefaults.ExitRotateZ, tween(450, easing = FastOutSlowInEasing)) },
            async { state.exitScale.animateTo(0.5f, spring(dampingRatio = FlipCardDefaults.ExitScaleDamping, stiffness = FlipCardDefaults.ExitScaleSpringStiffness)) },
            async { state.exitTx.animateTo(dx, spring(dampingRatio = FlipCardDefaults.ExitTransDamping, stiffness = FlipCardDefaults.ExitTransSpringStiffness)) },
            async { state.exitTy.animateTo(dy, spring(dampingRatio = FlipCardDefaults.ExitTransDamping, stiffness = FlipCardDefaults.ExitTransSpringStiffness)) },
            async { state.exitAlpha.animateTo(0f, tween(FlipCardDefaults.ExitAlphaMs, easing = FastOutSlowInEasing)) }
        )
        animations.joinAll()

        // Reset state
        state.isVisible = false
        state.isClosing = false
        state.lastStopAngle = 0f
        state.cardRotation.snapTo(0f)
        state.frontTextAlpha.snapTo(1f)
        state.backTextAlpha.snapTo(1f)

        onClosed()
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/flip/FlipCardDefaults.kt
================================================
package com.byteflipper.random.ui.components.flip

import androidx.compose.animation.core.Spring
import com.byteflipper.random.ui.theme.Dimens
import com.byteflipper.random.ui.theme.ShapesTokens

object FlipCardDefaults {
    // Geometry
    const val CameraDistanceMultiplier = 24f
    val CardShape = ShapesTokens.CardShape

    // Elevation
    val CardElevation = Dimens.CardElevation

    // Spin behavior
    const val RpsShort = 2.5f
    const val RpsLong = 0.2f
    const val AmpShort = 15f
    const val AmpLong = 5f

    // Reveal timing
    const val RevealFraction = 1f / 3f
    const val RevealDelayMs = 100

    // Exit animation
    const val ExitRotateZ = -360f
    const val ExitAlphaMs = 400
    const val ScrimHideMs = 350
    const val FlipHideTextMs = 100
    val ExitScaleSpringStiffness = Spring.StiffnessLow
    val ExitScaleDamping = 0.7f
    val ExitTransSpringStiffness = Spring.StiffnessLow
    val ExitTransDamping = 0.65f
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/flip/FlipCardOverlay.kt
================================================
package com.byteflipper.random.ui.components.flip

import androidx.activity.compose.BackHandler
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.material3.MaterialTheme
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.boundsInRoot
import androidx.compose.ui.layout.onGloballyPositioned
import kotlin.math.PI
import kotlin.math.hypot
import kotlin.math.max
import kotlin.math.sin
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.ui.input.pointer.pointerInput
import kotlinx.coroutines.launch

@Composable
fun FlipCardOverlay(
    state: FlipCardState,
    anchorInRoot: Offset,
    onClosed: () -> Unit,
    modifier: Modifier = Modifier,
    cardSize: Dp = 280.dp,
    cardHeight: Dp? = null,
    frontContainerColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.primaryContainer,
    backContainerColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.secondaryContainer,
    frontContent: @Composable () -> Unit,
    backContent: @Composable () -> Unit,
) {
    val scope = rememberCoroutineScope()

    fun resetExitTransforms() = scope.launch {
        state.exitAlpha.snapTo(1f)
        state.exitRotationZ.snapTo(0f)
        state.exitTx.snapTo(0f)
        state.exitTy.snapTo(0f)
        state.exitScale.snapTo(1f)
    }

    BackHandler(enabled = state.isVisible && !state.isClosing) {
        startCloseInternal(state, scope, anchorInRoot, onClosed)
    }

    if (state.isVisible || state.scrimProgress.value > 0.01f) {
        val overlayClickInteraction = androidx.compose.runtime.remember { MutableInteractionSource() }
        val scrimSurfaceColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)

        Box(
            modifier = modifier
                .fillMaxSize()
                .pointerInput(state.isVisible, state.isClosing, state.isSpinning) {
                    // Р—Р°РєСЂС‹РІР°РµРј С‚РѕР»СЊРєРѕ РїРѕ С‚Р°РїСѓ РЅР° С„РѕРЅ; Р¶РµСЃС‚С‹ СЃРєСЂРѕР»Р»Р° РЅРµ РїРµСЂРµС…РІР°С‚С‹РІР°РµРј
                    detectTapGestures(onTap = {
                        if (state.isVisible && !state.isClosing && !state.isSpinning) {
                            startCloseInternal(state, scope, anchorInRoot, onClosed)
                        }
                    })
                },
            contentAlignment = Alignment.Center
        ) {
            FlipCardScrim(state = state, anchorInRoot = anchorInRoot, scrimSurfaceColor = scrimSurfaceColor)
            FlipCardContent(
                state = state,
                cardSize = cardSize,
                cardHeight = cardHeight,
                frontContainerColor = frontContainerColor,
                backContainerColor = backContainerColor,
                frontContent = frontContent,
                backContent = backContent
            )
        }

        LaunchedEffect(state.isVisible) {
            if (state.isVisible) {
                resetExitTransforms()
            }
        }
    }
}

@Composable
private fun FlipCardScrim(state: FlipCardState, anchorInRoot: Offset, scrimSurfaceColor: Color) {
    if (state.overlaySize.width > 0 && state.overlaySize.height > 0) {
        val maxRadius = hypot(
            state.overlaySize.width.toFloat(),
            state.overlaySize.height.toFloat()
        )
        val fabCenterLocal = anchorInRoot - state.overlayTopLeftInRoot
        val radius = max(1f, state.scrimProgress.value * maxRadius * 1.2f)
        val alpha = 0.85f * state.scrimProgress.value

        Canvas(modifier = androidx.compose.ui.Modifier.fillMaxSize()) {
            drawCircle(
                brush = Brush.radialGradient(
                    colors = listOf(
                        scrimSurfaceColor.copy(alpha = 0f),
                        scrimSurfaceColor.copy(alpha = alpha * 0.3f),
                        scrimSurfaceColor.copy(alpha = alpha * 0.6f),
                        scrimSurfaceColor.copy(alpha = alpha)
                    ),
                    center = fabCenterLocal,
                    radius = radius
                ),
                center = fabCenterLocal,
                radius = radius
            )
        }
    }
}

@Composable
private fun FlipCardContent(
    state: FlipCardState,
    cardSize: Dp,
    cardHeight: Dp?,
    frontContainerColor: Color,
    backContainerColor: Color,
    frontContent: @Composable () -> Unit,
    backContent: @Composable () -> Unit
) {
    val currentRotation = state.cardRotation.value
    val normalizedRotation = normalizeAngle(currentRotation)
    val showFront = normalizedRotation < 90f || normalizedRotation > 270f

    val flipProgress = (normalizedRotation % 180f) / 180f
    val scaleEffect = 1f + 0.08f * sin(flipProgress * PI.toFloat())

    Box(
        modifier = Modifier
            .then(
                if (cardHeight != null) Modifier
                    .width(cardSize)
                    .height(cardHeight) else Modifier.size(cardSize)
            )
            .pointerInput(Unit) {
                // РџРѕРіР»РѕС‰Р°РµРј С‚Р°РїС‹ РІРЅСѓС‚СЂРё РєР°СЂС‚РѕС‡РєРё, С‡С‚РѕР±С‹ РєР»РёРє РїРѕ РѕРІРµСЂР»РµСЋ РЅРµ РїСЂРёРІРѕРґРёР» Рє Р·Р°РєСЂС‹С‚РёСЋ
                detectTapGestures(onTap = { /* consume */ })
            }
            .onGloballyPositioned { coords ->
                val bounds = coords.boundsInRoot()
                state.cardCenterInRoot = bounds.center
            }
            .graphicsLayer {
                cameraDistance = FlipCardDefaults.CameraDistanceMultiplier * density

                rotationY = currentRotation
                rotationZ = state.exitRotationZ.value
                val totalScale = scaleEffect * state.exitScale.value
                scaleX = totalScale
                scaleY = totalScale
                translationX = state.exitTx.value
                translationY = state.exitTy.value
                alpha = state.exitAlpha.value
            },
        contentAlignment = Alignment.Center
    ) {
        Card(
            modifier = Modifier
                .fillMaxSize()
                .graphicsLayer { rotationY = 180f }
                .alpha(if (showFront) 0f else 1f),
            colors = CardDefaults.cardColors(
                containerColor = backContainerColor
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = FlipCardDefaults.CardElevation),
            shape = FlipCardDefaults.CardShape
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .alpha(state.backTextAlpha.value),
                contentAlignment = Alignment.Center
            ) {
                backContent()
            }
        }

        Card(
            modifier = androidx.compose.ui.Modifier
                .fillMaxSize()
                .alpha(if (showFront) 1f else 0f),
            colors = CardDefaults.cardColors(
                containerColor = frontContainerColor
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = FlipCardDefaults.CardElevation),
            shape = FlipCardDefaults.CardShape
        ) {
            androidx.compose.foundation.layout.Box(
                modifier = androidx.compose.ui.Modifier
                    .fillMaxSize()
                    .alpha(state.frontTextAlpha.value),
                contentAlignment = Alignment.Center
            ) {
                frontContent()
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/components/flip/FlipCardState.kt
================================================
package com.byteflipper.random.ui.components.flip

import androidx.compose.animation.core.Animatable
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.IntSize
import kotlinx.coroutines.Job

class FlipCardState internal constructor() {
    // Visibility/state flags
    var isVisible by mutableStateOf(false)
    var isClosing by mutableStateOf(false)
    var isSpinning by mutableStateOf(false)

    // Rotation state
    val cardRotation = Animatable(0f)
    var lastStopAngle by mutableStateOf(0f)

    // Scrim progress (also usable outside for blur)
    val scrimProgress = Animatable(0f)

    // Exit transforms
    val exitAlpha = Animatable(1f)
    val exitRotationZ = Animatable(0f)
    val exitTx = Animatable(0f)
    val exitTy = Animatable(0f)
    val exitScale = Animatable(1f)

    // Text alphas
    val frontTextAlpha = Animatable(1f)
    val backTextAlpha = Animatable(1f)

    // Layout measurements
    var overlayTopLeftInRoot by mutableStateOf(Offset.Zero)
    var overlaySize by mutableStateOf(IntSize.Zero)
    var cardCenterInRoot by mutableStateOf(Offset.Zero)

    // Background jobs
    var closeJob: Job? = null
    var spinJob: Job? = null
}

@Composable
fun rememberFlipCardState(): FlipCardState {
    return remember { FlipCardState() }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceContent.kt
================================================
package com.byteflipper.random.ui.dice

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

@Composable
fun DiceCountSelector(
    diceCount: Int,
    onChange: (Int) -> Unit
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(10.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
        ) {
            listOf(1, 2).forEach { n ->
                val selected = n == diceCount
                FloatingActionButton(
                    onClick = { onChange(n) },
                    modifier = Modifier.height(56.dp),
                    containerColor = if (selected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant,
                    contentColor = if (selected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
                ) {
                    Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                }
            }
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
        ) {
            listOf(3, 4, 5).forEach { n ->
                val selected = n == diceCount
                FloatingActionButton(
                    onClick = { onChange(n) },
                    modifier = Modifier.height(56.dp),
                    containerColor = if (selected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant,
                    contentColor = if (selected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
                ) {
                    Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                }
            }
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
        ) {
            listOf(6, 7, 8).forEach { n ->
                val selected = n == diceCount
                FloatingActionButton(
                    onClick = { onChange(n) },
                    modifier = Modifier.height(56.dp),
                    containerColor = if (selected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant,
                    contentColor = if (selected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
                ) {
                    Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                }
            }
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.CenterHorizontally)
        ) {
            listOf(9, 10).forEach { n ->
                val selected = n == diceCount
                FloatingActionButton(
                    onClick = { onChange(n) },
                    modifier = Modifier.height(56.dp),
                    containerColor = if (selected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant,
                    contentColor = if (selected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
                ) {
                    Text(text = n.toString(), fontWeight = FontWeight.Bold, style = MaterialTheme.typography.titleMedium)
                }
            }
        }
    }
}

@Composable
fun DiceContent(
    modifier: Modifier = Modifier,
    diceCount: Int,
    onDiceCountChange: (Int) -> Unit
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = stringResource(R.string.dice_count),
            style = MaterialTheme.typography.labelLarge.copy(
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold
            ),
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentWidth(Alignment.CenterHorizontally)
        )
        Spacer(Modifier.height(12.dp))
        DiceCountSelector(diceCount = diceCount, onChange = onDiceCountChange)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceScaffold.kt
================================================
package com.byteflipper.random.ui.dice

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DiceScaffold(
    onBack: () -> Unit,
    snackbarHostState: SnackbarHostState,
    floatingActionButton: @Composable () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { DiceTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = floatingActionButton,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceScreen.kt
================================================
package com.byteflipper.random.ui.dice

import android.view.SoundEffectConstants
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.platform.LocalHapticFeedback
import com.byteflipper.random.ui.components.LocalHapticsManager
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import kotlin.math.min
import kotlin.random.Random
import androidx.compose.animation.animateColorAsState
import androidx.compose.foundation.layout.Arrangement
import kotlinx.coroutines.Job
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.hilt.navigation.compose.hiltViewModel
import com.byteflipper.random.ui.dice.components.DiceFabControls
import com.byteflipper.random.ui.dice.components.DiceOverlay

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DiceScreen(onBack: () -> Unit) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    val haptics = LocalHapticFeedback.current
    val hapticsManager = LocalHapticsManager.current
    val view = LocalView.current
    val viewModel: DiceViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    val maxDice = 10
    var diceCount by rememberSaveable { mutableStateOf(uiState.diceCount) }

    val rotations = remember { List(maxDice) { Animatable(0f) } }
    val scales = remember { List(maxDice) { Animatable(1f) } }
    val isAnimating = remember { mutableStateOf(List(maxDice) { false }) }

    val diceColorPalette = remember {
        listOf(
            Color(0xFFE74C3C), Color(0xFF3498DB), Color(0xFF2ECC71), Color(0xFFF39C12),
            Color(0xFF9B59B6), Color(0xFF1ABC9C), Color(0xFFE67E22), Color(0xFF34495E),
            Color(0xFF16A085), Color(0xFF27AE60), Color(0xFF2980B9), Color(0xFF8E44AD),
            Color(0xFFC0392B), Color(0xFFD35400), Color(0xFF7F8C8D), Color(0xFF2C3E50)
        )
    }

    var diceColors by remember { mutableStateOf(List(maxDice) { diceColorPalette.random() }) }

    val animatedColors = diceColors.mapIndexed { index, color ->
        animateColorAsState(
            targetValue = color,
            animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing),
            label = "dice_color_${index}"
        )
    }

    var isRolling by remember { mutableStateOf(false) }
    val scrimAlpha = remember { Animatable(0f) }
    var currentRollJob by remember { mutableStateOf<Job?>(null) }

    LaunchedEffect(uiState.diceCount) { diceCount = uiState.diceCount }
    LaunchedEffect(diceCount) { viewModel.onEvent(DiceUiEvent.SetDiceCount(diceCount)) }

    suspend fun openOverlayIfNeeded() {
        if (!uiState.isOverlayVisible) {
            viewModel.onEvent(DiceUiEvent.SetOverlayVisible(true))
            scrimAlpha.snapTo(0f)
            scrimAlpha.animateTo(1f, tween(250, easing = FastOutSlowInEasing))
        }
    }

    fun closeOverlay() {
        scope.launch {
            scrimAlpha.animateTo(0f, tween(200, easing = FastOutSlowInEasing))
            viewModel.onEvent(DiceUiEvent.SetOverlayVisible(false))
        }
    }

    fun rollAll(hapticsAllowed: Boolean) {
        currentRollJob?.cancel()
        currentRollJob = scope.launch {
            isRolling = true
            if (hapticsAllowed) hapticsManager?.performPress(settings.hapticsIntensity)
            view.playSoundEffect(SoundEffectConstants.CLICK)
            openOverlayIfNeeded()

            val newValues = viewModel.rollAll()

            diceColors = List(maxDice) { index ->
                val currentColor = diceColors[index]
                var newColor = diceColorPalette.random()
                while (newColor == currentColor && diceColorPalette.size > 1) {
                    newColor = diceColorPalette.random()
                }
                newColor
            }

            val jobs = mutableListOf<Job>()
            repeat(diceCount) { i ->

                val currentRotation = rotations[i].value
                val normalizedRotation = ((currentRotation % 360) / 90).toInt() * 90f
                rotations[i].snapTo(normalizedRotation)

                jobs += launch {
                    val fullRotations = Random.nextInt(3, 6) * 360f
                    val finalRotation = fullRotations + 90f * Random.nextInt(0, 4)
                    rotations[i].animateTo(
                        targetValue = normalizedRotation + finalRotation,
                        animationSpec = tween(durationMillis = 700, easing = FastOutSlowInEasing)
                    )
                }
                jobs += launch {
                    scales[i].animateTo(1.15f, tween(150, easing = FastOutSlowInEasing))
                    scales[i].animateTo(1f, tween(250, easing = FastOutSlowInEasing))
                }
            }
            jobs.forEach { it.join() }
            isRolling = false
        }
    }

    DiceScaffold(
        onBack = onBack,
        snackbarHostState = snackbarHostState,
        floatingActionButton = {
            DiceFabControls(
                size = settings.fabSize,
                isRolling = isRolling,
                onClick = { rollAll(settings.hapticsEnabled) }
            )
        }
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(16.dp)
                .blur((8f * scrimAlpha.value).dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            DiceContent(
                modifier = Modifier.fillMaxWidth(),
                diceCount = diceCount,
                onDiceCountChange = { diceCount = it }
            )
        }

        if (uiState.isOverlayVisible) {
            DiceOverlay(
                scrimAlpha = scrimAlpha.value,
                diceCount = diceCount,
                rotations = rotations,
                scales = scales,
                isAnimating = isAnimating.value,
                animatedColors = animatedColors,
                values = uiState.values,
                onDismiss = { closeOverlay() },
                onDieClick = { i ->
                    if (!isAnimating.value[i]) {
                        scope.launch {
                            isAnimating.value = isAnimating.value.toMutableList().also { it[i] = true }
                            if (settings.hapticsEnabled) hapticsManager?.performPress(settings.hapticsIntensity)
                            val newV = viewModel.rollOne(i)
                            val currentColor = diceColors[i]
                            var newColor = diceColorPalette.random()
                            while (newColor == currentColor && diceColorPalette.size > 1) {
                                newColor = diceColorPalette.random()
                            }
                            diceColors = diceColors.toMutableList().also { it[i] = newColor }

                            val currentRotation = rotations[i].value
                            val normalizedRotation = ((currentRotation % 360) / 90).toInt() * 90f
                            rotations[i].snapTo(normalizedRotation)

                            rotations[i].animateTo(
                                targetValue = normalizedRotation + 360f * Random.nextInt(2, 4),
                                animationSpec = tween(500, easing = FastOutSlowInEasing)
                            )
                            scales[i].animateTo(1.12f, tween(120))
                            scales[i].animateTo(1f, tween(180))
                            isAnimating.value = isAnimating.value.toMutableList().also { it[i] = false }
                        }
                    }
                }
            )
        }
    }
}

@Composable
private fun DieFace(value: Int, color: Color) {
    Canvas(modifier = Modifier.fillMaxSize()) {
        val w = size.width
        val h = size.height
        val s = min(w, h)
        val corner = s * 0.15f

        // РЎРѕР·РґР°РµРј Р±РѕР»РµРµ С‚РµРјРЅС‹Р№ Рё СЃРІРµС‚Р»С‹Р№ РѕС‚С‚РµРЅРєРё
        val darkColor = Color(
            red = (color.red * 0.8f).coerceIn(0f, 1f),
            green = (color.green * 0.8f).coerceIn(0f, 1f),
            blue = (color.blue * 0.8f).coerceIn(0f, 1f)
        )

        val lightColor = Color(
            red = (color.red * 1.2f).coerceIn(0f, 1f),
            green = (color.green * 1.2f).coerceIn(0f, 1f),
            blue = (color.blue * 1.2f).coerceIn(0f, 1f)
        )

        // Р’РЅРµС€РЅСЏСЏ С‚РµРЅСЊ
        drawRoundRect(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.3f),
                    Color.Black.copy(alpha = 0.2f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(w/2 + 6f, h/2 + 6f),
                radius = s * 0.7f
            ),
            topLeft = androidx.compose.ui.geometry.Offset(2f, 2f),
            size = androidx.compose.ui.geometry.Size(w + 4f, h + 4f),
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner + 2f, corner + 2f),
            style = Fill
        )

        // РћСЃРЅРѕРІР° РєСѓР±РёРєР° СЃ РіСЂР°РґРёРµРЅС‚РѕРј
        drawRoundRect(
            brush = androidx.compose.ui.graphics.Brush.linearGradient(
                colors = listOf(lightColor, color, darkColor),
                start = androidx.compose.ui.geometry.Offset(0f, 0f),
                end = androidx.compose.ui.geometry.Offset(w, h)
            ),
            size = size,
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner, corner),
            style = Fill
        )

        // Р’РЅСѓС‚СЂРµРЅРЅСЏСЏ СЂР°РјРєР° РґР»СЏ РіР»СѓР±РёРЅС‹
        drawRoundRect(
            color = darkColor.copy(alpha = 0.3f),
            topLeft = androidx.compose.ui.geometry.Offset(2f, 2f),
            size = androidx.compose.ui.geometry.Size(w - 4f, h - 4f),
            cornerRadius = androidx.compose.ui.geometry.CornerRadius(corner - 2f, corner - 2f),
            style = Stroke(width = 1.5f)
        )

        // РўРѕС‡РєРё РЅР° РєСѓР±РёРєРµ
        drawDots(value, s, w, h, lightColor)
    }
}

private fun DrawScope.drawDots(value: Int, s: Float, w: Float, h: Float, baseColor: Color) {
    val margin = s * 0.24f
    val cx = w / 2f
    val cy = h / 2f
    val left = margin
    val right = w - margin
    val top = margin
    val bottom = h - margin
    val pipR = s * 0.08f

    fun drawDot(x: Float, y: Float) {
        // Р’РЅРµС€РЅСЏСЏ С‚РµРЅСЊ С‚РѕС‡РєРё
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.4f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(x + 2f, y + 2f),
                radius = pipR * 1.2f
            ),
            radius = pipR * 1.2f,
            center = androidx.compose.ui.geometry.Offset(x + 2f, y + 2f)
        )

        // Р’РїР°РґРёРЅР° РІРѕРєСЂСѓРі С‚РѕС‡РєРё
        drawCircle(
            color = Color.Black.copy(alpha = 0.15f),
            radius = pipR * 1.1f,
            center = androidx.compose.ui.geometry.Offset(x, y)
        )

        // РћСЃРЅРѕРІРЅР°СЏ С‚РѕС‡РєР°
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color(0xFFFAFAFA),
                    Color(0xFFE0E0E0),
                    Color(0xFFBDBDBD)
                ),
                center = androidx.compose.ui.geometry.Offset(x, y),
                radius = pipR
            ),
            radius = pipR,
            center = androidx.compose.ui.geometry.Offset(x, y)
        )

        // Р‘Р»РёРє РЅР° С‚РѕС‡РєРµ
        drawCircle(
            brush = androidx.compose.ui.graphics.Brush.radialGradient(
                colors = listOf(
                    Color.White,
                    Color.White.copy(alpha = 0.3f),
                    Color.Transparent
                ),
                center = androidx.compose.ui.geometry.Offset(x - pipR * 0.3f, y - pipR * 0.3f),
                radius = pipR * 0.5f
            ),
            radius = pipR * 0.4f,
            center = androidx.compose.ui.geometry.Offset(x - pipR * 0.3f, y - pipR * 0.3f)
        )
    }

    when (value.coerceIn(1, 6)) {
        1 -> drawDot(cx, cy)
        2 -> {
            drawDot(left, top)
            drawDot(right, bottom)
        }
        3 -> {
            drawDot(left, top)
            drawDot(cx, cy)
            drawDot(right, bottom)
        }
        4 -> {
            drawDot(left, top)
            drawDot(right, top)
            drawDot(left, bottom)
            drawDot(right, bottom)
        }
        5 -> {
            drawDot(left, top)
            drawDot(right, top)
            drawDot(cx, cy)
            drawDot(left, bottom)
            drawDot(right, bottom)
        }
        6 -> {
            drawDot(left, top)
            drawDot(left, cy)
            drawDot(left, bottom)
            drawDot(right, top)
            drawDot(right, cy)
            drawDot(right, bottom)
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceTopBar.kt
================================================
package com.byteflipper.random.ui.dice

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DiceTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.dice)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/DiceViewModel.kt
================================================
package com.byteflipper.random.ui.dice

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.domain.dice.usecase.RollDiceUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class DiceUiState(
    val diceCount: Int = 2,
    val values: List<Int> = listOf(1, 2),
    val isOverlayVisible: Boolean = false
)

@HiltViewModel
class DiceViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository,
    private val rollDice: RollDiceUseCase
) : ViewModel() {

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _uiState = MutableStateFlow(DiceUiState())
    val uiState: StateFlow<DiceUiState> = _uiState.asStateFlow()

    private val _effects = MutableSharedFlow<DiceUiEffect>()
    val effects: SharedFlow<DiceUiEffect> = _effects

    fun onEvent(event: DiceUiEvent) {
        when (event) {
            is DiceUiEvent.SetDiceCount -> setDiceCount(event.count)
            is DiceUiEvent.SetOverlayVisible -> setOverlayVisible(event.visible)
            is DiceUiEvent.RollAll -> rollAll()
            is DiceUiEvent.RollOne -> rollOne(event.index)
        }
    }

    fun setDiceCount(count: Int) {
        val clamped = count.coerceIn(1, 10)
        val base = _uiState.value.values.take(clamped)
        val padded = base + List(clamped - base.size) { 1 }
        _uiState.value = _uiState.value.copy(diceCount = clamped, values = padded)
    }

    fun setOverlayVisible(visible: Boolean) {
        _uiState.value = _uiState.value.copy(isOverlayVisible = visible)
    }

    fun rollAll(): List<Int> {
        val count = _uiState.value.diceCount
        val newValues = rollDice(count)
        _uiState.value = _uiState.value.copy(values = newValues)
        return newValues
    }

    fun rollOne(index: Int): Int {
        val count = _uiState.value.diceCount
        if (index !in 0 until count) return 1
        val value = rollDice(1).firstOrNull() ?: 1
        val newList = _uiState.value.values.toMutableList()
        if (newList.size < count) {
            while (newList.size < count) newList.add(1)
        }
        newList[index] = value
        _uiState.value = _uiState.value.copy(values = newList)
        return value
    }
}

sealed interface DiceUiEvent {
    data class SetDiceCount(val count: Int) : DiceUiEvent
    data class SetOverlayVisible(val visible: Boolean) : DiceUiEvent
    data object RollAll : DiceUiEvent
    data class RollOne(val index: Int) : DiceUiEvent
}

sealed interface DiceUiEffect



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/components/DiceDieFace.kt
================================================
package com.byteflipper.random.ui.dice.components

import androidx.compose.foundation.Canvas
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.CornerRadius
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Fill
import androidx.compose.ui.graphics.drawscope.Stroke
import kotlin.math.min

@Composable
fun DiceDieFace(value: Int, color: Color, modifier: Modifier = Modifier) {
    Canvas(modifier = modifier) {
        val w = size.width
        val h = size.height
        val s = min(w, h)
        val corner = s * 0.15f

        val darkColor = Color(
            red = (color.red * 0.8f).coerceIn(0f, 1f),
            green = (color.green * 0.8f).coerceIn(0f, 1f),
            blue = (color.blue * 0.8f).coerceIn(0f, 1f)
        )

        val lightColor = Color(
            red = (color.red * 1.2f).coerceIn(0f, 1f),
            green = (color.green * 1.2f).coerceIn(0f, 1f),
            blue = (color.blue * 1.2f).coerceIn(0f, 1f)
        )

        drawRoundRect(
            brush = Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.3f),
                    Color.Black.copy(alpha = 0.2f),
                    Color.Transparent
                ),
                center = Offset(w/2 + 6f, h/2 + 6f),
                radius = s * 0.7f
            ),
            topLeft = Offset(2f, 2f),
            size = Size(w + 4f, h + 4f),
            cornerRadius = CornerRadius(corner + 2f, corner + 2f),
            style = Fill
        )

        drawRoundRect(
            brush = Brush.linearGradient(
                colors = listOf(lightColor, color, darkColor),
                start = Offset(0f, 0f),
                end = Offset(w, h)
            ),
            size = size,
            cornerRadius = CornerRadius(corner, corner),
            style = Fill
        )

        drawRoundRect(
            color = darkColor.copy(alpha = 0.3f),
            topLeft = Offset(2f, 2f),
            size = Size(w - 4f, h - 4f),
            cornerRadius = CornerRadius(corner - 2f, corner - 2f),
            style = Stroke(width = 1.5f)
        )

        drawDots(value, s, w, h)
    }
}

private fun DrawScope.drawDots(value: Int, s: Float, w: Float, h: Float) {
    val margin = s * 0.24f
    val cx = w / 2f
    val cy = h / 2f
    val left = margin
    val right = w - margin
    val top = margin
    val bottom = h - margin
    val pipR = s * 0.08f

    fun drawDot(x: Float, y: Float) {
        drawCircle(
            brush = Brush.radialGradient(
                colors = listOf(
                    Color.Black.copy(alpha = 0.4f),
                    Color.Transparent
                ),
                center = Offset(x + 2f, y + 2f),
                radius = pipR * 1.2f
            ),
            radius = pipR * 1.2f,
            center = Offset(x + 2f, y + 2f)
        )

        drawCircle(
            color = Color.Black.copy(alpha = 0.15f),
            radius = pipR * 1.1f,
            center = Offset(x, y)
        )

        drawCircle(
            brush = Brush.radialGradient(
                colors = listOf(
                    Color(0xFFFAFAFA),
                    Color(0xFFE0E0E0),
                    Color(0xFFBDBDBD)
                ),
                center = Offset(x, y),
                radius = pipR
            ),
            radius = pipR,
            center = Offset(x, y)
        )

        drawCircle(
            brush = Brush.radialGradient(
                colors = listOf(
                    Color.White,
                    Color.White.copy(alpha = 0.3f),
                    Color.Transparent
                ),
                center = Offset(x - pipR * 0.3f, y - pipR * 0.3f),
                radius = pipR * 0.5f
            ),
            radius = pipR * 0.4f,
            center = Offset(x - pipR * 0.3f, y - pipR * 0.3f)
        )
    }

    when (value.coerceIn(1, 6)) {
        1 -> drawDot(cx, cy)
        2 -> { drawDot(left, top); drawDot(right, bottom) }
        3 -> { drawDot(left, top); drawDot(cx, cy); drawDot(right, bottom) }
        4 -> { drawDot(left, top); drawDot(right, top); drawDot(left, bottom); drawDot(right, bottom) }
        5 -> { drawDot(left, top); drawDot(right, top); drawDot(cx, cy); drawDot(left, bottom); drawDot(right, bottom) }
        6 -> { drawDot(left, top); drawDot(left, cy); drawDot(left, bottom); drawDot(right, top); drawDot(right, cy); drawDot(right, bottom) }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/components/DiceFabControls.kt
================================================
package com.byteflipper.random.ui.dice.components

import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.ui.components.SizedFab

@Composable
fun DiceFabControls(
    size: FabSizeSetting,
    isRolling: Boolean,
    onClick: () -> Unit
) {
    val containerColor = if (isRolling)
        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f)
    else
        MaterialTheme.colorScheme.primaryContainer

    val contentColor = if (isRolling)
        MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.5f)
    else
        MaterialTheme.colorScheme.onPrimaryContainer

    SizedFab(
        size = size,
        onClick = onClick,
        containerColor = containerColor,
        contentColor = contentColor
    ) {
        Icon(
            painter = painterResource(R.drawable.autorenew_24px),
            contentDescription = stringResource(R.string.roll_dice)
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/components/DiceGridLayout.kt
================================================
package com.byteflipper.random.ui.dice.components

import kotlin.math.roundToInt
import kotlin.math.sqrt

/**
 * Computes a balanced distribution of dice per row with a maximum of 3 per row.
 * Rows are filled from center to edges to keep the grid visually balanced.
 */
fun computeDiceRowSizes(total: Int): List<Int> {
    if (total <= 0) return emptyList()
    val maxPerRow = 3
    if (total <= 3) return listOf(total)
    if (total == 4) return listOf(2, 2)
    if (total == 5) return listOf(3, 2)

    val minRows = (total + maxPerRow - 1) / maxPerRow
    val desiredRows = sqrt(total.toDouble()).roundToInt().coerceAtLeast(2)
    var rowsCount = maxOf(minRows, desiredRows)

    fun distributeCenter(rowsCount: Int): List<Int> {
        val base = total / rowsCount
        var extra = total % rowsCount
        val rows = MutableList(rowsCount) { base }
        // order of distributing leftover items вЂ” from center to edges
        val order = buildList {
            if (rowsCount % 2 == 1) {
                val mid = rowsCount / 2
                add(mid)
                for (d in 1..mid) {
                    add(mid - d)
                    add(mid + d)
                }
            } else {
                val leftMid = rowsCount / 2 - 1
                val rightMid = rowsCount / 2
                add(leftMid)
                add(rightMid)
                for (d in 1..leftMid) {
                    add(leftMid - d)
                    add(rightMid + d)
                }
            }
        }
        var guard = 0
        while (extra > 0 && guard < order.size * 2) {
            for (idx in order) {
                if (extra == 0) break
                if (rows[idx] < maxPerRow) {
                    rows[idx] += 1
                    extra -= 1
                }
            }
            guard += 1
        }
        return rows
    }

    // Increase row count until all rows are within maxPerRow limit
    while (true) {
        val rows = distributeCenter(rowsCount)
        if (rows.all { it <= maxPerRow }) return rows
        rowsCount += 1
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/dice/components/DiceOverlay.kt
================================================
package com.byteflipper.random.ui.dice.components

import androidx.activity.compose.BackHandler
import androidx.compose.animation.core.Animatable
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.State
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R

@Composable
fun DiceOverlay(
    scrimAlpha: Float,
    diceCount: Int,
    rotations: List<Animatable<Float, *>>,
    scales: List<Animatable<Float, *>>,
    isAnimating: List<Boolean>,
    animatedColors: List<State<Color>>,
    values: List<Int>,
    onDismiss: () -> Unit,
    onDieClick: (Int) -> Unit
) {
    BackHandler(enabled = true) { onDismiss() }

    Box(modifier = Modifier
        .fillMaxSize()
        .background(Color.Black.copy(alpha = 0.5f * scrimAlpha))
        .clickable(
            interactionSource = remember { MutableInteractionSource() },
            indication = null
        ) { onDismiss() }
    ) {
        BoxWithConstraints(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            val rowSizes = computeDiceRowSizes(diceCount)
            val rows = rowSizes.size
            val spacing = 16.dp
            val maxInRow = rowSizes.maxOrNull() ?: 1
            val widthCandidate = (maxWidth - spacing * (maxInRow - 1)) / maxInRow
            val heightCandidate = (maxHeight - spacing * (rows - 1)) / rows
            val dieSize = kotlin.math.min(widthCandidate.value, heightCandidate.value).dp.coerceIn(84.dp, 200.dp)

            Column(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = androidx.compose.foundation.layout.Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                var index = 0
                repeat(rows) { rowIdx ->
                    Row(
                        horizontalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(spacing),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        val countInRow = rowSizes[rowIdx]
                        repeat(countInRow) {
                            if (index < diceCount) {
                                val i = index
                                Box(
                                    modifier = Modifier
                                        .size(dieSize)
                                        .graphicsLayer {
                                            rotationZ = rotations[i].value
                                            scaleX = scales[i].value
                                            scaleY = scales[i].value
                                        }
                                        .clip(RoundedCornerShape(16.dp))
                                        .clickable(
                                            interactionSource = remember { MutableInteractionSource() },
                                            indication = null,
                                            enabled = !isAnimating[i]
                                        ) {
                                            onDieClick(i)
                                        },
                                    contentAlignment = Alignment.Center
                                ) {
                                    DiceDieFace(value = values.getOrNull(i) ?: 1, color = animatedColors[i].value, modifier = Modifier.fillMaxSize())
                                }
                                index++
                            }
                        }
                    }
                    if (rowIdx < rows - 1) Spacer(Modifier.height(spacing))
                }
                Spacer(Modifier.height(32.dp))
                val total = values.take(diceCount).sum()
                Text(
                    text = "${stringResource(R.string.sum)}: $total",
                    style = MaterialTheme.typography.headlineSmall,
                    color = Color.White
                )
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeContent.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.ui.home.components.MenuCard
import com.byteflipper.random.ui.home.components.PresetCard
import sh.calvin.reorderable.ReorderableItem
import sh.calvin.reorderable.rememberReorderableLazyListState

@Composable
fun HomeContent(
    modifier: Modifier = Modifier,
    items: List<HomeItem>,
    onMoveItem: (Int, Int) -> Unit,
    onOpenNumbers: () -> Unit,
    onOpenList: () -> Unit,
    onAddList: () -> Unit,
    onOpenListById: (Long) -> Unit,
    onOpenDice: () -> Unit,
    onOpenLot: () -> Unit,
    onOpenCoin: () -> Unit,
    onRenamePreset: (ListPreset) -> Unit,
    onDeletePreset: (ListPreset) -> Unit
) {
    val lazyListState = androidx.compose.foundation.lazy.rememberLazyListState()
    val reorderState = rememberReorderableLazyListState(lazyListState) { from, to ->
        onMoveItem(from.index, to.index)
    }

    LazyColumn(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp, 0.dp),
        state = lazyListState,
        verticalArrangement = Arrangement.spacedBy(6.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
    ) {
        items(
            items = items,
            key = { item -> when (item) { is HomeItem.MenuItem -> "menu_${item.type}"; is HomeItem.PresetItem -> "preset_${item.preset.id}" } }
        ) { item ->
            ReorderableItem(
                state = reorderState,
                key = when (item) { is HomeItem.MenuItem -> "menu_${item.type}"; is HomeItem.PresetItem -> "preset_${item.preset.id}" }
            ) { isDragging ->
                val elevation by animateDpAsState(
                    targetValue = if (isDragging) 4.dp else 0.dp,
                    label = "drag-elevation"
                )

                Box() {
                    val dragModifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 6.dp)
                        .longPressDraggableHandle()

                    when (item) {
                        is HomeItem.MenuItem -> {
                            val onAdd: (() -> Unit)? = when (item.type) {
                                MenuItemType.NUMBERS -> null
                                MenuItemType.LIST -> onAddList
                                else -> null
                            }

                            MenuCard(
                                icon = when (item.type) {
                                    MenuItemType.NUMBERS -> painterResource(id = R.drawable.looks_one_24px)
                                    MenuItemType.LIST -> painterResource(id = R.drawable.list_alt_24px)
                                    MenuItemType.DICE -> painterResource(id = R.drawable.ifl_24px)
                                    MenuItemType.LOT -> painterResource(id = R.drawable.gavel_24px)
                                    MenuItemType.COIN -> painterResource(id = R.drawable.paid_24px)
                                },
                                title = when (item.type) {
                                    MenuItemType.NUMBERS -> stringResource(R.string.numbers)
                                    MenuItemType.LIST -> stringResource(R.string.list)
                                    MenuItemType.DICE -> stringResource(R.string.dice)
                                    MenuItemType.LOT -> stringResource(R.string.lot)
                                    MenuItemType.COIN -> stringResource(R.string.coin)
                                },
                                onClick = when (item.type) {
                                    MenuItemType.NUMBERS -> onOpenNumbers
                                    MenuItemType.LIST -> onOpenList
                                    MenuItemType.DICE -> onOpenDice
                                    MenuItemType.LOT -> onOpenLot
                                    MenuItemType.COIN -> onOpenCoin
                                },
                                onAddClick = onAdd,
                                modifier = dragModifier
                            )
                        }

                        is HomeItem.PresetItem -> {
                            PresetCard(
                                preset = item.preset,
                                onPresetClick = { preset -> onOpenListById(preset.id) },
                                onRenameClick = { preset -> onRenamePreset(preset) },
                                onDeleteClick = { preset -> onDeletePreset(preset) },
                                modifier = dragModifier
                            )
                        }
                    }
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeScaffold.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScaffold(
    onOpenAbout: () -> Unit,
    onOpenSettings: () -> Unit,
    content: @Composable (androidx.compose.foundation.layout.PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { HomeTopBar(onOpenAbout, onOpenSettings) },
        contentWindowInsets = WindowInsets.systemBars,
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeScreen.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Casino
import androidx.compose.material.icons.outlined.FormatListBulleted
import androidx.compose.material.icons.outlined.FormatListNumbered
import androidx.compose.material.icons.outlined.Gavel
import androidx.compose.material.icons.outlined.MonetizationOn
import androidx.compose.material.icons.outlined.Settings
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalHapticFeedback
import com.byteflipper.random.ui.components.LocalHapticsManager
import com.byteflipper.random.data.settings.HapticsIntensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.ui.home.components.CreateListDialog
import com.byteflipper.random.ui.home.components.MenuCard
import com.byteflipper.random.ui.home.components.PresetCard
import com.byteflipper.random.ui.home.components.RenameListDialog
 
import sh.calvin.reorderable.ReorderableItem
import sh.calvin.reorderable.rememberReorderableLazyListState

// РўРёРїС‹ СЌР»РµРјРµРЅС‚РѕРІ РґР»СЏ drag & drop
sealed class HomeItem {
    data class MenuItem(val type: MenuItemType) : HomeItem()
    data class PresetItem(val preset: ListPreset) : HomeItem()
}

enum class MenuItemType {
    NUMBERS, LIST, DICE, LOT, COIN
}

private fun keyFor(item: HomeItem): String = when (item) {
    is HomeItem.MenuItem -> "menu_${item.type}"
    is HomeItem.PresetItem -> "preset_${item.preset.id}"
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    onOpenNumbers: () -> Unit,
    onOpenList: () -> Unit,
    onOpenListById: (Long) -> Unit,
    onOpenDice: () -> Unit,
    onOpenLot: () -> Unit,
    onOpenCoin: () -> Unit,
    onOpenSettings: () -> Unit,
    onOpenAbout: () -> Unit,
    onAddNumbersPreset: () -> Unit,
    onAddListPreset: () -> Unit, // РѕСЃС‚Р°РІР»РµРЅ РґР»СЏ СЃРѕРІРјРµСЃС‚РёРјРѕСЃС‚Рё
) {
 
    val viewModel: HomeViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()
    val presets by viewModel.presets.collectAsStateWithLifecycle()


    var showCreateDialog by rememberSaveable { mutableStateOf(false) }
    var createName by rememberSaveable { mutableStateOf("") }
    var renameTarget by remember { mutableStateOf<ListPreset?>(null) }

    // РЎРѕСЃС‚РѕСЏРЅРёРµ РґР»СЏ СЌР»РµРјРµРЅС‚РѕРІ
    var items by remember { mutableStateOf<List<HomeItem>>(emptyList()) }

    // Р¤РѕСЂРјРёСЂСѓРµРј СЃРїРёСЃРѕРє (РјРµРЅСЋ + РїСЂРµСЃРµС‚С‹) РїСЂРё РёР·РјРµРЅРµРЅРёРё РїСЂРµСЃРµС‚РѕРІ
    LaunchedEffect(presets) {
        val menuItems = listOf(
            HomeItem.MenuItem(MenuItemType.NUMBERS),
            HomeItem.MenuItem(MenuItemType.LIST),
            HomeItem.MenuItem(MenuItemType.DICE),
            HomeItem.MenuItem(MenuItemType.LOT),
            HomeItem.MenuItem(MenuItemType.COIN)
        )
        val presetItems = presets.map { HomeItem.PresetItem(it) }
        items = menuItems + presetItems
    }

    // РџРµСЂРµСѓРїРѕСЂСЏРґРѕС‡РёРІР°РЅРёРµ
    fun moveItem(fromIndex: Int, toIndex: Int) {
        if (fromIndex == toIndex || fromIndex !in items.indices || toIndex !in items.indices) return
        val newItems = items.toMutableList()
        val moved = newItems.removeAt(fromIndex)
        newItems.add(toIndex, moved)
        items = newItems
    }



    HomeScaffold(onOpenAbout, onOpenSettings) { inner ->
        HomeContent(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner),
            items = items,
            onMoveItem = { a, b -> moveItem(a, b) },
            onOpenNumbers = onOpenNumbers,
            onOpenList = onOpenList,
            onAddList = { showCreateDialog = true },
            onOpenListById = onOpenListById,
            onOpenDice = onOpenDice,
            onOpenLot = onOpenLot,
            onOpenCoin = onOpenCoin,
            onRenamePreset = { renameTarget = it },
            onDeletePreset = { viewModel.onEvent(HomeUiEvent.DeletePreset(it)) }
        )
    }

    CreateListDialog(
        showDialog = showCreateDialog,
        onDismiss = {
            showCreateDialog = false
            createName = ""
        },
        presetCount = presets.size,
        onCreate = { name, items -> viewModel.onEvent(HomeUiEvent.CreatePreset(name, items)) },
        onPresetCreated = {
            showCreateDialog = false
            createName = ""
        }
    )

    if (renameTarget != null) {
        RenameListDialog(
            preset = renameTarget,
            onDismiss = { renameTarget = null },
            onRename = { preset, newName -> viewModel.onEvent(HomeUiEvent.RenamePreset(preset, newName)) },
            onPresetRenamed = { renameTarget = null }
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeTopBar.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeTopBar(onOpenAbout: () -> Unit, onOpenSettings: () -> Unit) {
    TopAppBar(
        title = {
            Text(
                stringResource(R.string.random),
                style = MaterialTheme.typography.headlineSmall.copy(
                    fontWeight = FontWeight.Bold
                )
            )
        },
        actions = {
            IconButton(onClick = onOpenAbout) {
                Icon(
                    painterResource(id = R.drawable.info_24px),
                    contentDescription = stringResource(R.string.about_app),
                )
            }
            IconButton(onClick = onOpenSettings) {
                Icon(
                    painterResource(id = R.drawable.settings_24px),
                    contentDescription = stringResource(R.string.settings),
                )
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeViewModel.kt
================================================
package com.byteflipper.random.ui.home

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import com.byteflipper.random.data.settings.SettingsRepository
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class HomeViewModel @Inject constructor(
    val listPresetRepository: ListPresetRepository,
    private val settingsRepository: SettingsRepository
) : ViewModel() {

    val presets: StateFlow<List<ListPreset>> = listPresetRepository.observeAll()
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = emptyList()
        )

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    fun onEvent(event: HomeUiEvent) {
        when (event) {
            is HomeUiEvent.DeletePreset -> viewModelScope.launch { listPresetRepository.delete(event.preset) }
            is HomeUiEvent.CreatePreset -> viewModelScope.launch {
                val preset = ListPreset(name = event.name, items = event.items)
                listPresetRepository.upsert(preset)
            }
            is HomeUiEvent.RenamePreset -> viewModelScope.launch {
                val updatedPreset = event.preset.copy(name = event.newName)
                listPresetRepository.upsert(updatedPreset)
            }
        }
    }
}

sealed interface HomeUiEvent {
    data class DeletePreset(val preset: ListPreset) : HomeUiEvent
    data class CreatePreset(val name: String, val items: List<String>) : HomeUiEvent
    data class RenamePreset(val preset: ListPreset, val newName: String) : HomeUiEvent
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/CreateListDialog.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R

@Composable
fun CreateListDialog(
    showDialog: Boolean,
    onDismiss: () -> Unit,
    presetCount: Int,
    onCreate: (name: String, defaultItems: List<String>) -> Unit,
    onPresetCreated: () -> Unit
) {
    val context = LocalContext.current
    var createName by rememberSaveable { mutableStateOf("") }

    if (showDialog) {
        val nextNumber = presetCount + 1
        if (createName.isBlank()) createName = "${context.getString(R.string.new_list)} $nextNumber"

        AlertDialog(
            onDismissRequest = onDismiss,
            title = { Text(stringResource(R.string.new_list)) },
            text = {
                Column {
                    OutlinedTextField(
                        value = createName,
                        onValueChange = { createName = it },
                        singleLine = true,
                        label = { Text(stringResource(R.string.list_name)) },
                        modifier = Modifier.fillMaxWidth()
                    )
                    Spacer(Modifier.height(8.dp))
                }
            },
            confirmButton = {
                TextButton(onClick = {
                    val name = createName.trim().ifEmpty { "${context.getString(R.string.new_list)} $nextNumber" }
                    val items = listOf(
                        context.getString(R.string.item_1),
                        context.getString(R.string.item_2),
                        context.getString(R.string.item_3)
                    )
                    onCreate(name, items)
                    onPresetCreated()
                }) { Text(stringResource(R.string.save)) }
            },
            dismissButton = {
                TextButton(onClick = onDismiss) { Text(stringResource(R.string.cancel)) }
            }
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/MenuCard.kt
================================================
Error reading file with 'cp1251': 'charmap' codec can't decode byte 0x98 in position 3296: character maps to <undefined>


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetActionButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Edit
import androidx.compose.material.icons.outlined.Delete
import androidx.compose.material.icons.outlined.MoreVert
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetActionButton(
    preset: ListPreset,
    onRenameClick: (ListPreset) -> Unit,
    onDeleteClick: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    var expanded by remember { mutableStateOf(false) }

    DropdownMenu(
        expanded = expanded,
        onDismissRequest = { expanded = false }
    ) {
        DropdownMenuItem(
            text = { Text(stringResource(R.string.rename)) },
            leadingIcon = {
                Icon(
                    imageVector = Icons.Outlined.Edit,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary
                )
            },
            onClick = {
                expanded = false
                onRenameClick(preset)
            }
        )
        DropdownMenuItem(
            text = { Text(stringResource(R.string.delete)) },
            leadingIcon = {
                Icon(
                    imageVector = Icons.Outlined.Delete,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.error
                )
            },
            onClick = {
                expanded = false
                onDeleteClick(preset)
            }
        )
    }

    IconButton(
        onClick = { expanded = true },
        modifier = modifier.size(40.dp)
    ) {
        Icon(
            imageVector = Icons.Outlined.MoreVert,
            contentDescription = stringResource(R.string.preset_actions),
            tint = MaterialTheme.colorScheme.onSurfaceVariant,
            modifier = Modifier.size(20.dp)
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetButton(
    preset: ListPreset,
    onPresetClick: (ListPreset) -> Unit,
    onRenameClick: (ListPreset) -> Unit,
    onDeleteClick: (ListPreset) -> Unit,
    onUsePreset: (ListPreset) -> Unit,
    onSharePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        PresetCard(
            preset = preset,
            onPresetClick = onPresetClick,
            onRenameClick = onRenameClick,
            onDeleteClick = onDeleteClick
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 18.dp),
            horizontalArrangement = Arrangement.End,
            verticalAlignment = Alignment.CenterVertically
        ) {
            PresetQuickActionButton(
                preset = preset,
                onUsePreset = onUsePreset,
                onSharePreset = onSharePreset
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetCard.kt
================================================
Error reading file with 'cp1251': 'charmap' codec can't decode byte 0x98 in position 3355: character maps to <undefined>


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetList.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetList(
    presets: List<ListPreset>,
    onPresetClick: (ListPreset) -> Unit,
    onRenamePreset: (ListPreset) -> Unit,
    onDeletePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    LazyColumn(modifier = modifier.fillMaxWidth()) {
        items(presets, key = { it.id }) { preset ->
            PresetCard(
                preset = preset,
                onPresetClick = onPresetClick,
                onRenameClick = onRenamePreset,
                onDeleteClick = onDeletePreset
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/PresetQuickActionButton.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.PlayArrow
import androidx.compose.material.icons.outlined.Share
import androidx.compose.material3.FilledTonalIconButton
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun PresetQuickActionButton(
    preset: ListPreset,
    onUsePreset: (ListPreset) -> Unit,
    onSharePreset: (ListPreset) -> Unit,
    modifier: Modifier = Modifier
) {
    Row(modifier = modifier) {
        FilledTonalIconButton(
            onClick = { onUsePreset(preset) },
            modifier = Modifier.size(36.dp)
        ) {
            Icon(
                imageVector = Icons.Outlined.PlayArrow,
                contentDescription = stringResource(R.string.use_preset),
                modifier = Modifier.size(18.dp)
            )
        }

        FilledTonalIconButton(
            onClick = { onSharePreset(preset) },
            modifier = Modifier.size(36.dp)
        ) {
            Icon(
                imageVector = Icons.Outlined.Share,
                contentDescription = stringResource(R.string.share_preset),
                modifier = Modifier.size(18.dp)
            )
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/components/RenameListDialog.kt
================================================
package com.byteflipper.random.ui.home.components

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R
import com.byteflipper.random.data.preset.ListPreset

@Composable
fun RenameListDialog(
    preset: ListPreset?,
    onDismiss: () -> Unit,
    onRename: (ListPreset, String) -> Unit,
    onPresetRenamed: () -> Unit
) {
    var renameName by rememberSaveable { mutableStateOf(preset?.name ?: "") }

    if (preset != null) {
        AlertDialog(
            onDismissRequest = onDismiss,
            title = { Text(stringResource(R.string.rename_list)) },
            text = {
                OutlinedTextField(
                    value = renameName,
                    onValueChange = { renameName = it },
                    singleLine = true,
                    label = { Text(stringResource(R.string.new_name)) },
                    modifier = Modifier.fillMaxWidth()
                )
            },
            confirmButton = {
                TextButton(onClick = {
                    val newName = renameName.trim()
                    if (newName.isNotEmpty()) {
                        onRename(preset, newName)
                        onPresetRenamed()
                    }
                }) { Text(stringResource(R.string.save)) }
            },
            dismissButton = {
                TextButton(onClick = onDismiss) { Text(stringResource(R.string.cancel)) }
            }
        )
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListContent.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.runtime.Composable
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.ui.Modifier
import com.byteflipper.random.ui.components.EditorList

@Composable
fun ListContent(
    modifier: Modifier = Modifier,
    items: List<String>,
    onItemsChange: (List<String>) -> Unit
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.Top
    ) {
        EditorList(
            items = SnapshotStateList<String>().apply {
                clear()
                addAll(items)
            },
            onItemsChange = onItemsChange,
            modifier = Modifier.fillMaxWidth().weight(1f, fill = false),
            minItems = 1
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListScaffold.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ListScaffold(
    onBack: () -> Unit,
    title: String,
    onShowSave: (() -> Unit)? = null,
    onShowRename: (() -> Unit)? = null,
    snackbarHostState: SnackbarHostState,
    floatingActionButton: @Composable () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { ListTopBar(onBack = onBack, title = title, onShowSave = onShowSave, onShowRename = onShowRename) },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = floatingActionButton,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListScreen.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.compose.animation.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.SnackbarResult
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.geometry.Offset
import androidx.compose.material.icons.outlined.SortByAlpha
import androidx.compose.material.icons.outlined.Shuffle
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.R
import com.byteflipper.random.ui.components.flip.FlipCardControls
import com.byteflipper.random.ui.components.flip.FlipCardOverlay
import com.byteflipper.random.ui.components.GeneratorConfigDialog
import com.byteflipper.random.ui.components.flip.rememberFlipCardState
import com.byteflipper.random.ui.lists.components.ListRenameDialog
import com.byteflipper.random.ui.lists.components.ListSaveDialog
import com.byteflipper.random.ui.lists.components.ListResultsDisplay
import com.byteflipper.random.ui.lists.components.ListFabControls
import com.byteflipper.random.ui.theme.getRainbowColors
import com.byteflipper.random.ui.settings.components.RadioOption
import kotlinx.coroutines.launch
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalConfiguration
import com.byteflipper.random.ui.components.LocalHapticsManager
import com.byteflipper.random.ui.lists.components.ListSortingMode
import com.byteflipper.random.ui.theme.CardContentTheme
import kotlin.math.min
import kotlin.random.Random


private fun Set<String>.indicesOf(baseSize: Int): Set<Int> {
    // Just a bounded placeholder set for the dialog. We don't need exact numbers UI for lists.
    return if (this.isEmpty()) emptySet() else (0 until kotlin.math.min(this.size, baseSize)).toSet()
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ListScreen(onBack: () -> Unit, presetId: Long? = null, onOpenListById: (Long) -> Unit = {}) {
    val viewModel: ListViewModel = hiltViewModel()
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val settings by viewModel.settings.collectAsStateWithLifecycle()
    val presets by viewModel.presets.collectAsStateWithLifecycle()

    val listString = stringResource(R.string.list)

    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val hapticsManager = LocalHapticsManager.current

    var fabCenterInRoot by remember { androidx.compose.runtime.mutableStateOf(Offset.Zero) }
    var fabSize by remember { androidx.compose.runtime.mutableStateOf(IntSize.Zero) }

    val flipState = rememberFlipCardState()
    val flipCtrl = FlipCardControls(flipState)

    fun handleGenerate() {
        val base = viewModel.getBaseItems()
        if (base.isEmpty()) {
            scope.launch { snackbarHostState.showSnackbar("List is empty") }
            return
        }

        if (!uiState.allowRepetitions) {
            val pool = base.filter { it !in uiState.usedItems }.distinct()
            if (pool.isEmpty()) {
                scope.launch {
                    val result = snackbarHostState.showSnackbar(
                        message = "All options used",
                        actionLabel = "Reset"
                    )
                    if (result == SnackbarResult.ActionPerformed) {
                        viewModel.onEvent(ListUiEvent.ResetUsedItems)
                    }
                }
                return
            }
        }

        val delayMs = viewModel.getEffectiveDelayMs().toInt()
        if (!flipCtrl.isVisible()) {
            // РЅР°Р·РЅР°С‡Р°РµРј С†РІРµС‚ РґР»СЏ С‚РµРєСѓС‰РµРіРѕ СЃРїРёРЅР°
            viewModel.onEvent(ListUiEvent.RandomizeCardColor)
            flipCtrl.open()
            viewModel.onEvent(ListUiEvent.SetOverlayVisible(true))
        }

        flipCtrl.spinAndReveal(
            effectiveDelayMs = delayMs,
            onReveal = { _ ->
                val results = viewModel.generateAndUpdateResults()
            },
            onSpinCompleted = {
                viewModel.notifyHapticPressIfEnabled()
            }
        )
    }

    LaunchedEffect(Unit) {
        viewModel.effects.collect { effect ->
            when (effect) {
                is ListUiEffect.ShowSnackbar -> snackbarHostState.showSnackbar(effect.messageRes.toString())
                is ListUiEffect.HapticPress -> hapticsManager?.performPress(effect.intensity)
            }
        }
    }

    val topTitle = if (presetId == null) stringResource(R.string.list) else (uiState.preset?.name ?: stringResource(R.string.list))
    val topSave = if (presetId == null) ({ viewModel.updateSaveName(listString); viewModel.toggleSaveDialog() }) else null
    val topRename = if (presetId != null) ({ viewModel.updateRenameName(uiState.preset?.name ?: ""); viewModel.toggleRenameDialog() }) else null

    ListScaffold(
        onBack = onBack,
        title = topTitle,
        onShowSave = topSave,
        onShowRename = topRename,
        snackbarHostState = snackbarHostState,
        floatingActionButton = {
            ListFabControls(
                onConfigClick = { viewModel.toggleConfigDialog() },
                onGenerateClick = { handleGenerate() },
                onFabPositioned = { center, size ->
                    fabCenterInRoot = center
                    fabSize = size
                }
            )
        }
    ) { inner ->
        Box(modifier = Modifier.fillMaxSize().padding(inner)) {
            val blur = (8f * flipCtrl.scrimProgress.value).dp

            if (presetId == null || uiState.preset != null) {
                ListContent(
                    modifier = Modifier.fillMaxSize().padding(16.dp).blur(blur),
                    items = uiState.editorItems,
                    onItemsChange = { viewModel.onEvent(ListUiEvent.UpdateEditorItems(it)) }
                )
            } else {
                Text(stringResource(R.string.loading), style = MaterialTheme.typography.bodyMedium)
            }

            val rainbowColors = getRainbowColors()
            val animatedColor = remember { Animatable(Color.Transparent) }
            val targetColor = remember(uiState.cardColorSeed, uiState.results) {
                val r = uiState.cardColorSeed?.let { Random(it) } ?: Random
                rainbowColors[r.nextInt(rainbowColors.size)]
            }
            LaunchedEffect(targetColor) {
                if (animatedColor.value == Color.Transparent) {
                    animatedColor.snapTo(targetColor)
                } else {
                    animatedColor.animateTo(targetColor, tween(400))
                }
            }

            val configuration = LocalConfiguration.current
            val maxCardSide = (min(configuration.screenWidthDp, configuration.screenHeightDp) - 64).dp
            val listCardSize = 320.dp.coerceAtMost(maxCardSide)

            val resultsCount = uiState.results.size
            val heightScale = when {
                resultsCount <= 5 -> 1.0f
                resultsCount <= 10 -> 1.2f
                resultsCount <= 20 -> 1.4f
                resultsCount <= 40 -> 1.6f
                else -> 1.8f
            }
            val listCardHeight = (listCardSize * heightScale).coerceIn(300.dp, maxCardSide)

            FlipCardOverlay(
                state = flipState,
                anchorInRoot = fabCenterInRoot,
                onClosed = {
                    viewModel.onEvent(ListUiEvent.ClearResults)
                    viewModel.onEvent(ListUiEvent.SetOverlayVisible(false))
                },
                frontContainerColor = animatedColor.value,
                backContainerColor = animatedColor.value,
                cardSize = listCardSize,
                cardHeight = listCardHeight,
                frontContent = {
                    CardContentTheme {
                        ListResultsDisplay(
                            results = uiState.results,
                            cardColor = animatedColor.value,
                            cardSize = listCardHeight
                        )
                    }
                },
                backContent = {
                    CardContentTheme {
                        ListResultsDisplay(
                            results = uiState.results,
                            cardColor = animatedColor.value,
                            cardSize = listCardHeight
                        )
                    }
                }
            )

            if (uiState.showConfigDialog) {
                val sortOptions = listOf(
                    RadioOption(
                        key = ListSortingMode.Random.name,
                        title = stringResource(R.string.random_order),
                        icon = rememberVectorPainter(Icons.Outlined.Shuffle)
                    ),
                    RadioOption(
                        key = ListSortingMode.AlphabeticalAZ.name,
                        title = stringResource(R.string.alphabetical_az),
                        icon = rememberVectorPainter(Icons.Outlined.SortByAlpha)
                    ),
                    RadioOption(
                        key = ListSortingMode.AlphabeticalZA.name,
                        title = stringResource(R.string.alphabetical_za),
                        icon = rememberVectorPainter(Icons.Outlined.SortByAlpha)
                    )
                )
                GeneratorConfigDialog(
                    visible = uiState.showConfigDialog,
                    onDismissRequest = { viewModel.onEvent(ListUiEvent.ToggleConfigDialog) },
                    countText = uiState.countText,
                    onCountChange = { viewModel.onEvent(ListUiEvent.UpdateCountText(it)) },
                    allowRepetitions = uiState.allowRepetitions,
                    onAllowRepetitionsChange = { viewModel.onEvent(ListUiEvent.UpdateAllowRepetitions(it)) },
                    usedNumbers = uiState.usedItems.indicesOf(baseSize = 1_000_000),
                    availableRange = null,
                    onResetUsedNumbers = { viewModel.onEvent(ListUiEvent.ResetUsedItems) },
                    useDelay = uiState.useDelay,
                    onUseDelayChange = { viewModel.onEvent(ListUiEvent.UpdateUseDelay(it)) },
                    delayText = uiState.delayText,
                    onDelayChange = { viewModel.onEvent(ListUiEvent.UpdateDelayText(it)) },
                    sortingOptions = sortOptions,
                    selectedSortingKey = uiState.sortingMode.name,
                    onSortingChange = { key ->
                        val mode = ListSortingMode.valueOf(key)
                        viewModel.onEvent(ListUiEvent.UpdateSortingMode(mode))
                    }
                )
            }

            if (uiState.showRenameDialog && presetId != null) {
                ListRenameDialog(
                    currentName = uiState.renameName,
                    onDismiss = { viewModel.onEvent(ListUiEvent.ToggleRenameDialog) },
                    onConfirm = { newName ->
                        viewModel.onEvent(ListUiEvent.UpdateRenameName(newName))
                        viewModel.renamePreset()
                    }
                )
            }

            if (uiState.showSaveDialog) {
                ListSaveDialog(
                    currentName = uiState.saveName,
                    presetCount = presets.size,
                    onDismiss = { viewModel.onEvent(ListUiEvent.ToggleSaveDialog) },
                    onConfirm = { name, shouldOpenAfterSave ->
                        viewModel.onEvent(ListUiEvent.UpdateSaveName(name))
                        viewModel.onEvent(ListUiEvent.UpdateOpenAfterSave(shouldOpenAfterSave))
                        viewModel.saveAsNewPreset { newId ->
                            if (shouldOpenAfterSave) {
                                onOpenListById(newId)
                            }
                        }
                    }
                )
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListTopBar.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.compose.ui.res.painterResource
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ListTopBar(onBack: () -> Unit, title: String, onShowSave: (() -> Unit)?, onShowRename: (() -> Unit)?) {
    TopAppBar(
        title = { Text(title) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(painterResource(R.drawable.arrow_back_24px), contentDescription = stringResource(R.string.back))
            }
        },
        actions = {
            if (onShowSave != null) {
                IconButton(onClick = onShowSave) { Icon(painterResource(R.drawable.save_24px), contentDescription = stringResource(R.string.save)) }
            }
            if (onShowRename != null) {
                IconButton(onClick = onShowRename) { Icon(painterResource(R.drawable.edit_24px), contentDescription = stringResource(R.string.rename)) }
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/ListViewModel.kt
================================================
package com.byteflipper.random.ui.lists

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetRepository
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.utils.Constants.DEFAULT_DELAY_MS
import com.byteflipper.random.utils.Constants.DEFAULT_GENERATE_COUNT
import com.byteflipper.random.utils.Constants.INSTANT_DELAY_MS
import com.byteflipper.random.utils.Constants.MAX_GENERATE_COUNT
import com.byteflipper.random.utils.Constants.MIN_DELAY_MS
import com.byteflipper.random.utils.Constants.MIN_GENERATE_COUNT
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject
import java.text.Normalizer
import java.util.Locale
import kotlin.random.Random
import com.byteflipper.random.domain.lists.ListSortingMode as DomainListSortingMode
import com.byteflipper.random.domain.lists.usecase.GenerateListResultsUseCase
import com.byteflipper.random.domain.lists.usecase.SortListResultsUseCase
import com.byteflipper.random.ui.lists.components.ListSortingMode

data class ListUiState(
    val preset: ListPreset? = null,
    val editorItems: List<String> = emptyList(),
    val results: List<String> = emptyList(),
    val isLoading: Boolean = false,
    val countText: String = DEFAULT_GENERATE_COUNT.toString(),
    val delayText: String = DEFAULT_DELAY_MS.toString(),
    val useDelay: Boolean = true,
    val allowRepetitions: Boolean = true,
    val usedItems: Set<String> = emptySet(),
    val showConfigDialog: Boolean = false,
    val showRenameDialog: Boolean = false,
    val showSaveDialog: Boolean = false,
    val saveName: String = "",
    val renameName: String = "",
    val openAfterSave: Boolean = true,
    val sortingMode: ListSortingMode = ListSortingMode.Random,
    val isOverlayVisible: Boolean = false,
    val cardColorSeed: Long? = null
)

sealed interface ListUiEvent {
    data class UpdateEditorItems(val items: List<String>) : ListUiEvent
    data class UpdateCountText(val text: String) : ListUiEvent
    data class UpdateDelayText(val text: String) : ListUiEvent
    data class UpdateUseDelay(val value: Boolean) : ListUiEvent
    data class UpdateAllowRepetitions(val value: Boolean) : ListUiEvent
    data object ToggleConfigDialog : ListUiEvent
    data object ToggleRenameDialog : ListUiEvent
    data class UpdateRenameName(val name: String) : ListUiEvent
    data object ToggleSaveDialog : ListUiEvent
    data class UpdateSaveName(val name: String) : ListUiEvent
    data class UpdateOpenAfterSave(val value: Boolean) : ListUiEvent
    data object ResetUsedItems : ListUiEvent
    data object ClearResults : ListUiEvent
    data class UpdateSortingMode(val mode: ListSortingMode) : ListUiEvent
    data class SetOverlayVisible(val visible: Boolean) : ListUiEvent
    data object RandomizeCardColor : ListUiEvent
}

@HiltViewModel
class ListViewModel @Inject constructor(
    private val listPresetRepository: ListPresetRepository,
    private val settingsRepository: SettingsRepository,
    private val savedStateHandle: SavedStateHandle,
    private val generateListResults: GenerateListResultsUseCase,
    private val sortListResults: SortListResultsUseCase
) : ViewModel() {

    private val presetId: Long? = savedStateHandle.get<Long?>("id")
        ?: savedStateHandle.get<String>("id")?.toLongOrNull()

    private val _uiState = MutableStateFlow(ListUiState())
    val uiState: StateFlow<ListUiState> = _uiState.asStateFlow()

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _effects = kotlinx.coroutines.flow.MutableSharedFlow<ListUiEffect>()
    val effects: kotlinx.coroutines.flow.SharedFlow<ListUiEffect> = _effects

    val presets = listPresetRepository.observeAll().stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = emptyList()
    )

    init {
        loadPreset()
    }
    fun onEvent(event: ListUiEvent) {
        when (event) {
            is ListUiEvent.UpdateEditorItems -> updateEditorItems(event.items)
            is ListUiEvent.UpdateCountText -> updateCountText(event.text)
            is ListUiEvent.UpdateDelayText -> updateDelayText(event.text)
            is ListUiEvent.UpdateUseDelay -> updateUseDelay(event.value)
            is ListUiEvent.UpdateAllowRepetitions -> updateAllowRepetitions(event.value)
            is ListUiEvent.ToggleConfigDialog -> toggleConfigDialog()
            is ListUiEvent.ToggleRenameDialog -> toggleRenameDialog()
            is ListUiEvent.UpdateRenameName -> updateRenameName(event.name)
            is ListUiEvent.ToggleSaveDialog -> toggleSaveDialog()
            is ListUiEvent.UpdateSaveName -> updateSaveName(event.name)
            is ListUiEvent.UpdateOpenAfterSave -> updateOpenAfterSave(event.value)
            is ListUiEvent.ResetUsedItems -> resetUsedItems()
            is ListUiEvent.ClearResults -> clearResults()
            is ListUiEvent.UpdateSortingMode -> updateSortingMode(event.mode)
            is ListUiEvent.SetOverlayVisible -> setOverlayVisible(event.visible)
            is ListUiEvent.RandomizeCardColor -> randomizeCardColor()
        }
    }


    private fun loadPreset() {
        viewModelScope.launch {
            if (presetId == null) {
                // Load default list from DataStore
                val defaultName = settingsRepository.getDefaultListName() ?: "List"
                val defaultItems = settingsRepository.getDefaultListItems()

                val items = if (defaultItems.isEmpty()) {
                    listOf("Item 1", "Item 2", "Item 3") // Default items
                } else {
                    defaultItems
                }

                _uiState.update { state ->
                    state.copy(
                        editorItems = items.ifEmpty { listOf("") }
                    )
                }
            } else {
                val preset = listPresetRepository.getById(presetId)
                preset?.let {
                    _uiState.update { state ->
                        state.copy(
                            preset = it,
                            editorItems = it.items.ifEmpty { listOf("") }
                        )
                    }
                }
            }
        }
    }

    fun updateEditorItems(items: List<String>) {
        _uiState.update { it.copy(editorItems = items) }
        saveCurrent()
    }

    fun updateCountText(text: String) {
        _uiState.update { it.copy(countText = text) }
    }

    fun updateDelayText(text: String) {
        _uiState.update { it.copy(delayText = text) }
    }

    fun updateUseDelay(useDelay: Boolean) {
        _uiState.update { it.copy(useDelay = useDelay) }
    }

    fun updateAllowRepetitions(allowRepetitions: Boolean) {
        _uiState.update { it.copy(allowRepetitions = allowRepetitions) }
    }

    fun toggleConfigDialog() {
        _uiState.update { it.copy(showConfigDialog = !it.showConfigDialog) }
    }

    fun toggleRenameDialog() {
        _uiState.update { it.copy(showRenameDialog = !it.showRenameDialog) }
    }

    fun updateRenameName(name: String) {
        _uiState.update { it.copy(renameName = name) }
    }

    fun toggleSaveDialog() {
        _uiState.update { it.copy(showSaveDialog = !it.showSaveDialog) }
    }

    fun updateSaveName(name: String) {
        _uiState.update { it.copy(saveName = name) }
    }

    fun updateOpenAfterSave(openAfterSave: Boolean) {
        _uiState.update { it.copy(openAfterSave = openAfterSave) }
    }

    fun resetUsedItems() {
        _uiState.update { it.copy(usedItems = emptySet()) }
    }

    fun clearResults() {
        _uiState.update { it.copy(results = emptyList()) }
    }

    fun generate(): List<String> {
        val state = _uiState.value
        val base = getBaseItems()
        val count = state.countText.toIntOrNull()?.coerceIn(MIN_GENERATE_COUNT, MAX_GENERATE_COUNT) ?: DEFAULT_GENERATE_COUNT
        return generateListResults(
            GenerateListResultsUseCase.Params(
                baseItems = base,
                count = count,
                allowRepetitions = state.allowRepetitions,
                usedItems = state.usedItems
            )
        )
    }

    fun generateAndUpdateResults(): List<String> {
        val rawResults = generate()
        val results = applySorting(rawResults)
        _uiState.update { state ->
            state.copy(
                results = results,
                usedItems = if (!state.allowRepetitions && results.isNotEmpty()) {
                    state.usedItems + results
                } else {
                    state.usedItems
                }
            )
        }
        return results
    }

    private fun applySorting(input: List<String>): List<String> {
        val mode = when (_uiState.value.sortingMode) {
            ListSortingMode.Random -> DomainListSortingMode.Random
            ListSortingMode.AlphabeticalAZ -> DomainListSortingMode.AlphabeticalAZ
            ListSortingMode.AlphabeticalZA -> DomainListSortingMode.AlphabeticalZA
        }
        return sortListResults(SortListResultsUseCase.Params(input = input, mode = mode))
    }

    fun updateSortingMode(mode: ListSortingMode) {
        _uiState.update { it.copy(sortingMode = mode) }
    }

    fun getEffectiveDelayMs(): Int {
        val state = _uiState.value
        return if (state.useDelay) {
            state.delayText.toIntOrNull()?.coerceIn(MIN_DELAY_MS, DEFAULT_DELAY_MS * 2) ?: DEFAULT_DELAY_MS
        } else {
            INSTANT_DELAY_MS
        }
    }

    fun getBaseItems(): List<String> {
        return _uiState.value.editorItems.map { it.trim() }.filter { it.isNotEmpty() }
    }

    fun canGenerate(): Boolean {
        return getBaseItems().isNotEmpty()
    }

    fun canResetUsedItems(): Boolean {
        return _uiState.value.usedItems.isNotEmpty()
    }

    fun renamePreset() {
        val state = _uiState.value
        val newName = state.renameName.trim()
        val preset = state.preset

        if (newName.isNotEmpty() && preset != null) {
            viewModelScope.launch {
                val updatedPreset = preset.copy(name = newName)
                listPresetRepository.upsert(updatedPreset)
                _uiState.update { it.copy(preset = updatedPreset, showRenameDialog = false) }
            }
        }
    }

    fun saveAsNewPreset(onPresetCreated: (Long) -> Unit) {
        val state = _uiState.value
        val name = state.saveName.trim()
        val items = getBaseItems()

        if (name.isNotEmpty() && items.isNotEmpty()) {
            viewModelScope.launch {
                val newId = listPresetRepository.upsert(ListPreset(name = name, items = items))
                _uiState.update { it.copy(showSaveDialog = false) }
                if (state.openAfterSave) {
                    onPresetCreated(newId)
                }
            }
        }
    }

    private fun saveCurrent() {
        val state = _uiState.value
        if (presetId != null && state.preset != null) {
            val items = getBaseItems()
            val updatedPreset = state.preset.copy(items = items)
            viewModelScope.launch {
                listPresetRepository.upsert(updatedPreset)
                _uiState.update { it.copy(preset = updatedPreset) }
            }
        } else {
            // Save default list to DataStore
            val items = getBaseItems()
            viewModelScope.launch {
                settingsRepository.setDefaultListItems(items)
            }
        }
    }

    fun notifyHapticPressIfEnabled() {
        if (settings.value.hapticsEnabled) {
            emitEffect(ListUiEffect.HapticPress(settings.value.hapticsIntensity))
        }
    }

    fun setOverlayVisible(visible: Boolean) {
        _uiState.update { it.copy(isOverlayVisible = visible) }
    }

    fun randomizeCardColor() {
        val newSeed = kotlin.random.Random.nextLong()
        _uiState.update { it.copy(cardColorSeed = newSeed) }
    }

    private fun emitEffect(effect: ListUiEffect) {
        viewModelScope.launch { _effects.emit(effect) }
    }
}

sealed interface ListUiEffect {
    data class ShowSnackbar(val messageRes: Int) : ListUiEffect
    data class HapticPress(val intensity: com.byteflipper.random.data.settings.HapticsIntensity) : ListUiEffect
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/components/ListFabControls.kt
================================================
package com.byteflipper.random.ui.lists.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.ui.components.SizedFab

@Composable
fun ListFabControls(
    onConfigClick: () -> Unit,
    onGenerateClick: () -> Unit,
    onFabPositioned: (Offset, IntSize) -> Unit,
    containerColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.primaryContainer,
    contentColor: androidx.compose.ui.graphics.Color = MaterialTheme.colorScheme.onPrimaryContainer
) {
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }

    Column(
        horizontalAlignment = Alignment.End,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        SmallFloatingActionButton(
            onClick = onConfigClick,
            containerColor = MaterialTheme.colorScheme.secondaryContainer,
            contentColor = MaterialTheme.colorScheme.onSecondaryContainer
        ) {
            androidx.compose.material3.Icon(
                painterResource(R.drawable.settings_24px),
                contentDescription = null
            )
        }

        androidx.compose.foundation.layout.Box(
            modifier = Modifier.onGloballyPositioned { coordinates ->
                fabSize = coordinates.size
                val pos = coordinates.positionInRoot()
                fabCenterInRoot = Offset(pos.x + fabSize.width / 2f, pos.y + fabSize.height / 2f)
                onFabPositioned(fabCenterInRoot, fabSize)
            }
        ) {
            SizedFab(
                size = com.byteflipper.random.data.settings.FabSizeSetting.Medium,
                onClick = onGenerateClick,
                containerColor = containerColor,
                contentColor = contentColor
            ) {
                androidx.compose.material3.Icon(
                    painterResource(R.drawable.autorenew_24px),
                    contentDescription = null
                )
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/components/ListRenameDialog.kt
================================================
package com.byteflipper.random.ui.lists.components

import androidx.compose.material3.AlertDialog
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@Composable
fun ListRenameDialog(
    currentName: String,
    onDismiss: () -> Unit,
    onConfirm: (String) -> Unit
) {
    var newName by remember { mutableStateOf(currentName) }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(stringResource(R.string.rename_list)) },
        text = {
            OutlinedTextField(
                value = newName,
                onValueChange = { newName = it },
                singleLine = true,
                label = { Text(stringResource(R.string.new_name)) }
            )
        },
        confirmButton = {
            TextButton(
                onClick = {
                    val trimmedName = newName.trim()
                    if (trimmedName.isNotEmpty()) {
                        onConfirm(trimmedName)
                    }
                }
            ) {
                Text(stringResource(R.string.save))
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text(stringResource(R.string.cancel))
            }
        }
    )
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/components/ListResultsDisplay.kt
================================================
package com.byteflipper.random.ui.lists.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.ui.draw.drawWithContent
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.BlendMode
import androidx.compose.material3.MaterialTheme
import androidx.compose.ui.text.ParagraphStyle
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R
import com.byteflipper.random.utils.Constants

private fun getContrastColor(backgroundColor: Color): Color {
    val luminance = backgroundColor.luminance()
    return if (luminance > 0.5f) Color.Black else Color.White
}

@Composable
fun ListResultsDisplay(
    results: List<String>,
    cardColor: Color,
    cardSize: Dp
) {
    if (results.isNotEmpty()) {
        val lazyListState = rememberLazyListState()
        // РЈРјРµРЅСЊС€РµРЅРЅС‹Рµ РѕС‚СЃС‚СѓРїС‹ РґР»СЏ РєРѕРјРїР°РєС‚РЅРѕСЃС‚Рё
        val adaptivePadding = 16.dp
        val adaptiveSpacing = 4.dp

        AnimatedVisibility(
            visible = true,
            enter = expandVertically(
                animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy, stiffness = Spring.StiffnessLow)
            ) + fadeIn(),
            exit = shrinkVertically() + fadeOut()
        ) {
            Box(
                modifier = Modifier
                    .padding(adaptivePadding)
                    .heightIn(max = (cardSize * 0.9f).coerceAtLeast(200.dp))
                    .fillMaxWidth()
            ) {
                LazyColumn(
                    state = lazyListState,
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center,
                    modifier = Modifier.fillMaxSize()
                ) {
                    val itemTextColor = getContrastColor(cardColor)

                    // Р‘РѕР»РµРµ СЌС„С„РµРєС‚РёРІРЅР°СЏ РіСЂСѓРїРїРёСЂРѕРІРєР° РґР»СЏ СЃРїРёСЃРєРѕРІ
                    val chunkSize = when {
                        results.size <= 5 -> results.size  // РћРґРЅР° СЃС‚СЂРѕРєР°
                        results.size <= 15 -> (results.size + 1) / 2
                        results.size <= 30 -> (results.size + 2) / 3
                        else -> (results.size + 3) / 4
                    }
                    val lines = results.chunked(chunkSize)

                    items(lines) { lineItems ->
                        val line = lineItems.joinToString(", ")
                        // РђРґР°РїС‚РёРІРЅС‹Р№ СЂР°Р·РјРµСЂ С€СЂРёС„С‚Р° РІ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ РєРѕР»РёС‡РµСЃС‚РІР° СЌР»РµРјРµРЅС‚РѕРІ
                        val fontSize = when {
                            results.size <= 10 -> 18.sp
                            results.size <= 25 -> 16.sp
                            results.size <= 50 -> 14.sp
                            else -> 12.sp
                        }
                        
                        Text(
                            text = line,
                            style = MaterialTheme.typography.bodyMedium.copy(
                                textAlign = TextAlign.Center,
                                fontSize = fontSize,
                                lineHeight = fontSize * 1.1f // РљРѕРјРїР°РєС‚РЅС‹Р№ РјРµР¶СЃС‚СЂРѕС‡РЅС‹Р№ РёРЅС‚РµСЂРІР°Р»
                            ),
                            color = itemTextColor,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 4.dp, vertical = 2.dp) // РњРёРЅРёРјР°Р»СЊРЅС‹Рµ РѕС‚СЃС‚СѓРїС‹
                        )
                    }
            }
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/components/ListSaveDialog.kt
================================================
package com.byteflipper.random.ui.lists.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Checkbox
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R

@Composable
fun ListSaveDialog(
    currentName: String,
    presetCount: Int,
    onDismiss: () -> Unit,
    onConfirm: (name: String, openAfterSave: Boolean) -> Unit
) {
    var saveName by remember { mutableStateOf(currentName) }
    var openAfterSave by remember { mutableStateOf(true) }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(stringResource(R.string.save_settings)) },
        text = {
            Column {
                OutlinedTextField(
                    value = saveName,
                    onValueChange = { saveName = it },
                    singleLine = true,
                    label = { Text(stringResource(R.string.list_name)) },
                    modifier = Modifier.fillMaxWidth()
                )
                Spacer(Modifier.height(8.dp))
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Checkbox(
                        checked = openAfterSave,
                        onCheckedChange = { openAfterSave = it }
                    )
                    Text(
                        stringResource(R.string.open_after_save),
                        modifier = Modifier.padding(start = 8.dp)
                    )
                }
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    val trimmedName = saveName.trim()
                    if (trimmedName.isNotEmpty()) {
                        onConfirm(trimmedName, openAfterSave)
                    }
                }
            ) {
                Text(stringResource(R.string.save))
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text(stringResource(R.string.cancel))
            }
        }
    )
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lists/components/ListSortingMode.kt
================================================
package com.byteflipper.random.ui.lists.components

enum class ListSortingMode {
    Random,
    AlphabeticalAZ,
    AlphabeticalZA
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotContent.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

@Composable
fun LotContent(
    modifier: Modifier = Modifier,
    totalText: String,
    markedText: String,
    onTotalChange: (String) -> Unit,
    onMarkedChange: (String) -> Unit
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
            Text(stringResource(R.string.total_fields_label), style = MaterialTheme.typography.labelLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)

            Spacer(Modifier.height(48.dp))

            BasicTextField(
                value = totalText,
                onValueChange = onTotalChange,
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                textStyle = MaterialTheme.typography.displayLarge.copy(
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    fontSize = 64.sp
                )
            )

            Spacer(Modifier.height(48.dp))

            Text(stringResource(R.string.marked_fields_label), style = MaterialTheme.typography.labelLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)

            Spacer(Modifier.height(48.dp))

            BasicTextField(
                value = markedText,
                onValueChange = onMarkedChange,
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                textStyle = MaterialTheme.typography.displayLarge.copy(
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.primary,
                    fontSize = 64.sp
                )
            )
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotScaffold.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LotScaffold(
    onBack: () -> Unit,
    snackbarHostState: SnackbarHostState,
    floatingActionButton: @Composable () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { LotTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = floatingActionButton,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotScreen.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.R
import com.byteflipper.random.ui.components.LocalHapticsManager
import com.byteflipper.random.ui.lot.components.LotFab
import com.byteflipper.random.ui.lot.components.LotOverlay
import com.byteflipper.random.ui.theme.getRainbowColors
import com.byteflipper.random.ui.lot.components.LotFabMode as FabMode
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LotScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val hapticsManager = LocalHapticsManager.current
    val context = androidx.compose.ui.platform.LocalContext.current
    val viewModel: LotViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    // РџРѕР»СѓС‡РµРЅРёРµ СЃС‚СЂРѕРє РёР· СЂРµСЃСѓСЂСЃРѕРІ
    val minimum3Fields = stringResource(R.string.minimum_3_fields)
    val minimum1Marked = stringResource(R.string.minimum_1_marked)
    val markedMoreThanTotal = stringResource(R.string.marked_more_than_total)

    // РџРѕР»СЏ РІРІРѕРґР°
    val totalText = uiState.totalText
    val markedText = uiState.markedText
    val cards = uiState.cards
    val fabMode = uiState.fabMode

    // РђРЅРёРјР°С†РёСЏ СЃРєСЂРёРјР° РїРѕРІРµСЂС… РєРѕРЅС‚РµРЅС‚Р°
    val scrimAlpha by animateFloatAsState(
        targetValue = if (uiState.isOverlayVisible) 1f else 0f,
        animationSpec = tween(250)
    )

    // РџРѕР»СѓС‡РёС‚СЊ С†РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ С‚РµРєСѓС‰РµР№ С‚РµРјС‹
    val rainbowColors = getRainbowColors()

    LaunchedEffect(Unit) {
        viewModel.effects.collect { effect ->
            when (effect) {
                is LotUiEffect.ShowSnackbar -> snackbarHostState.showSnackbar(message = context.getString(effect.messageRes))
                is LotUiEffect.HapticPress -> hapticsManager?.performPress(effect.intensity)
            }
        }
    }

    LotScaffold(
        onBack = onBack,
        snackbarHostState = snackbarHostState,
        floatingActionButton = {
            LotFab(
                size = settings.fabSize,
                mode = fabMode,
                onClick = {
                    if (cards.isEmpty()) {
                        viewModel.onEvent(LotUiEvent.GenerateRequested(rainbowColors))
                    } else {
                        when (fabMode) {
                            FabMode.RevealAll -> viewModel.onEvent(LotUiEvent.RevealAll)
                            FabMode.Randomize -> viewModel.onEvent(LotUiEvent.Shuffle)
                        }
                    }
                }
            )
        }
    ) { inner ->
        Box(modifier = Modifier.fillMaxSize().padding(inner)) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur((8f * scrimAlpha).dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                LotContent(
                    modifier = Modifier.fillMaxWidth(),
                    totalText = totalText,
                    markedText = markedText,
                    onTotalChange = { new -> viewModel.onEvent(LotUiEvent.TotalChanged(new)) },
                    onMarkedChange = { new -> viewModel.onEvent(LotUiEvent.MarkedChanged(new)) }
                )
            }

            // РћРІРµСЂР»РµР№: РѕС‚РѕР±СЂР°Р¶Р°РµРј С‚РѕР»СЊРєРѕ РєРѕРіРґР° isOverlayVisible = true
            if (uiState.isOverlayVisible) {
                LotOverlay(
                    cards = cards,
                    scrimAlpha = scrimAlpha,
                    onDismiss = {
                        viewModel.onEvent(LotUiEvent.OverlayDismissed)
                    },
                    onCardClick = { id -> viewModel.onEvent(LotUiEvent.CardClicked(id)) }
                )
            }
        }
    }
}




================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotTopBar.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.compose.ui.res.painterResource
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LotTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.lot_title)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(painterResource(R.drawable.arrow_back_24px), contentDescription = stringResource(R.string.back))
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/LotViewModel.kt
================================================
package com.byteflipper.random.ui.lot

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.domain.lot.usecase.GenerateMarkedIndicesUseCase
import com.byteflipper.random.domain.lot.usecase.ValidateLotInputsUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import javax.inject.Inject
import com.byteflipper.random.R
import androidx.compose.ui.graphics.Color
import kotlin.random.Random
import com.byteflipper.random.data.settings.HapticsIntensity
import com.byteflipper.random.ui.lot.components.LotCard
import com.byteflipper.random.ui.lot.components.LotFabMode
import com.byteflipper.random.ui.lot.components.computeRowSizes
import com.byteflipper.random.ui.lot.components.distributeColorsSmartly
import kotlinx.coroutines.launch

data class LotUiState(
    val totalText: String = "10",
    val markedText: String = "3",
    val markedIndices: Set<Int> = emptySet(),
    val isOverlayVisible: Boolean = false,
    val cards: List<LotCard> = emptyList(),
    val fabMode: LotFabMode = LotFabMode.Randomize
)

sealed interface LotUiEffect {
    data class ShowSnackbar(val messageRes: Int) : LotUiEffect
    data class HapticPress(val intensity: HapticsIntensity) : LotUiEffect
}

sealed interface LotUiEvent {
    data class TotalChanged(val value: String) : LotUiEvent
    data class MarkedChanged(val value: String) : LotUiEvent
    data class GenerateRequested(val availableColors: List<Color>) : LotUiEvent
    data class CardClicked(val id: Int) : LotUiEvent
    data object RevealAll : LotUiEvent
    data object Shuffle : LotUiEvent
    data object OverlayDismissed : LotUiEvent
}

@HiltViewModel
class LotViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository,
    private val validateInputs: ValidateLotInputsUseCase,
    private val generateMarked: GenerateMarkedIndicesUseCase
) : ViewModel() {

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _uiState = MutableStateFlow(LotUiState())
    val uiState: StateFlow<LotUiState> = _uiState.asStateFlow()

    private val _effects = MutableSharedFlow<LotUiEffect>()
    val effects: SharedFlow<LotUiEffect> = _effects

    fun updateTotalText(text: String) {
        _uiState.value = _uiState.value.copy(totalText = text.filter { it.isDigit() })
    }

    fun updateMarkedText(text: String) {
        val filtered = text.filter { it.isDigit() }
        _uiState.value = _uiState.value.copy(markedText = filtered)
    }

    fun validate(): Pair<Int, Int>? {
        return validateInputs(ValidateLotInputsUseCase.Params(_uiState.value.totalText, _uiState.value.markedText))
    }

    fun generate() {
        val v = validate() ?: return
        val (total, marked) = v
        val indices = generateMarked(total, marked)
        _uiState.value = _uiState.value.copy(markedIndices = indices, isOverlayVisible = true)
    }

    fun revealAll() {
        val revealed = _uiState.value.cards.map { it.copy(isRevealed = true) }
        _uiState.value = _uiState.value.copy(cards = revealed, fabMode = LotFabMode.Randomize, isOverlayVisible = true)
    }

    fun reshuffle() {
        val shuffled = _uiState.value.cards.shuffled(Random)
        val hasMarked = shuffled.any { it.isMarked }
        _uiState.value = _uiState.value.copy(
            cards = shuffled.map { it.copy(isRevealed = false) },
            fabMode = if (hasMarked) LotFabMode.RevealAll else LotFabMode.Randomize
        )
    }

    fun hideOverlay() {
        _uiState.value = _uiState.value.copy(
            isOverlayVisible = false,
            cards = emptyList(),
            fabMode = LotFabMode.Randomize
        )
    }

    fun onEvent(event: LotUiEvent) {
        when (event) {
            is LotUiEvent.TotalChanged -> updateTotalText(event.value)
            is LotUiEvent.MarkedChanged -> updateMarkedText(event.value)
            is LotUiEvent.GenerateRequested -> onGenerateRequested(event.availableColors)
            is LotUiEvent.CardClicked -> onCardClicked(event.id)
            LotUiEvent.RevealAll -> revealAll()
            LotUiEvent.Shuffle -> reshuffle()
            LotUiEvent.OverlayDismissed -> hideOverlay()
        }
    }

    private fun onGenerateRequested(availableColors: List<Color>) {
        val validated = validate()
        if (validated == null) {
            // РѕС‚РїСЂР°РІРёРј СЃРЅСЌРєР±Р°СЂ
            emitEffect(LotUiEffect.ShowSnackbar(R.string.minimum_3_fields))
            return
        }
        val (total, _) = validated
        // РїРµСЂРµСЃС‡С‘С‚ РѕС‚РјРµС‡РµРЅРЅС‹С… РёРЅРґРµРєСЃРѕРІ
        generate()

        val rows = computeRowSizes(total)
        val colors = distributeColorsSmartly(total, availableColors, rows)

        val markedIndices = _uiState.value.markedIndices
        val cards = List(total) { i ->
            LotCard(
                id = i,
                isMarked = i in markedIndices,
                isRevealed = false,
                color = colors[i]
            )
        }
        _uiState.value = _uiState.value.copy(cards = cards, fabMode = LotFabMode.RevealAll, isOverlayVisible = true)
    }

    private fun onCardClicked(id: Int) {
        val current = _uiState.value.cards
        val pos = current.indexOfFirst { it.id == id }
        if (pos == -1) return
        if (current[pos].isRevealed) return
        val wasMarked = current[pos].isMarked
        val updated = current.toMutableList().also { it[pos] = it[pos].copy(isRevealed = true) }
        _uiState.value = _uiState.value.copy(cards = updated)

        if (wasMarked && settings.value.hapticsEnabled) {
            emitEffect(LotUiEffect.HapticPress(settings.value.hapticsIntensity))
        }

        val totalMarked = updated.count { it.isMarked }
        val openedMarked = updated.count { it.isMarked && it.isRevealed }
        if (totalMarked > 0 && openedMarked >= totalMarked) {
            val allRevealed = updated.map { c -> if (!c.isMarked) c.copy(isRevealed = true) else c }
            _uiState.value = _uiState.value.copy(cards = allRevealed, fabMode = LotFabMode.Randomize)
        }
    }

    private fun emitEffect(effect: LotUiEffect) {
        viewModelScope.launch { _effects.emit(effect) }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotColorUtils.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.luminance

/**
 * Returns a contrasting text color for the given background color.
 */
fun getContrastColor(backgroundColor: Color): Color {
    val luminance = backgroundColor.luminance()
    return if (luminance > 0.5f) Color.Black else Color.White
}

/**
 * Distributes colors across a grid avoiding repeats within the same and adjacent rows.
 */
fun distributeColorsSmartly(
    totalCards: Int,
    availableColors: List<Color>,
    rows: List<Int>
): List<Color> {
    if (availableColors.isEmpty()) return emptyList()

    val colors = mutableListOf<Color>()
    val usedColorsInCurrentRow = mutableSetOf<Color>()
    val usedColorsInPreviousRow = mutableSetOf<Color>()

    var cardIndex = 0

    for (row in rows) {
        usedColorsInCurrentRow.clear()

        for (i in 0 until row) {
            if (cardIndex >= totalCards) break

            val forbiddenColors = usedColorsInCurrentRow + usedColorsInPreviousRow
            val availableForThisCard = availableColors.filter { it !in forbiddenColors }

            val selectedColor = if (availableForThisCard.isNotEmpty()) {
                availableForThisCard.random()
            } else {
                availableColors.random()
            }

            colors.add(selectedColor)
            usedColorsInCurrentRow.add(selectedColor)
            cardIndex++
        }

        usedColorsInPreviousRow.clear()
        usedColorsInPreviousRow.addAll(usedColorsInCurrentRow)
    }

    return colors
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotFab.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.ui.components.SizedFab

@Composable
fun LotFab(
    size: FabSizeSetting,
    mode: LotFabMode,
    onClick: () -> Unit
) {
    SizedFab(
        size = size,
        onClick = onClick,
        containerColor = MaterialTheme.colorScheme.primaryContainer,
        contentColor = MaterialTheme.colorScheme.onPrimaryContainer
    ) {
        when (mode) {
            LotFabMode.RevealAll -> Icon(
                painterResource(R.drawable.check_24px),
                contentDescription = stringResource(R.string.show_all)
            )
            LotFabMode.Randomize -> Icon(
                painterResource(R.drawable.autorenew_24px),
                contentDescription = stringResource(R.string.reshuffle)
            )
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotFabMode.kt
================================================
package com.byteflipper.random.ui.lot.components

enum class LotFabMode { Randomize, RevealAll }





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotGrid.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlin.math.abs
import kotlin.math.min

@Composable
fun LotGrid(
    modifier: Modifier = Modifier,
    cards: List<LotCard>,
    onCardClick: (Int) -> Unit
) {
    BoxWithConstraints(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        val spacing = 8.dp
        val rows = computeRowSizes(cards.size)
        val maxInRow = rows.maxOrNull() ?: 1
        val widthCandidate = (maxWidth - spacing * (maxInRow - 1)) / maxInRow
        val heightCandidate = (maxHeight - spacing * (rows.size - 1)) / rows.size
        val cardSize = min(widthCandidate.value, heightCandidate.value).dp
            .coerceIn(40.dp, 180.dp)

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            var idx = 0
            rows.forEachIndexed { rowIndex, countInRow ->
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(
                        space = spacing,
                        alignment = Alignment.CenterHorizontally
                    ),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    repeat(countInRow) { colInRow ->
                        val card = cards[idx]
                        // РІС‹С‡РёСЃР»СЏРµРј Р·Р°РґРµСЂР¶РєСѓ РїРѕСЏРІР»РµРЅРёСЏ РѕС‚ С†РµРЅС‚СЂР°
                        val centerCol = (countInRow - 1) / 2f
                        val dist = abs(colInRow - centerCol)
                        val centerRow = (rows.size - 1) / 2f
                        val rowDist = abs(rowIndex - centerRow)
                        val baseDelay = 30
                        val appearDelayMs = (rowDist * 55 + dist * 45 + baseDelay).toInt()
                        LotGridCard(
                            modifier = Modifier.size(cardSize),
                            isRevealed = card.isRevealed,
                            isMarked = card.isMarked,
                            cardColor = card.color,
                            cardSize = cardSize,
                            onClick = { onCardClick(card.id) },
                            appearDelayMs = appearDelayMs
                        )
                        idx++
                    }
                }
                if (rowIndex < rows.size - 1) {
                    Spacer(Modifier.height(spacing))
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotGridCard.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import kotlinx.coroutines.delay
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.layout.Box as FoundationBox
import androidx.compose.material3.Text
import androidx.compose.ui.geometry.Offset

@Composable
fun LotGridCard(
    modifier: Modifier = Modifier,
    isRevealed: Boolean,
    isMarked: Boolean,
    cardColor: Color,
    cardSize: Dp,
    onClick: () -> Unit,
    appearDelayMs: Int = 0
) {
    val rotation = remember { Animatable(0f) }
    val appearAlpha = remember { Animatable(0f) }
    val appearScale = remember { Animatable(0.8f) }
    val target = if (isRevealed) 180f else 0f
    LaunchedEffect(target) { rotation.animateTo(target, tween(250)) }
    LaunchedEffect(appearDelayMs) {
        delay(appearDelayMs.toLong())
        appearAlpha.animateTo(1f, tween(220))
        appearScale.animateTo(1f, tween(220))
    }

    FoundationBox(
        modifier = modifier
            .graphicsLayer {
                rotationY = rotation.value
                cameraDistance = 24f * density
                alpha = appearAlpha.value
                scaleX = appearScale.value
                scaleY = appearScale.value
            }
            .clip(RoundedCornerShape(10.dp))
            .background(
                when {
                    !isRevealed -> cardColor
                    isMarked -> MaterialTheme.colorScheme.secondaryContainer
                    else -> Color.White
                }
            )
            .clickable(
                interactionSource = remember { MutableInteractionSource() },
                indication = null
            ) { onClick() }
            .size(cardSize),
        contentAlignment = Alignment.Center
    ) {
        if (!isRevealed) {
            val textColor = getContrastColor(cardColor)
            val fontSize = (cardSize.value * 0.4f).coerceIn(28f, 72f).sp
            Text(
                "?",
                style = MaterialTheme.typography.titleLarge.copy(
                    fontSize = fontSize,
                    fontWeight = FontWeight.Bold
                ),
                color = textColor
            )
        } else {
            if (isMarked) {
                Checkmark(cardSize)
            }
        }
    }
}

@Composable
private fun Checkmark(cardSize: Dp) {
    val color = MaterialTheme.colorScheme.primary
    val checkmarkSize = (cardSize.value * 0.12f).coerceIn(28f, 48f).dp
    val strokeWidth = (cardSize.value * 0.025f).coerceIn(5f, 10f)
    Canvas(modifier = Modifier.size(checkmarkSize).alpha(0.96f)) {
        val w = size.width
        val h = size.height
        val p1 = Offset(w * 0.82f, h * 0.64f)
        val p2 = Offset(w * 0.58f, h * 0.84f)
        val p3 = Offset(w * 0.14f, h * 0.22f)
        drawLine(color = color, start = p1, end = p2, strokeWidth = strokeWidth, cap = StrokeCap.Round)
        drawLine(color = color, start = p2, end = p3, strokeWidth = strokeWidth, cap = StrokeCap.Round)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotGridLayout.kt
================================================
package com.byteflipper.random.ui.lot.components

import kotlin.math.roundToInt
import kotlin.math.sqrt

/**
 * Computes a balanced distribution of cards per row with a maximum of 5 per row.
 * Rows are filled from center to edges to keep the grid visually balanced.
 */
fun computeRowSizes(total: Int): List<Int> {
    if (total <= 0) return emptyList()
    val maxPerRow = 5
    if (total <= 3) return listOf(total)
    if (total == 4) return listOf(2, 2)
    if (total == 5) return listOf(3, 2)

    val minRows = (total + maxPerRow - 1) / maxPerRow
    val desiredRows = if (total in 10..15) 3 else sqrt(total.toDouble()).roundToInt().coerceAtLeast(2)
    var rowsCount = maxOf(minRows, desiredRows)

    fun distributeCenter(rowsCount: Int): List<Int> {
        val base = total / rowsCount
        var extra = total % rowsCount
        val rows = MutableList(rowsCount) { base }
        // order of distributing leftover items вЂ” from center to edges
        val order = buildList {
            if (rowsCount % 2 == 1) {
                val mid = rowsCount / 2
                add(mid)
                for (d in 1..mid) {
                    add(mid - d)
                    add(mid + d)
                }
            } else {
                val leftMid = rowsCount / 2 - 1
                val rightMid = rowsCount / 2
                add(leftMid)
                add(rightMid)
                for (d in 1..leftMid) {
                    add(leftMid - d)
                    add(rightMid + d)
                }
            }
        }
        var guard = 0
        while (extra > 0 && guard < order.size * 2) {
            for (idx in order) {
                if (extra == 0) break
                if (rows[idx] < maxPerRow) {
                    rows[idx] += 1
                    extra -= 1
                }
            }
            guard += 1
        }
        return rows
    }

    // Increase row count until all rows are within maxPerRow limit
    while (true) {
        val rows = distributeCenter(rowsCount)
        if (rows.all { it <= maxPerRow }) return rows
        rowsCount += 1
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotModels.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.compose.runtime.Immutable
import androidx.compose.ui.graphics.Color

@Immutable
data class LotCard(
    val id: Int,
    val isMarked: Boolean,
    val isRevealed: Boolean,
    val color: Color
)





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/lot/components/LotOverlay.kt
================================================
package com.byteflipper.random.ui.lot.components

import androidx.activity.compose.BackHandler
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color

@Composable
fun LotOverlay(
    cards: List<LotCard>,
    scrimAlpha: Float,
    onDismiss: () -> Unit,
    onCardClick: (Int) -> Unit
) {
    BackHandler(enabled = true) { onDismiss() }

    Box(modifier = Modifier.fillMaxSize()) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black.copy(alpha = 0.45f * scrimAlpha))
                .clickable(
                    interactionSource = remember { MutableInteractionSource() },
                    indication = null
                ) { onDismiss() }
        )

        LotGrid(cards = cards, onCardClick = onCardClick)
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersContent.kt
================================================
package com.byteflipper.random.ui.numbers

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

@Composable
fun NumbersContent(
    modifier: Modifier = Modifier,
    fromText: String,
    toText: String,
    onFromChange: (String) -> Unit,
    onToChange: (String) -> Unit
) {
    val scrollState = rememberScrollState()

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(scrollState),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            stringResource(R.string.from),
            style = MaterialTheme.typography.labelLarge,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Spacer(Modifier.height(48.dp))
        BasicTextField(
            value = fromText,
            onValueChange = { newValue -> onFromChange(newValue.filter { ch -> ch.isDigit() || ch == '-' }) },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            textStyle = MaterialTheme.typography.displayLarge.copy(
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary,
                fontSize = 64.sp
            )
        )

        Spacer(Modifier.height(48.dp))

        Text(
            stringResource(R.string.to),
            style = MaterialTheme.typography.labelLarge,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Spacer(Modifier.height(48.dp))
        BasicTextField(
            value = toText,
            onValueChange = { newValue -> onToChange(newValue.filter { ch -> ch.isDigit() || ch == '-' }) },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            textStyle = MaterialTheme.typography.displayLarge.copy(
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary,
                fontSize = 64.sp
            )
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersScaffold.kt
================================================
package com.byteflipper.random.ui.numbers

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NumbersScaffold(
    onBack: () -> Unit,
    snackbarHostState: SnackbarHostState,
    floatingActionButton: @Composable () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { NumbersTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        floatingActionButton = floatingActionButton,
        snackbarHost = { SnackbarHost(snackbarHostState) },
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersScreen.kt
================================================
package com.byteflipper.random.ui.numbers

import android.view.SoundEffectConstants
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalConfiguration
import com.byteflipper.random.ui.components.LocalHapticsManager
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import kotlinx.coroutines.launch
import kotlin.math.max
import kotlin.math.min

import com.byteflipper.random.ui.components.flip.FlipCardOverlay
import com.byteflipper.random.ui.components.flip.rememberFlipCardState
import com.byteflipper.random.ui.components.flip.FlipCardControls
import com.byteflipper.random.ui.components.GeneratorConfigDialog
import com.byteflipper.random.ui.theme.getRainbowColors
import com.byteflipper.random.ui.settings.components.RadioOption
import com.byteflipper.random.domain.numbers.SortingMode
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle

import com.byteflipper.random.utils.Constants.DEFAULT_DELAY_MS
import com.byteflipper.random.utils.Constants.MIN_DELAY_MS
import com.byteflipper.random.utils.Constants.MAX_DELAY_MS
import com.byteflipper.random.ui.numbers.components.NumbersFabControls
import com.byteflipper.random.ui.numbers.components.NumbersResultsDisplay
import com.byteflipper.random.ui.numbers.components.computeCardBaseSizeDp
import com.byteflipper.random.ui.numbers.components.computeHeightScale
import com.byteflipper.random.ui.numbers.components.pickStableColor
import com.byteflipper.random.ui.theme.CardContentTheme

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NumbersScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val hapticsManager = LocalHapticsManager.current
    val view = LocalView.current
    val context = LocalContext.current

    // Р’СЃРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёРµ РїР°СЂР°РјРµС‚СЂС‹ Рё СЂРµР·СѓР»СЊС‚Р°С‚С‹ Р±РµСЂС‘Рј РёР· VM
    val viewModel: NumbersViewModel = hiltViewModel()
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val settings by viewModel.settings.collectAsStateWithLifecycle()

    // РџРѕР·РёС†РёРё FAB
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }

    // РџСѓР»СЊСЃ FAB
    val fabPulseProgress = remember { Animatable(0f) }
    val fabScale = remember { Animatable(1f) }

    // РЎРѕСЃС‚РѕСЏРЅРёРµ Рё РєРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ РїРµСЂРµРёСЃРїРѕР»СЊР·СѓРµРјРѕР№ РєР°СЂС‚РѕС‡РєРё
    val flipCardState = rememberFlipCardState()
    val flipCardController = FlipCardControls(flipCardState)

    fun resetUsedNumbers() { viewModel.resetUsedNumbers() }

    fun validateInputs(): Pair<IntRange, Int>? {
        val validation = viewModel.validateInputs()
        if (validation != null) return validation

        // Р•СЃР»Рё РЅРµ РїСЂРѕС€Р»Рѕ РІР°Р»РёРґР°С†РёСЋ, РѕС‚РґРµР»СЊРЅРѕ РѕР±СЂР°Р±РѕС‚Р°РµРј РёСЃС‡РµСЂРїР°РЅРёРµ РІР°СЂРёР°РЅС‚РѕРІ РїСЂРё Р·Р°РїСЂРµС‚Рµ РїРѕРІС‚РѕСЂРѕРІ
        val from = uiState.fromText.trim().toIntOrNull()
        val to = uiState.toText.trim().toIntOrNull()
        if (from != null && to != null && !uiState.allowRepetitions) {
            val range = if (from <= to) from..to else to..from
            val availableCount = range.count { it !in uiState.usedNumbers }
            if (availableCount <= 0) {
                scope.launch {
                    val result = snackbarHostState.showSnackbar(
                        message = context.getString(R.string.all_numbers_used),
                        actionLabel = context.getString(R.string.reset)
                    )
                    if (result == androidx.compose.material3.SnackbarResult.ActionPerformed) {
                        viewModel.resetUsedNumbers()
                    }
                }
                return null
            }
        }

        scope.launch {
            snackbarHostState.showSnackbar(context.getString(R.string.enter_valid_numbers))
        }
        return null
    }

    // РЎР±СЂРѕСЃ usedNumbers РЅР° РёР·РјРµРЅРµРЅРёСЏ РґРёР°РїР°Р·РѕРЅР°/СЂРµР¶РёРјР°
    LaunchedEffect(uiState.fromText, uiState.toText, uiState.allowRepetitions) {
        if (uiState.allowRepetitions) {
            viewModel.resetUsedNumbers()
        } else {
            val from = uiState.fromText.trim().toIntOrNull()
            val to = uiState.toText.trim().toIntOrNull()
            if (from != null && to != null) {
                val range = if (from <= to) from..to else to..from
                viewModel.pruneUsedNumbersToRange(range)
            }
        }
    }

    LaunchedEffect(Unit) {
        viewModel.effects.collect { effect ->
            when (effect) {
                is NumbersUiEffect.ShowSnackbar -> snackbarHostState.showSnackbar(context.getString(effect.messageRes))
                is NumbersUiEffect.HapticPress -> hapticsManager?.performPress(effect.intensity)
            }
        }
    }

    fun triggerFabPulse() = scope.launch {
        if (settings.hapticsEnabled) hapticsManager?.performPress(settings.hapticsIntensity)
        view.playSoundEffect(SoundEffectConstants.CLICK)
        fabPulseProgress.snapTo(0f)
        val ring = launch {
            fabPulseProgress.animateTo(1f, tween(500, easing = FastOutSlowInEasing))
            fabPulseProgress.snapTo(0f)
        }
        val scale = launch {
            fabScale.animateTo(1.12f, spring(dampingRatio = 0.4f, stiffness = Spring.StiffnessMedium))
            fabScale.animateTo(1f, spring(dampingRatio = 0.7f, stiffness = Spring.StiffnessLow))
        }
        ring.join()
        scale.join()
    }

    // Р”РёР°Р»РѕРі РЅР°СЃС‚СЂРѕРµРє
    GeneratorConfigDialog(
        visible = uiState.showConfigDialog,
        onDismissRequest = { viewModel.onEvent(NumbersUiEvent.SetConfigDialogVisible(false)) },
        countText = uiState.countText,
        onCountChange = { viewModel.onEvent(NumbersUiEvent.UpdateCountText(it)) },
        allowRepetitions = uiState.allowRepetitions,
        onAllowRepetitionsChange = { viewModel.onEvent(NumbersUiEvent.UpdateAllowRepetitions(it)) },
        usedNumbers = uiState.usedNumbers,
        availableRange = run {
            val from = uiState.fromText.trim().toIntOrNull()
            val to = uiState.toText.trim().toIntOrNull()
            if (from != null && to != null) {
                if (from <= to) from..to else to..from
            } else null
        },
        onResetUsedNumbers = { viewModel.onEvent(NumbersUiEvent.ResetUsedNumbers) },
        useDelay = uiState.useDelay,
        onUseDelayChange = { viewModel.onEvent(NumbersUiEvent.UpdateUseDelay(it)) },
        delayText = uiState.delayText,
        onDelayChange = { viewModel.onEvent(NumbersUiEvent.UpdateDelayText(it)) },
        minDelayMs = MIN_DELAY_MS,
        maxDelayMs = MAX_DELAY_MS,
        defaultDelayMs = DEFAULT_DELAY_MS,
        sortingOptions = listOf(
            RadioOption(key = SortingMode.Random.name, title = stringResource(R.string.random_order)),
            RadioOption(key = SortingMode.Ascending.name, title = stringResource(R.string.ascending)),
            RadioOption(key = SortingMode.Descending.name, title = stringResource(R.string.descending))
        ),
        selectedSortingKey = uiState.sortingMode.name,
        onSortingChange = { key -> viewModel.onEvent(NumbersUiEvent.UpdateSortingMode(SortingMode.valueOf(key))) }
    )

    NumbersScaffold(
        onBack = onBack,
        snackbarHostState = snackbarHostState,
        floatingActionButton = {
            NumbersFabControls(
                onConfigClick = { viewModel.onEvent(NumbersUiEvent.SetConfigDialogVisible(true)) },
                onGenerateClick = {
                    val result = validateInputs() ?: return@NumbersFabControls
                    val delayMs = viewModel.getEffectiveDelayMs()
                    // С†РІРµС‚ РґР»СЏ РєР°Р¶РґРѕРіРѕ РЅРѕРІРѕРіРѕ СЃРїРёРЅР°
                    viewModel.onEvent(NumbersUiEvent.RandomizeCardColor)
                    if (!flipCardController.isVisible()) {
                        flipCardController.open()
                        viewModel.onEvent(NumbersUiEvent.SetOverlayVisible(true))
                    }
                    flipCardController.spinAndReveal(
                        effectiveDelayMs = delayMs,
                        onReveal = { targetIsFront ->
                            val newNumbers = viewModel.generate()
                            if (targetIsFront) viewModel.onEvent(
                                NumbersUiEvent.SetFrontValues(
                                    newNumbers
                                )
                            ) else viewModel.onEvent(NumbersUiEvent.SetBackValues(newNumbers))
                        },
                        onSpinCompleted = {
                            viewModel.notifyHapticPressIfEnabled()
                        }
                    )
                },
                onFabPositioned = { center, size ->
                    fabCenterInRoot = center
                    fabSize = size
                }
            )
        }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            val blurRadius = (8f * flipCardController.scrimProgress.value).dp

            NumbersContent(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur(blurRadius),
                fromText = uiState.fromText,
                toText = uiState.toText,
                onFromChange = { viewModel.onEvent(NumbersUiEvent.UpdateFromText(it)) },
                onToChange = { viewModel.onEvent(NumbersUiEvent.UpdateToText(it)) }
            )

            val resultsCountForSizing = max(uiState.frontValues.size, uiState.backValues.size)
            val configuration = LocalConfiguration.current
            val maxCardSideDp =
                (min(configuration.screenWidthDp, configuration.screenHeightDp) - 64).coerceAtLeast(
                    200
                ).dp

            val basePx = computeCardBaseSizeDp(resultsCountForSizing)
            val dynamicCardSize = basePx.coerceIn(240, maxCardSideDp.value.toInt()).dp
            val heightScale = computeHeightScale(resultsCountForSizing)
            val contentTargetHeight =
                (dynamicCardSize * heightScale).coerceIn(300.dp, maxCardSideDp)

            val rainbowColors = getRainbowColors()
            val animatedColor =
                remember { androidx.compose.animation.Animatable(Color.Transparent) }
            val targetColor = remember(uiState.cardColorSeed, uiState.frontValues) {
                pickStableColor(uiState.cardColorSeed, rainbowColors)
            }
            LaunchedEffect(targetColor) {
                if (animatedColor.value == Color.Transparent) {
                    animatedColor.snapTo(targetColor)
                } else {
                    animatedColor.animateTo(targetColor, tween(400))
                }
            }

            FlipCardOverlay(
                state = flipCardState,
                anchorInRoot = fabCenterInRoot,
                onClosed = {
                    triggerFabPulse()
                    viewModel.onEvent(NumbersUiEvent.ClearResults)
                    viewModel.onEvent(NumbersUiEvent.SetOverlayVisible(false))
                },
                cardSize = dynamicCardSize,
                cardHeight = contentTargetHeight,
                frontContainerColor = animatedColor.value,
                backContainerColor = animatedColor.value,
                frontContent = {
                    CardContentTheme {
                        NumbersResultsDisplay(
                            results = uiState.frontValues,
                            cardColor = animatedColor.value,
                            cardSize = contentTargetHeight
                        )
                    }
                },
                backContent = {
                    CardContentTheme {
                        NumbersResultsDisplay(
                            results = uiState.backValues,
                            cardColor = animatedColor.value,
                            cardSize = contentTargetHeight
                        )
                    }
                }
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersTopBar.kt
================================================
package com.byteflipper.random.ui.numbers

import androidx.compose.ui.res.painterResource
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NumbersTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.number)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(painterResource(R.drawable.arrow_back_24px), contentDescription = stringResource(R.string.back))
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersViewModel.kt
================================================
package com.byteflipper.random.ui.numbers

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.domain.numbers.SortingMode
import com.byteflipper.random.domain.numbers.usecase.GenerateNumbersUseCase
import com.byteflipper.random.domain.numbers.usecase.ValidateNumberInputsUseCase
import com.byteflipper.random.utils.Constants.DEFAULT_DELAY_MS
import com.byteflipper.random.utils.Constants.DEFAULT_GENERATE_COUNT
import com.byteflipper.random.utils.Constants.MIN_DELAY_MS
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.update
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.launch
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.HapticsIntensity

data class NumbersUiState(
    val fromText: String = "1",
    val toText: String = "10",
    val countText: String = DEFAULT_GENERATE_COUNT.toString(),
    val delayText: String = DEFAULT_DELAY_MS.toString(),
    val allowRepetitions: Boolean = true,
    val useDelay: Boolean = true,
    val usedNumbers: Set<Int> = emptySet(),
    val showConfigDialog: Boolean = false,
    val showResetDialog: Boolean = false,
    val frontValues: List<Int> = emptyList(),
    val backValues: List<Int> = emptyList(),
    val sortingMode: SortingMode = SortingMode.Random,
    val isOverlayVisible: Boolean = false,
    val cardColorSeed: Long? = null
)

sealed interface NumbersUiEvent {
    data class UpdateFromText(val text: String) : NumbersUiEvent
    data class UpdateToText(val text: String) : NumbersUiEvent
    data class UpdateCountText(val text: String) : NumbersUiEvent
    data class UpdateDelayText(val text: String) : NumbersUiEvent
    data class UpdateAllowRepetitions(val value: Boolean) : NumbersUiEvent
    data class UpdateUseDelay(val value: Boolean) : NumbersUiEvent
    data object ResetUsedNumbers : NumbersUiEvent
    data object ClearResults : NumbersUiEvent
    data class UpdateSortingMode(val mode: SortingMode) : NumbersUiEvent
    data class SetFrontValues(val values: List<Int>) : NumbersUiEvent
    data class SetBackValues(val values: List<Int>) : NumbersUiEvent
    data class SetConfigDialogVisible(val visible: Boolean) : NumbersUiEvent
    data class SetOverlayVisible(val visible: Boolean) : NumbersUiEvent
    data object RandomizeCardColor : NumbersUiEvent
}

@HiltViewModel
class NumbersViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository,
    private val validateNumberInputs: ValidateNumberInputsUseCase,
    private val generateNumbers: GenerateNumbersUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(NumbersUiState())
    val uiState: StateFlow<NumbersUiState> = _uiState.asStateFlow()

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _effects = MutableSharedFlow<NumbersUiEffect>()
    val effects: SharedFlow<NumbersUiEffect> = _effects

    fun onEvent(event: NumbersUiEvent) {
        when (event) {
            is NumbersUiEvent.UpdateFromText -> updateFromText(event.text)
            is NumbersUiEvent.UpdateToText -> updateToText(event.text)
            is NumbersUiEvent.UpdateCountText -> updateCountText(event.text)
            is NumbersUiEvent.UpdateDelayText -> updateDelayText(event.text)
            is NumbersUiEvent.UpdateAllowRepetitions -> updateAllowRepetitions(event.value)
            is NumbersUiEvent.UpdateUseDelay -> updateUseDelay(event.value)
            is NumbersUiEvent.ResetUsedNumbers -> resetUsedNumbers()
            is NumbersUiEvent.ClearResults -> clearResults()
            is NumbersUiEvent.UpdateSortingMode -> updateSortingMode(event.mode)
            is NumbersUiEvent.SetFrontValues -> setFrontValues(event.values)
            is NumbersUiEvent.SetBackValues -> setBackValues(event.values)
            is NumbersUiEvent.SetConfigDialogVisible -> setConfigDialogVisible(event.visible)
            is NumbersUiEvent.SetOverlayVisible -> setOverlayVisible(event.visible)
            is NumbersUiEvent.RandomizeCardColor -> randomizeCardColor()
        }
    }

    fun updateFromText(text: String) {
        _uiState.update { it.copy(fromText = text) }
    }

    fun updateToText(text: String) {
        _uiState.update { it.copy(toText = text) }
    }

    fun updateCountText(text: String) {
        _uiState.update { it.copy(countText = text) }
    }

    fun updateDelayText(text: String) {
        _uiState.update { it.copy(delayText = text) }
    }

    fun updateAllowRepetitions(allowRepetitions: Boolean) {
        _uiState.update { it.copy(allowRepetitions = allowRepetitions) }
    }

    fun updateUseDelay(useDelay: Boolean) {
        _uiState.update { it.copy(useDelay = useDelay) }
    }

    fun resetUsedNumbers() {
        _uiState.update { it.copy(usedNumbers = emptySet(), showResetDialog = false) }
        emitEffect(NumbersUiEffect.ShowSnackbar(R.string.history_cleared))
    }

    fun clearResults() {
        _uiState.update { it.copy(frontValues = emptyList(), backValues = emptyList()) }
    }

    fun validateInputs(): Pair<IntRange, Int>? {
        val state = _uiState.value
        return validateNumberInputs(
            ValidateNumberInputsUseCase.Params(
                fromText = state.fromText,
                toText = state.toText,
                countText = state.countText,
                allowRepetitions = state.allowRepetitions,
                usedNumbers = state.usedNumbers
            )
        )
    }

    fun generate(): List<Int> {
        val state = _uiState.value
        val validation = validateInputs() ?: return emptyList()
        val (range, count) = validation
        val result = generateNumbers(
            GenerateNumbersUseCase.Params(
                range = range,
                count = count,
                allowRepetitions = state.allowRepetitions,
                usedNumbers = state.usedNumbers,
                sortingMode = state.sortingMode
            )
        )
        _uiState.update { it.copy(usedNumbers = result.updatedUsedNumbers) }
        return result.values
    }

    fun getEffectiveDelayMs(): Int {
        val state = _uiState.value
        return if (state.useDelay) {
            state.delayText.toIntOrNull()?.coerceIn(MIN_DELAY_MS, DEFAULT_DELAY_MS * 20) ?: DEFAULT_DELAY_MS
        } else {
            1000
        }
    }

    fun updateSortingMode(mode: SortingMode) {
        _uiState.update { it.copy(sortingMode = mode) }
    }

    fun setFrontValues(values: List<Int>) {
        _uiState.update { it.copy(frontValues = values) }
    }

    fun setBackValues(values: List<Int>) {
        _uiState.update { it.copy(backValues = values) }
    }

    fun pruneUsedNumbersToRange(range: IntRange) {
        _uiState.update { it.copy(usedNumbers = it.usedNumbers.filter { v -> v in range }.toSet()) }
    }

    fun setConfigDialogVisible(visible: Boolean) {
        _uiState.update { it.copy(showConfigDialog = visible) }
    }

    fun notifyHapticPressIfEnabled() {
        if (settings.value.hapticsEnabled) {
            emitEffect(NumbersUiEffect.HapticPress(settings.value.hapticsIntensity))
        }
    }

    fun setOverlayVisible(visible: Boolean) {
        _uiState.update { it.copy(isOverlayVisible = visible) }
    }

    fun randomizeCardColor() {
        val newSeed = kotlin.random.Random.nextLong()
        _uiState.update { it.copy(cardColorSeed = newSeed) }
    }

    private fun emitEffect(effect: NumbersUiEffect) {
        viewModelScope.launch { _effects.emit(effect) }
    }
}

sealed interface NumbersUiEffect {
    data class ShowSnackbar(val messageRes: Int) : NumbersUiEffect
    data class HapticPress(val intensity: HapticsIntensity) : NumbersUiEffect
}



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/components/NumbersFabControls.kt
================================================
package com.byteflipper.random.ui.numbers.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SmallFloatingActionButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.ui.components.SizedFab

@Composable
fun NumbersFabControls(
    onConfigClick: () -> Unit,
    onGenerateClick: () -> Unit,
    onFabPositioned: (Offset, IntSize) -> Unit,
    containerColor: Color = MaterialTheme.colorScheme.primaryContainer,
    contentColor: Color = MaterialTheme.colorScheme.onPrimaryContainer
) {
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }

    androidx.compose.foundation.layout.Column(
        horizontalAlignment = Alignment.End,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        SmallFloatingActionButton(
            onClick = onConfigClick,
            containerColor = MaterialTheme.colorScheme.secondaryContainer,
            contentColor = MaterialTheme.colorScheme.onSecondaryContainer
        ) {
            Icon(
                painterResource(R.drawable.settings_24px),
                contentDescription = null
            )
        }

        Box(
            modifier = Modifier.onGloballyPositioned { coordinates ->
                fabSize = coordinates.size
                val pos = coordinates.positionInRoot()
                fabCenterInRoot = Offset(pos.x + fabSize.width / 2f, pos.y + fabSize.height / 2f)
                onFabPositioned(fabCenterInRoot, fabSize)
            }
        ) {
            SizedFab(
                size = FabSizeSetting.Medium,
                onClick = onGenerateClick,
                containerColor = containerColor,
                contentColor = contentColor
            ) {
                Icon(
                    painterResource(R.drawable.autorenew_24px),
                    contentDescription = null
                )
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/components/NumbersResetDialog.kt
================================================
package com.byteflipper.random.ui.numbers.components

import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable

@Composable
fun NumbersResetDialog(
    onDismiss: () -> Unit,
    onConfirm: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("Reset Used Numbers") },
        text = { Text("This will clear all used numbers and allow them to be generated again.") },
        confirmButton = {
            TextButton(onClick = onConfirm) {
                Text("Reset")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Cancel")
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/components/NumbersResultsDisplay.kt
================================================
package com.byteflipper.random.ui.numbers.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.luminance
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

private fun getContrastColor(backgroundColor: Color): Color {
    val luminance = backgroundColor.luminance()
    return if (luminance > 0.5f) Color.Black else Color.White
}

@Composable
fun NumbersResultsDisplay(
    results: List<Int>,
    cardColor: Color,
    cardSize: Dp
) {
    if (results.isNotEmpty()) {
        val lazyListState = rememberLazyListState()
        val textColor = getContrastColor(cardColor)

        fun numberFontSizeFor(count: Int, size: Dp): Float {
            val k = when {
                count <= 10 -> 0.06f
                count <= 25 -> 0.04f
                count <= 50 -> 0.03f
                count <= 100 -> 0.025f
                else -> 0.02f
            }
            return (size.value * k).coerceIn(12f, 28f)
        }

        val maxHeight = (cardSize * 0.9f).coerceAtLeast(200.dp)

        AnimatedVisibility(
            visible = true,
            enter = expandVertically(
                animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy, stiffness = Spring.StiffnessLow)
            ) + fadeIn(),
            exit = shrinkVertically() + fadeOut()
        ) {
            Box(
                modifier = Modifier
                    .padding(16.dp)
                    .heightIn(max = maxHeight)
                    .fillMaxWidth()
            ) {
                LazyColumn(
                    state = lazyListState,
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Top,
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(max = maxHeight)
                ) {
                    val fontSize = numberFontSizeFor(results.size, cardSize).sp

                    val chunkSize = when {
                        results.size <= 20 -> results.size
                        results.size <= 50 -> (results.size + 1) / 2
                        results.size <= 100 -> (results.size + 2) / 3
                        else -> (results.size + 4) / 5
                    }
                    val lines = results.chunked(chunkSize)

                    itemsIndexed(lines) { index, lineNumbers ->
                        val line = lineNumbers.joinToString(", ")
                        Text(
                            text = line,
                            style = MaterialTheme.typography.bodyLarge.copy(
                                textAlign = TextAlign.Center,
                                fontSize = fontSize,
                                lineHeight = fontSize * 1.1f
                            ),
                            color = textColor,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 4.dp, vertical = 2.dp)
                        )
                    }
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/components/NumbersUiUtils.kt
================================================
package com.byteflipper.random.ui.numbers.components

import androidx.compose.ui.graphics.Color
import kotlin.random.Random

fun computeCardBaseSizeDp(count: Int): Int {
    val base = 280
    val scale = when {
        count <= 10 -> 1.0
        count <= 25 -> 1.15
        count <= 50 -> 1.3
        else -> 1.5
    }
    return (base * scale).toInt()
}

fun computeHeightScale(count: Int): Float = when {
    count <= 10 -> 1.0f
    count <= 25 -> 1.2f
    count <= 50 -> 1.4f
    count <= 100 -> 1.6f
    else -> 1.8f
}

fun pickStableColor(seed: Long?, palette: List<Color>): Color {
    if (palette.isEmpty()) return Color.Unspecified
    val random = seed?.let { Random(it) } ?: Random
    return palette[random.nextInt(palette.size)]
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsContent.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.height
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.ui.settings.components.SettingsCategoryCard

@Composable
fun SettingsContent(
    modifier: Modifier = Modifier,
    onOpenGeneral: () -> Unit,
    onOpenAppearance: () -> Unit
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        SettingsCategoryCard(
            title = stringResource(R.string.general),
            description = stringResource(R.string.settings_general_subtitle),
            iconRes = R.drawable.settings_24px,
            onClick = onOpenGeneral,
        )

        SettingsCategoryCard(
            title = stringResource(R.string.appearance),
            description = stringResource(R.string.settings_appearance_subtitle),
            iconRes = R.drawable.palette_24px,
            onClick = onOpenAppearance,
        )

        Spacer(Modifier.height(4.dp))
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsScaffold.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScaffold(
    onBack: () -> Unit,
    content: @Composable (androidx.compose.foundation.layout.PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { SettingsTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsScreen.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    onBack: () -> Unit,
    onOpenGeneral: () -> Unit,
    onOpenAppearance: () -> Unit
) {
    SettingsScaffold(onBack) { inner ->
        SettingsContent(
            modifier = Modifier.padding(inner),
            onOpenGeneral = onOpenGeneral,
            onOpenAppearance = onOpenAppearance
        )
    }
}




================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsTopBar.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import com.byteflipper.random.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.settings)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
            }
        }
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsGeneralTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.general)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
            }
        }
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsAppearanceTopBar(onBack: () -> Unit) {
    TopAppBar(
        title = { Text(stringResource(R.string.appearance)) },
        navigationIcon = {
            IconButton(onClick = onBack) {
                Icon(Icons.Outlined.ArrowBack, contentDescription = stringResource(R.string.back))
            }
        }
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/SettingsViewModel.kt
================================================
package com.byteflipper.random.ui.settings

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.AppLanguage
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.data.settings.SettingsRepository
import com.byteflipper.random.data.settings.ThemeMode
import com.byteflipper.random.data.settings.HapticsIntensity
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import javax.inject.Inject

@HiltViewModel
class SettingsViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository
) : ViewModel() {

    val settings = settingsRepository.settingsFlow.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = com.byteflipper.random.data.settings.Settings()
    )

    private val _effects = MutableSharedFlow<SettingsUiEffect>()
    val effects: SharedFlow<SettingsUiEffect> = _effects

    fun onEvent(event: SettingsUiEvent) {
        when (event) {
            is SettingsUiEvent.SetThemeMode -> viewModelScope.launch { settingsRepository.setThemeMode(event.mode) }
            is SettingsUiEvent.SetDynamicColors -> viewModelScope.launch { settingsRepository.setDynamicColors(event.enabled) }
            is SettingsUiEvent.SetFabSize -> viewModelScope.launch { settingsRepository.setFabSize(event.size) }
            is SettingsUiEvent.SetAppLanguage -> viewModelScope.launch { settingsRepository.setAppLanguage(event.language) }
            is SettingsUiEvent.SetHapticsEnabled -> viewModelScope.launch { settingsRepository.setHapticsEnabled(event.enabled) }
            is SettingsUiEvent.SetHapticsIntensity -> viewModelScope.launch { settingsRepository.setHapticsIntensity(event.intensity) }
        }
    }
}

sealed interface SettingsUiEvent {
    data class SetThemeMode(val mode: ThemeMode) : SettingsUiEvent
    data class SetDynamicColors(val enabled: Boolean) : SettingsUiEvent
    data class SetFabSize(val size: FabSizeSetting) : SettingsUiEvent
    data class SetAppLanguage(val language: AppLanguage) : SettingsUiEvent
    data class SetHapticsEnabled(val enabled: Boolean) : SettingsUiEvent
    data class SetHapticsIntensity(val intensity: HapticsIntensity) : SettingsUiEvent
}

sealed interface SettingsUiEffect



================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/appearance/SettingsAppearanceContent.kt
================================================
package com.byteflipper.random.ui.settings.appearance

import android.os.Build
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.DividerDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.SegmentedButton
import androidx.compose.material3.SegmentedButtonDefaults
import androidx.compose.material3.SingleChoiceSegmentedButtonRow
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.FabSizeSetting
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.data.settings.ThemeMode
import com.byteflipper.random.ui.settings.components.PreferenceCategory
import com.byteflipper.random.ui.settings.components.SwitchPreference
import com.byteflipper.random.ui.settings.components.RadioButtonGroup
import com.byteflipper.random.ui.settings.components.RadioOption

@Composable
fun SettingsAppearanceContent(
    modifier: Modifier = Modifier,
    state: Settings,
    onSetTheme: (ThemeMode) -> Unit,
    onSetDynamicColors: (Boolean) -> Unit,
    onSetFabSize: (FabSizeSetting) -> Unit
) {
    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.Start
    ) {
        PreferenceCategory(title = stringResource(R.string.theme), description = stringResource(R.string.theme_description))
        val themeKey = when (state.themeMode) {
            ThemeMode.System -> "system"
            ThemeMode.Light -> "light"
            ThemeMode.Dark -> "dark"
            else -> "system"
        }
        SingleChoiceSegmentedButtonRow(modifier = Modifier.padding(horizontal = 16.dp)) {
            val items = listOf(
                "system" to stringResource(R.string.system_theme),
                "light" to stringResource(R.string.light_theme),
                "dark" to stringResource(R.string.dark_theme)
            )
            items.forEachIndexed { index, (key, label) ->
                SegmentedButton(
                    selected = themeKey == key,
                    onClick = {
                        val mode = when (key) {
                            "light" -> ThemeMode.Light
                            "dark" -> ThemeMode.Dark
                            else -> ThemeMode.System
                        }
                        onSetTheme(mode)
                    },
                    shape = SegmentedButtonDefaults.itemShape(index, items.size),
                    colors = SegmentedButtonDefaults.colors(
                        activeContainerColor = MaterialTheme.colorScheme.primaryContainer,
                        activeContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                        inactiveContainerColor = MaterialTheme.colorScheme.surface,
                        inactiveContentColor = MaterialTheme.colorScheme.onSurface
                    )
                ) {
                    Text(label)
                }
            }
        }

        HorizontalDivider(
            modifier = Modifier.padding(vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        val dynamicSupported = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S
        PreferenceCategory(
            title = stringResource(R.string.dynamic_colors),
        )
        SwitchPreference(
            title = stringResource(R.string.dynamic_colors),
            descriptionOn = stringResource(R.string.dynamic_colors_description),
            descriptionOff = stringResource(R.string.dynamic_colors_description),
            checked = state.dynamicColors && dynamicSupported,
            onCheckedChange = { enabled -> if (dynamicSupported) onSetDynamicColors(enabled) }
        )

        HorizontalDivider(
            modifier = Modifier.padding(vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        PreferenceCategory(title = stringResource(R.string.fab_size), description = stringResource(R.string.fab_size_description))
        val fabKey = when (state.fabSize) {
            FabSizeSetting.Small -> "s"
            FabSizeSetting.Medium -> "m"
            FabSizeSetting.Large -> "l"
            else -> "m"
        }
        Column(modifier = Modifier.padding(horizontal = 8.dp)) {
            RadioButtonGroup(
                options = listOf(
                    RadioOption(
                        key = "s",
                        title = stringResource(R.string.fab_size_small),
                        description = stringResource(R.string.fab_size_small_desc)
                    ),
                    RadioOption(
                        key = "m",
                        title = stringResource(R.string.fab_size_medium),
                        description = stringResource(R.string.fab_size_medium_desc)
                    ),
                    RadioOption(
                        key = "l",
                        title = stringResource(R.string.fab_size_large),
                        description = stringResource(R.string.fab_size_large_desc)
                    )
                ),
                selectedKey = fabKey,
                onOptionSelected = { key ->
                    val size = when (key) {
                        "s" -> FabSizeSetting.Small
                        "l" -> FabSizeSetting.Large
                        else -> FabSizeSetting.Medium
                    }
                    onSetFabSize(size)
                }
            )
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/appearance/SettingsAppearanceScaffold.kt
================================================
package com.byteflipper.random.ui.settings.appearance

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import com.byteflipper.random.ui.settings.SettingsAppearanceTopBar

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsAppearanceScaffold(
    onBack: () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { SettingsAppearanceTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/appearance/SettingsAppearanceScreen.kt
================================================
package com.byteflipper.random.ui.settings.appearance

import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.ui.settings.SettingsUiEvent
import com.byteflipper.random.ui.settings.SettingsViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsAppearanceScreen(onBack: () -> Unit) {
    val viewModel: SettingsViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()

    SettingsAppearanceScaffold(onBack) { inner ->
        SettingsAppearanceContent(
            modifier = Modifier.padding(inner),
            state = settings,
            onSetTheme = { viewModel.onEvent(SettingsUiEvent.SetThemeMode(it)) },
            onSetDynamicColors = { viewModel.onEvent(SettingsUiEvent.SetDynamicColors(it)) },
            onSetFabSize = { viewModel.onEvent(SettingsUiEvent.SetFabSize(it)) }
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/components/PreferenceCategory.kt
================================================
package com.byteflipper.random.ui.settings.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun PreferenceCategory(
    title: String,
    modifier: Modifier = Modifier,
    icon: Painter? = null,
    iconTint: Color = MaterialTheme.colorScheme.primary,
    description: String? = null
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Optional icon
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    tint = iconTint,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
            }

            // Category title
            Text(
                text = title,
                color = MaterialTheme.colorScheme.primary,
                fontSize = 16.sp,
                fontWeight = FontWeight.SemiBold,
                letterSpacing = 0.5.sp
            )
        }

        // Optional description
        if (description != null) {
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = description,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                fontSize = 12.sp,
                letterSpacing = 0.25.sp,
                modifier = Modifier.padding(start = if (icon != null) 28.dp else 0.dp)
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/components/RadioButtonGroupPreference.kt
================================================
package com.byteflipper.random.ui.settings.components

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

data class RadioOption(
    val key: String,
    val title: String,
    val summary: String? = null,
    val description: String? = null,
    val icon: Painter? = null,
    val summaryIcon: ImageVector? = null
)

@Composable
fun RadioButtonGroup(
    options: List<RadioOption>,
    selectedKey: String,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f),
    onOptionSelected: (String) -> Unit
) {
    val selectedOption = options.find { it.key == selectedKey } ?: options.firstOrNull()

    Column {
        options.forEachIndexed { index, option ->
            // Assuming RadioButtonPreference will be available in this package after moving
            RadioButtonPreference(
                key = option.key,
                title = option.title,
                description = option.description,
                selected = selectedKey == option.key,
                icon = option.icon,
                activeIndicatorColor = activeIndicatorColor,
                inactiveIndicatorColor = inactiveIndicatorColor,
                onClick = { onOptionSelected(option.key) }
            )

            if (index < options.size - 1) {
                Spacer(modifier = Modifier.height(1.dp))
            }
        }

        selectedOption?.let { option ->
            Spacer(modifier = Modifier.height(0.dp))

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                option.summaryIcon?.let { summaryIcon ->
                    Icon(
                        imageVector = summaryIcon,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp),
                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Spacer(modifier = Modifier.width(16.dp))
                }

                // Ensure summary is not null before converting to string
                option.summary?.let { summaryText ->
                    Text(
                        text = summaryText,
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/components/RadioButtonPreference.kt
================================================
package com.byteflipper.random.ui.settings.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.RadioButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun RadioButtonPreference(
    title: String,
    selected: Boolean,
    key: String,
    description: String? = null,
    icon: Painter? = null,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f),
    onClick: () -> Unit
) {
    val indicatorColor = if (selected) activeIndicatorColor else inactiveIndicatorColor

    Surface(
        modifier = Modifier.fillMaxWidth(),
        color = MaterialTheme.colorScheme.surface,
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onClick() }
                .padding(horizontal = 8.dp, vertical = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(24.dp),
                    tint = if (selected) activeIndicatorColor else MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.width(12.dp))
            }

            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.onSurface
                )

                if (description != null) {
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = description,
                        fontSize = 12.sp,
                        lineHeight = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }

            Box(
                modifier = Modifier
                    .width(2.dp)
                    .height(24.dp)
                    .background(
                        color = indicatorColor,
                        shape = RoundedCornerShape(50)
                    )
            )

            RadioButton(
                selected = selected,
                onClick = onClick,
                colors = RadioButtonDefaults.colors(
                    selectedColor = activeIndicatorColor,
                    unselectedColor = MaterialTheme.colorScheme.onSurfaceVariant
                )
            )
        }
    }
}

@Preview
@Composable
fun RadioButtonPreferencePreview() {
    RadioButtonPreference(
        title = "Sample Title",
        selected = true,
        key = "sample_key",
        description = "This is a sample description for the radio button preference.",
        icon = null,
        onClick = {}
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/components/SettingsCategoryCard.kt
================================================
package com.byteflipper.random.ui.settings.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp

@Composable
fun SettingsCategoryCard(
    title: String,
    description: String,
    iconRes: Int,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .clip(MaterialTheme.shapes.medium)
            .clickable(onClick = onClick)
            .padding(horizontal = 8.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Box(
            modifier = Modifier
                .size(48.dp)
                .background(
                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f),
                    shape = CircleShape
                ),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                painter = painterResource(id = iconRes),
                contentDescription = null,
                modifier = Modifier.size(28.dp),
                tint = MaterialTheme.colorScheme.onPrimaryContainer
            )
        }
        Column(modifier = Modifier.weight(1f)) {
            Text(
                text = title,
                style = MaterialTheme.typography.titleMedium
            )
            Spacer(modifier = Modifier.height(2.dp))
            Text(
                text = description,
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
        Icon(
            imageVector = Icons.AutoMirrored.Filled.ArrowForward,
            contentDescription = null,
            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)
        )
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/components/SwitchPreference.kt
================================================
package com.byteflipper.random.ui.settings.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

@Composable
fun SwitchPreference(
    title: String,
    descriptionOn: String = stringResource(R.string.enabled),
    descriptionOff: String = stringResource(R.string.disabled),
    checked: Boolean,
    icon: Painter? = null,
    activeIndicatorColor: Color = MaterialTheme.colorScheme.primary,
    inactiveIndicatorColor: Color = Color.Gray.copy(alpha = 0.3f),
    activeSwitchColor: Color = MaterialTheme.colorScheme.primary,
    inactiveSwitchColor: Color = MaterialTheme.colorScheme.surfaceVariant,
    onCheckedChange: (Boolean) -> Unit
) {
    val indicatorColor = if (checked) activeIndicatorColor else inactiveIndicatorColor

    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onCheckedChange(!checked) },
        color = MaterialTheme.colorScheme.surface,
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            if (icon != null) {
                Icon(
                    painter = icon,
                    contentDescription = null,
                    modifier = Modifier.size(24.dp),
                    tint = if (checked) activeIndicatorColor else MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.width(16.dp))
            }

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = MaterialTheme.colorScheme.onSurface
                )
                Spacer(modifier = Modifier.height(3.dp))
                Text(
                    text = if (checked) descriptionOn else descriptionOff,
                    fontSize = 12.sp,
                    lineHeight = 14.sp,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            Box(
                modifier = Modifier
                    .padding(horizontal = 12.dp)
                    .width(3.dp)
                    .height(32.dp)
                    .background(
                        color = indicatorColor,
                        shape = RoundedCornerShape(50)
                    )
            )

            Switch(
                checked = checked,
                onCheckedChange = null,
                colors = SwitchDefaults.colors(
                    checkedThumbColor = MaterialTheme.colorScheme.onPrimary,
                    checkedTrackColor = activeSwitchColor,
                    checkedBorderColor = activeSwitchColor,
                    uncheckedThumbColor = MaterialTheme.colorScheme.onSurfaceVariant,
                    uncheckedTrackColor = inactiveSwitchColor,
                    uncheckedBorderColor = MaterialTheme.colorScheme.outline
                )
            )
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/general/SettingsGeneralContent.kt
================================================
package com.byteflipper.random.ui.settings.general

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.DividerDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.byteflipper.random.R
import com.byteflipper.random.data.settings.AppLanguage
import com.byteflipper.random.data.settings.HapticsIntensity
import com.byteflipper.random.data.settings.Settings
import com.byteflipper.random.ui.components.CustomChip
import com.byteflipper.random.ui.settings.components.PreferenceCategory
import com.byteflipper.random.ui.settings.components.SwitchPreference
import com.byteflipper.random.ui.components.LocalHapticsManager

@Composable
fun SettingsGeneralContent(
    modifier: Modifier = Modifier,
    state: Settings,
    onSetLanguage: (AppLanguage) -> Unit,
    onSetHapticsEnabled: (Boolean) -> Unit,
    onSetHapticsIntensity: (HapticsIntensity) -> Unit
) {
    val hapticsManager = LocalHapticsManager.current

    Column(
        modifier = modifier,
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.Start
    ) {
        PreferenceCategory(
            title = stringResource(R.string.language),
            description = stringResource(R.string.language_description)
        )

        val langKey = when (state.appLanguage) {
            AppLanguage.System -> "system"
            AppLanguage.English -> "en"
            AppLanguage.Russian -> "ru"
            AppLanguage.Ukrainian -> "uk"
            AppLanguage.Belarusian -> "be"
            AppLanguage.Polish -> "pl"
        }

        val langItems = listOf(
            "system" to stringResource(R.string.language_system),
            "en" to stringResource(R.string.language_english),
            "ru" to stringResource(R.string.language_russian),
            "uk" to stringResource(R.string.language_ukrainian),
            "be" to stringResource(R.string.language_belarusian),
            "pl" to stringResource(R.string.language_polish)
        )

        FlowRow(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            horizontalArrangement = Arrangement.spacedBy(10.dp),
            verticalArrangement = Arrangement.spacedBy(10.dp)
        ) {
            langItems.forEach { (key, label) ->
                CustomChip(
                    label = label,
                    selected = langKey == key,
                    onClick = {
                        val language = when (key) {
                            "en" -> AppLanguage.English
                            "ru" -> AppLanguage.Russian
                            "uk" -> AppLanguage.Ukrainian
                            "be" -> AppLanguage.Belarusian
                            "pl" -> AppLanguage.Polish
                            else -> AppLanguage.System
                        }
                        onSetLanguage(language)
                    }
                )
            }
        }

        HorizontalDivider(
            modifier = Modifier.padding(vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        PreferenceCategory(
            title = stringResource(R.string.vibration),
            description = stringResource(R.string.vibration_description)
        )

        SwitchPreference(
            title = stringResource(R.string.vibration),
            descriptionOn = stringResource(R.string.vibration_switch_description_on),
            descriptionOff = stringResource(R.string.vibration_switch_description_off),
            checked = state.hapticsEnabled,
            icon = painterResource(id = R.drawable.mobile_vibrate_24px),
            onCheckedChange = onSetHapticsEnabled
        )

        if (state.hapticsEnabled) {
            Column(modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
                Text(text = stringResource(R.string.vibration_intensity), style = MaterialTheme.typography.titleSmall)
                val sliderValue = when (state.hapticsIntensity) {
                    HapticsIntensity.Low -> 0f
                    HapticsIntensity.Medium -> 1f
                    HapticsIntensity.High -> 2f
                }
                Slider(
                    value = sliderValue,
                    onValueChange = { value ->
                        val level = when (value.coerceIn(0f, 2f).toInt()) {
                            0 -> HapticsIntensity.Low
                            2 -> HapticsIntensity.High
                            else -> HapticsIntensity.Medium
                        }
                        onSetHapticsIntensity(level)
                        hapticsManager?.performPress(level)
                    },
                    valueRange = 0f..2f,
                    steps = 1,
                    colors = SliderDefaults.colors(
                        thumbColor = MaterialTheme.colorScheme.primary,
                        activeTrackColor = MaterialTheme.colorScheme.primary
                    )
                )
                Row(
                    modifier = Modifier.padding(horizontal = 2.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(stringResource(R.string.vibration_low), style = MaterialTheme.typography.labelSmall)
                    Text(stringResource(R.string.vibration_medium), style = MaterialTheme.typography.labelSmall)
                    Text(stringResource(R.string.vibration_high), style = MaterialTheme.typography.labelSmall)
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/general/SettingsGeneralScaffold.kt
================================================
package com.byteflipper.random.ui.settings.general

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.systemBars
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import com.byteflipper.random.ui.settings.SettingsGeneralTopBar

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsGeneralScaffold(
    onBack: () -> Unit,
    content: @Composable (PaddingValues) -> Unit
) {
    Scaffold(
        topBar = { SettingsGeneralTopBar(onBack) },
        contentWindowInsets = WindowInsets.systemBars,
        content = content
    )
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/settings/general/SettingsGeneralScreen.kt
================================================
package com.byteflipper.random.ui.settings.general

import androidx.compose.foundation.layout.padding
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.byteflipper.random.ui.settings.SettingsUiEvent
import com.byteflipper.random.ui.settings.SettingsViewModel


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsGeneralScreen(onBack: () -> Unit) {
    val viewModel: SettingsViewModel = hiltViewModel()
    val settings by viewModel.settings.collectAsStateWithLifecycle()

    SettingsGeneralScaffold(onBack) { inner ->
        SettingsGeneralContent(
            modifier = Modifier.padding(inner),
            state = settings,
            onSetLanguage = { viewModel.onEvent(SettingsUiEvent.SetAppLanguage(it)) },
            onSetHapticsEnabled = { viewModel.onEvent(SettingsUiEvent.SetHapticsEnabled(it)) },
            onSetHapticsIntensity = { viewModel.onEvent(SettingsUiEvent.SetHapticsIntensity(it)) }
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/MaterialYouVectorDrawable.kt
================================================
package com.byteflipper.random.ui.setup

import androidx.compose.foundation.Image
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.painter.Painter

@Composable
fun MaterialYouVectorDrawable(
    modifier: Modifier = Modifier,
    painter: Painter
) {
    Image(
        painter = painter,
        contentDescription = null,
        modifier = modifier
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/PermissionIconCollage.kt
================================================
package com.byteflipper.random.ui.setup

import androidx.annotation.DrawableRes
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.produceState
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import kotlinx.collections.immutable.ImmutableList
import kotlinx.collections.immutable.toImmutableList
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

@Stable
data class IconConfig(
    val size: Dp,
    val color: Color,
    val align: Alignment,
    val rot: Float,
    val shape: Shape,
    val offsetX: Dp,
    val offsetY: Dp
)

@Composable
fun PermissionIconCollage(
    @DrawableRes icons: ImmutableList<Int>,
    modifier: Modifier = Modifier,
    height: Dp = 200.dp,
    padding: Dp = 0.dp,
) {
    val iconsToShow = remember(icons) {
        (icons.take(5) + List(5 - icons.size.coerceAtMost(5)) { null }).toImmutableList()
    }

    BoxWithConstraints(
        modifier = modifier
            .fillMaxWidth()
            .height(height)
            .padding(padding)
    ) {
        val boxMaxHeight = maxHeight
        val iconNrColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)
        val iconNrSdColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
        val iconHighlightColor = MaterialTheme.colorScheme.primary
        val iconTrdColor = MaterialTheme.colorScheme.tertiary
        val iconSndColor = MaterialTheme.colorScheme.secondary

        val iconConfigs by produceState(initialValue = emptyList(), iconsToShow, boxMaxHeight) {
            value = withContext(Dispatchers.Default) {
                val min = minOf(200.dp, height)
                listOf(
                    IconConfig(size = min * 0.8f, color = iconSndColor, align = Alignment.Center, rot = -15f, shape = RoundedCornerShape(20.dp), offsetX = 0.dp, offsetY = 0.dp),
                    IconConfig(size = min * 0.4f, color = iconNrColor, align = Alignment.TopStart, rot = 15f, shape = CircleShape, offsetX = (300.dp * 0.05f), offsetY = (boxMaxHeight * 0.05f)),
                    IconConfig(size = min * 0.4f, color = iconHighlightColor, align = Alignment.BottomEnd, rot = 5f, shape = CircleShape, offsetX = -(300.dp * 0.05f), offsetY = -(boxMaxHeight * 0.05f)),
                    IconConfig(size = min * 0.5f, color = iconNrSdColor, align = Alignment.TopEnd, rot = -20f, shape = RoundedCornerShape(20.dp), offsetX = -(300.dp * 0.1f), offsetY = (boxMaxHeight * 0.1f)),
                    IconConfig(size = min * 0.35f, color = iconTrdColor, align = Alignment.BottomStart, rot = 10f, shape = RoundedCornerShape(16.dp), offsetX = (300.dp * 0.1f), offsetY = -(boxMaxHeight * 0.1f))
                )
            }
        }

        if (iconConfigs.isNotEmpty()) {
            iconsToShow.forEachIndexed { index, iconRes ->
                if (iconRes != null && index < iconConfigs.size) {
                    val config = iconConfigs[index]
                    Icon(
                        painter = painterResource(id = iconRes),
                        contentDescription = null,
                        tint = config.color,
                        modifier = Modifier
                            .size(config.size)
                            .align(config.align)
                            .offset(config.offsetX, config.offsetY)
                            .graphicsLayer { rotationZ = config.rot }
                            .background(
                                color = MaterialTheme.colorScheme.surfaceContainerHigh,
                                shape = config.shape
                            )
                            .clip(config.shape)
                            .padding(16.dp)
                    )
                }
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/SetupBottomBar.kt
================================================
package com.byteflipper.random.ui.setup

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.ContentTransform
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.SizeTransform
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.animation.togetherWith
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.pager.PagerState
import androidx.compose.foundation.shape.RoundedCornerShape
import com.byteflipper.random.ui.theme.Dimens
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.ArrowForward
import androidx.compose.material.icons.rounded.Check
import androidx.compose.material.icons.rounded.Close
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.FloatingActionButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import racra.compose.smooth_corner_rect_library.AbsoluteSmoothCornerShape

@OptIn(
    ExperimentalFoundationApi::class,
    ExperimentalAnimationApi::class,
)
@Composable
fun SetupBottomBar(
    modifier: Modifier = Modifier,
    animated: Boolean = false,
    pagerState: PagerState,
    onNextClicked: () -> Unit,
    onFinishClicked: () -> Unit,
    isFinishButtonEnabled: Boolean
) {
    val morphAnimationSpec = tween<Float>(durationMillis = 600, easing = FastOutSlowInEasing)
    val rotationAnimationSpec = tween<Float>(durationMillis = 900, easing = FastOutSlowInEasing)

    val targetShapeValues = when (pagerState.currentPage % 3) {
        0 -> listOf(50f, 50f, 50f, 50f)
        1 -> listOf(26f, 26f, 26f, 26f)
        else -> listOf(18f, 50f, 18f, 50f)
    }

    val animatedTopStart by animateFloatAsState(targetShapeValues[0], morphAnimationSpec, label = "TopStart")
    val animatedTopEnd by animateFloatAsState(targetShapeValues[1], morphAnimationSpec, label = "TopEnd")
    val animatedBottomStart by animateFloatAsState(targetShapeValues[2], morphAnimationSpec, label = "BottomStart")
    val animatedBottomEnd by animateFloatAsState(targetShapeValues[3], morphAnimationSpec, label = "BottomEnd")

    val animatedRotation by animateFloatAsState(
        targetValue = pagerState.currentPage * 360f,
        animationSpec = rotationAnimationSpec,
        label = "Rotation"
    )

    Surface(
        modifier = modifier
            .shadow(elevation = Dimens.CardElevation, shape = RoundedCornerShape(Dimens.CardCornerRadius), clip = true),
        color = MaterialTheme.colorScheme.surfaceContainer,
        shape = AbsoluteSmoothCornerShape(
            cornerRadiusTR = 36.dp,
            smoothnessAsPercentTL = 60,
            cornerRadiusTL = 36.dp,
            smoothnessAsPercentBR = 60,
            cornerRadiusBR = 36.dp,
            smoothnessAsPercentBL = 60,
            cornerRadiusBL = 36.dp,
            smoothnessAsPercentTR = 60
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 14.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 12.dp, vertical = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                AnimatedContent(
                    targetState = pagerState.currentPage,
                    modifier = Modifier
                        .weight(1f)
                        .padding(start = 16.dp),
                    transitionSpec = {
                        if (targetState > initialState) {
                            (slideInVertically { height -> height } + fadeIn())
                                .togetherWith(slideOutVertically { height -> -height } + fadeOut())
                        } else {
                            (slideInVertically { height -> -height } + fadeIn())
                                .togetherWith(slideOutVertically { height -> height } + fadeOut())
                        }.using(SizeTransform(clip = false))
                    },
                    label = "StepTextAnimation"
                ) { targetPage ->
                    if (targetPage == 0) {
                        Text(
                            text = "Let's Go!",
                            style = MaterialTheme.typography.titleLarge,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary,
                        )
                    } else {
                        Text(
                            text = "Step ${targetPage} of ${pagerState.pageCount - 1}",
                            style = MaterialTheme.typography.bodyLarge,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                        )
                    }
                }

                val isLastPage = pagerState.currentPage == pagerState.pageCount - 1
                val containerColor = if (isLastPage && !isFinishButtonEnabled) {
                    MaterialTheme.colorScheme.surfaceContainerHighest
                } else {
                    MaterialTheme.colorScheme.primaryContainer
                }
                val contentColor = if (isLastPage && !isFinishButtonEnabled) {
                    MaterialTheme.colorScheme.onSurface.copy(alpha = 0.58f)
                } else {
                    MaterialTheme.colorScheme.onPrimaryContainer
                }

                FloatingActionButton (
                    onClick = if (isLastPage) onFinishClicked else onNextClicked,
                    shape = AbsoluteSmoothCornerShape(
                        cornerRadiusTL = animatedTopStart.toInt().dp,
                        smoothnessAsPercentTR = 60,
                        cornerRadiusTR = animatedTopEnd.toInt().dp,
                        smoothnessAsPercentTL = 60,
                        cornerRadiusBL = animatedBottomStart.toInt().dp,
                        smoothnessAsPercentBL = 60,
                        cornerRadiusBR = animatedBottomEnd.toInt().dp,
                        smoothnessAsPercentBR = 60,
                    ),
                    elevation = FloatingActionButtonDefaults.elevation(0.dp),
                    containerColor = containerColor,
                    contentColor = contentColor,
                    modifier = Modifier
                        .rotate(animatedRotation)
                        .padding(end = 0.dp)
                ) {
                    AnimatedContent(
                        modifier = Modifier.rotate(-animatedRotation),
                        targetState = pagerState.currentPage < pagerState.pageCount - 1,
                        transitionSpec = {
                            ContentTransform(
                                targetContentEnter = fadeIn(animationSpec = tween(220, delayMillis = 90)) + scaleIn(
                                    initialScale = 0.9f,
                                    animationSpec = tween(220, delayMillis = 90)
                                ),
                                initialContentExit = fadeOut(animationSpec = tween(90)) + scaleOut(
                                    targetScale = 0.9f,
                                    animationSpec = tween(90)
                                )
                            ).using(SizeTransform(clip = false))
                        },
                        label = "AnimatedFabIcon"
                    ) { isNextPage ->
                        if (isNextPage) {
                            Icon(Icons.Rounded.ArrowForward, contentDescription = "Next")
                        } else {
                            if (isFinishButtonEnabled) {
                                Icon(Icons.Rounded.Check, contentDescription = "Finish")
                            } else {
                                Icon(Icons.Rounded.Close, contentDescription = "Finish")
                            }
                        }
                    }
                }
            }
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/SetupScreen.kt
================================================
package com.byteflipper.random.ui.setup

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Check
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import com.byteflipper.random.R
import com.byteflipper.random.ui.theme.ExpTitleTypography
import kotlinx.collections.immutable.ImmutableList
import kotlinx.collections.immutable.persistentListOf
import kotlinx.coroutines.launch

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun SetupScreen(
    setupViewModel: SetupViewModel = hiltViewModel(),
    onSetupComplete: () -> Unit
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current
    val uiState by setupViewModel.uiState.collectAsState()

    // Re-check permissions when the screen is resumed
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_RESUME) {
                setupViewModel.checkPermissions(context)
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }

    val pages = remember {
        val list = mutableListOf<SetupPage>(
            SetupPage.Welcome,
        )
        // Add notifications permission page for Android 13+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            list.add(SetupPage.NotificationsPermission)
        }
        list.add(SetupPage.Finish)
        list
    }

    val pagerState = rememberPagerState(pageCount = { pages.size })
    val scope = rememberCoroutineScope()

    Scaffold(
        bottomBar = {
            SetupBottomBar(
                pagerState = pagerState,
                animated = (pagerState.currentPage != 0),
                isFinishButtonEnabled = uiState.allPermissionsGranted,
                onNextClicked = {
                    scope.launch {
                        pagerState.animateScrollToPage(pagerState.currentPage + 1)
                    }
                },
                onFinishClicked = {
                    setupViewModel.checkPermissions(context)
                    if (uiState.allPermissionsGranted) {
                        setupViewModel.setSetupComplete()
                        onSetupComplete()
                    } else {
                        Toast.makeText(context, context.getString(R.string.setup_permission_error), Toast.LENGTH_SHORT).show()
                    }
                }
            )
        }
    ) { paddingValues ->
        HorizontalPager(
            state = pagerState,
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) { pageIndex ->
            val page = pages[pageIndex]
            val pageOffset = pagerState.currentPageOffsetFraction

            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .graphicsLayer {
                        alpha = 1f - pageOffset.coerceIn(0f, 1f)
                        translationX = size.width * pageOffset
                    },
                contentAlignment = Alignment.Center
            ) {
                when (page) {
                    SetupPage.Welcome -> WelcomePage()
                    SetupPage.NotificationsPermission -> NotificationsPermissionPage(uiState)
                    SetupPage.Finish -> FinishPage()
                }
            }
        }
    }
}

sealed class SetupPage {
    object Welcome : SetupPage()
    object NotificationsPermission : SetupPage()
    object Finish : SetupPage()
}

@Composable
fun WelcomePage() {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            modifier = Modifier
                .padding(horizontal = 8.dp)
                .padding(top = 12.dp),
            text = stringResource(R.string.setup_welcome_title),
            style = ExpTitleTypography.displayLarge.copy(
                fontSize = 42.sp,
                lineHeight = 1.1.em
            )
        )
        Spacer(modifier = Modifier.height(16.dp))
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(240.dp)
                .clip(RoundedCornerShape(20.dp))
        ){
            MaterialYouVectorDrawable(
                modifier = Modifier.fillMaxSize(),
                painter = painterResource(R.drawable.logo)
            )
            SineWaveLine(
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .height(32.dp)
                    .padding(horizontal = 8.dp)
                    .padding(bottom = 4.dp),
                animate = true,
                color = MaterialTheme.colorScheme.surface,
                alpha = 0.95f,
                strokeWidth = 16.dp,
                amplitude = 4.dp,
                waves = 7.6f,
                phase = 0f
            )
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .height(22.dp)
                    .background(color = MaterialTheme.colorScheme.surface)
                    .padding(horizontal = 8.dp)
                    .padding(bottom = 4.dp)
            ){

            }
            SineWaveLine(
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .height(32.dp)
                    .padding(horizontal = 8.dp)
                    .padding(bottom = 4.dp),
                animate = true,
                color = MaterialTheme.colorScheme.primary,
                alpha = 0.95f,
                strokeWidth = 4.dp,
                amplitude = 4.dp,
                waves = 7.6f,
                phase = 0f
            )
        }
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = stringResource(R.string.setup_welcome_description), style = MaterialTheme.typography.bodyLarge)
    }
}

@Composable
fun NotificationsPermissionPage(uiState: SetupUiState) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) return

    val context = LocalContext.current

    var isGranted by remember {
        mutableStateOf(
            ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        )
    }

    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { granted ->
        isGranted = granted
    }

    val notificationIcons = persistentListOf(
        R.drawable.circle_notifications_24px,
        R.drawable.campaign_24px,
        R.drawable.bolt_24px,
        R.drawable.news_24px,
        R.drawable.release_alert_24px
    )

    PermissionPageLayout(
        title = stringResource(R.string.setup_notifications_title),
        granted = isGranted,
        description = stringResource(R.string.setup_notifications_description),
        buttonText = if (isGranted) stringResource(R.string.setup_permission_granted) else stringResource(R.string.setup_enable_notifications),
        icons = notificationIcons,
        onGrantClicked = {
            if (!isGranted) {
                launcher.launch(Manifest.permission.POST_NOTIFICATIONS)
            }
        }
    )
}


@Composable
fun FinishPage() {
    val finishIcons = persistentListOf(
        R.drawable.check_circle_24px,
        R.drawable.favorite_24px,
        R.drawable.celebration_24px,
        R.drawable.star_shine_24px,
        R.drawable.explosion_24px
    )

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center,
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(text = stringResource(R.string.setup_finish_title), style = MaterialTheme.typography.headlineLarge)
        Spacer(modifier = Modifier.height(16.dp))
        PermissionIconCollage(
            modifier = Modifier.height(230.dp),
            icons = finishIcons
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = stringResource(R.string.setup_finish_description), style = MaterialTheme.typography.bodyLarge)
    }
}

@Composable
fun PermissionPageLayout(
    title: String,
    granted: Boolean = false,
    description: String,
    buttonText: String,
    icons: ImmutableList<Int>,
    onGrantClicked: () -> Unit,
    content: @Composable () -> Unit = {}
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center,
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp)
    ) {
        Text(text = title, style = MaterialTheme.typography.headlineMedium, textAlign = TextAlign.Center)
        Spacer(modifier = Modifier.height(16.dp))
        PermissionIconCollage(icons = icons)
        Spacer(modifier = Modifier.height(16.dp))
        Text(text = description, style = MaterialTheme.typography.bodyLarge, textAlign = TextAlign.Center)
        Spacer(modifier = Modifier.height(32.dp))
        Button(
            onClick = onGrantClicked,
            enabled = !granted,
            contentPadding = PaddingValues(horizontal = 24.dp, vertical = 12.dp)
        ) {
            AnimatedVisibility(visible = granted) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(Icons.Rounded.Check, contentDescription = "Granted")
                    Spacer(modifier = Modifier.width(8.dp))
                }
            }
            Text(text = buttonText)
        }
        content()
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/SetupViewModel.kt
================================================
package com.byteflipper.random.ui.setup

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.content.ContextCompat
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.byteflipper.random.data.settings.SettingsRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

data class SetupUiState(
    val notificationsPermissionGranted: Boolean = false,
) {
    val allPermissionsGranted: Boolean
        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            notificationsPermissionGranted
        } else {
            true
        }
}

@HiltViewModel
class SetupViewModel @Inject constructor(
    private val settingsRepository: SettingsRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(SetupUiState())
    val uiState = _uiState.asStateFlow()

    fun checkNotificationsPermission(context: Context) {
        val granted = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            true
        }

        _uiState.update { it.copy(notificationsPermissionGranted = granted) }
    }

    fun checkPermissions(context: Context) {
        checkNotificationsPermission(context)
    }

    fun setSetupComplete() {
        viewModelScope.launch {
            settingsRepository.setSetupCompleted(true)
        }
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/SineWaveLine.kt
================================================
package com.byteflipper.random.ui.setup

import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.platform.LocalDensity
import kotlin.math.PI
import kotlin.math.sin

/**
 *
 * @param modifier Modificador para el Composable.
 * @param color Color de la lГ­nea.
 * @param alpha Opacidad (0f..1f).
 * @param strokeWidth Grosor de la lГ­nea (Dp).
 * @param amplitude Amplitud de la onda (Dp) вЂ” la altura mГЎxima desde el centro.
 * @param waves NГєmero de ondas completas a lo largo del ancho (ej: 1f = una onda).
 * @param phase Desplazamiento de fase estГЎtico (radianes). Se usa solo si animate = false.
 * @param animate Si es true, activa una animaciГіn de desplazamiento infinita.
 * @param animationDurationMillis DuraciГіn en milisegundos de un ciclo completo de animaciГіn.
 * @param samples Cantidad de puntos usados para dibujar la curva (mГЎs = mГЎs suave).
 * @param cap Tipo de extremo de la lГ­nea (Round, Butt, Square).
 */
@Composable
fun SineWaveLine(
    modifier: Modifier = Modifier,
    color: Color = Color.Black,
    alpha: Float = 1f,
    strokeWidth: Dp = 2.dp,
    amplitude: Dp = 8.dp,
    waves: Float = 2f,
    phase: Float = 0f,
    animate: Boolean? = false,
    animationDurationMillis: Int = 2000,
    samples: Int = 400,
    cap: StrokeCap = StrokeCap.Round
) {
    val density = LocalDensity.current

    // --- LГ“GICA DE ANIMACIГ“N ---
    // 1. Creamos una transiciГіn infinita que se encargarГЎ de repetir la animaciГіn.
    val infiniteTransition = rememberInfiniteTransition(label = "SineWaveAnimation")

    // 2. Animamos un valor flotante (la fase) de 0 a 2ПЂ (un ciclo completo de la onda).
    //    Esto crea el efecto de desplazamiento.
    val animatedPhase by infiniteTransition.animateFloat(
        initialValue = 0f,
        targetValue = 2f * PI.toFloat(),
        animationSpec = infiniteRepeatable(
            animation = tween(durationMillis = animationDurationMillis, easing = LinearEasing),
            repeatMode = RepeatMode.Restart
        ),
        label = "phaseAnimation"
    )

    // 3. Decidimos quГ© fase usar: la animada o la estГЎtica.
    val currentPhase = if (animate == true) animatedPhase else phase

    Canvas(modifier = modifier) {
        val w = size.width
        val h = size.height
        val centerY = h / 2f

        // Convertimos dp a px dentro del scope de dibujo para eficiencia
        val strokePx = with(density) { strokeWidth.toPx() }
        val ampPx = with(density) { amplitude.toPx() }

        if (w <= 0f || samples < 2) return@Canvas

        // Construimos el path senoidal usando la fase actual (animada o estГЎtica)
        val path = Path().apply {
            val step = w / (samples - 1)
            // Usamos currentPhase para el punto inicial
            moveTo(0f, centerY + (ampPx * sin(currentPhase)))
            for (i in 1 until samples) {
                val x = i * step
                // theta recorre 0..(2ПЂ * waves)
                val theta = (x / w) * (2f * PI.toFloat() * waves) + currentPhase
                val y = centerY + ampPx * sin(theta)
                lineTo(x, y)
            }
        }

        drawPath(
            path = path,
            color = color,
            style = Stroke(
                width = strokePx,
                cap = cap,
                join = StrokeJoin.Round
            ),
            alpha = alpha
        )
    }
}

/**
 *
 * SineWaveLine(
 *     modifier = Modifier
 *         .fillMaxWidth()
 *         .height(28.dp),
 *     color = Color(0xFF00AEEF),
 *     alpha = 0.95f,
 *     strokeWidth = 3.dp,
 *     amplitude = 10.dp,
 *     waves = 1.6f
 * )
 */


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/setup/SplashScreen.kt
================================================
package com.byteflipper.random.ui.setup

import androidx.compose.animation.core.CubicBezierEasing
import androidx.compose.animation.core.InfiniteTransition
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.GenericShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.byteflipper.random.ui.theme.RandomTheme
import kotlin.math.sqrt
import kotlin.time.Duration
import kotlin.time.Duration.Companion.milliseconds
import kotlin.time.DurationUnit

private val blueCatalina: Color = Color(0xFF063773)

private const val BASE_SCALE = 1.04f
private const val BASE_SCALE_Y_MULT = 1.03f

// РЎРєСЂСѓРіР»С‘РЅРЅС‹Р№ РєРІР°РґСЂР°С‚ (РєСѓР±РёРє)
val CubeShape: Shape = RoundedCornerShape(16.dp)

// РҐРµРєСЃР°РіРѕРЅ (С€РµСЃС‚РёСѓРіРѕР»СЊРЅРёРє) СЃРѕ СЃРєСЂСѓРіР»С‘РЅРЅС‹РјРё СѓРіР»Р°РјРё
fun RoundedHexagonShape(
    cornerRadius: Float = 24f,
    overallScale: Float = 1f,
    verticalScale: Float = 1f
): Shape = GenericShape { size, _ ->
    val w = size.width
    val h = size.height
    val cx = w * 0.5f
    val cy = h * 0.5f

    val sx = overallScale
    val sy = overallScale * verticalScale

    // Р±Р°Р·РѕРІС‹Рµ РІРµСЂС€РёРЅС‹ С€РµСЃС‚РёСѓРіРѕР»СЊРЅРёРєР° (РґРѕ РјР°СЃС€С‚Р°Р±РёСЂРѕРІР°РЅРёСЏ)
    val base = listOf(
        cx to 0f,
        w to 0.25f * h,
        w to 0.75f * h,
        cx to h,
        0f to 0.75f * h,
        0f to 0.25f * h
    )

    // РјР°СЃС€С‚Р°Р±РёСЂСѓРµРј РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ С†РµРЅС‚СЂР°
    val pts = base.map { (x, y) ->
        val nx = cx + (x - cx) * sx
        val ny = cy + (y - cy) * sy
        nx to ny
    }

    // СЃРєСЂСѓРіР»СЏРµРј СѓРіР»С‹ РєРІР°РґСЂР°С‚РёС‡РЅС‹РјРё Р‘РµР·СЊРµ (control вЂ” СЃР°РјР° РІРµСЂС€РёРЅР°)
    val n = pts.size
    for (i in 0 until n) {
        val prev = pts[(i - 1 + n) % n]
        val v    = pts[i]
        val next = pts[(i + 1) % n]

        val dx1 = prev.first - v.first
        val dy1 = prev.second - v.second
        val dx2 = next.first - v.first
        val dy2 = next.second - v.second

        val lenPrev = sqrt(dx1 * dx1 + dy1 * dy1)
        val lenNext = sqrt(dx2 * dx2 + dy2 * dy2)

        val minLen = if (lenPrev < lenNext) lenPrev else lenNext
        val r = cornerRadius.coerceAtMost(minLen / 2f)

        val t1 = if (lenPrev > 0f) r / lenPrev else 0f
        val t2 = if (lenNext > 0f) r / lenNext else 0f

        val p1x = v.first  - (v.first  - prev.first) * t1
        val p1y = v.second - (v.second - prev.second) * t1
        val p2x = v.first  + (next.first  - v.first) * t2
        val p2y = v.second + (next.second - v.second) * t2

        if (i == 0) {
            moveTo(p1x, p1y)
        } else {
            lineTo(p1x, p1y)
        }
        quadraticBezierTo(v.first, v.second, p2x, p2y)
    }
    close()
}

// рџ‘‰ РђРєС‚РёРІРЅР°СЏ С„РѕСЂРјР°: Р±РµР· РІРЅСѓС‚СЂРµРЅРЅРµРіРѕ СЃРєРµР№Р»Р°, С‚РѕР»СЊРєРѕ СЂР°РґРёСѓСЃ
val ActiveShape: Shape = RoundedHexagonShape(
    cornerRadius = 32f,
    overallScale = 1f,
    verticalScale = 1f
)

/**
 * A heartbeat animation composable that displays ripple effects with an optional exit animation.
 */
@Composable
fun HeartBeatAnimation(
    modifier: Modifier = Modifier,
    isVisible: Boolean = true,
    exitAnimationDuration: Duration = Duration.ZERO,
    onStartExitAnimation: () -> Unit = {}
) {
    // Animation constants
    val rippleCount = 4
    val rippleDurationMs = 3333
    val rippleDelayMs = rippleDurationMs / 8
    val baseSize = 164.dp
    val containerSize = 288.dp

    // Track exit animation state
    var isExitAnimationStarted by remember { mutableStateOf(false) }

    // Trigger exit animation when visibility changes
    LaunchedEffect(isVisible) {
        if (!isVisible && !isExitAnimationStarted) {
            isExitAnimationStarted = true
            onStartExitAnimation()
        }
    }

    // Calculate screen diagonal for exit animation scaling
    val configuration = LocalConfiguration.current
    val screenWidth = configuration.screenWidthDp
    val screenHeight = configuration.screenHeightDp
    val screenDiagonal = sqrt((screenWidth * screenWidth + screenHeight * screenHeight).toFloat())

    // Exit animation scale with snappy easing
    val snappyEasing = CubicBezierEasing(0.2f, 0.0f, 0.2f, 1.0f)
    val exitAnimationScale by animateFloatAsState(
        targetValue = if (isExitAnimationStarted) screenDiagonal / baseSize.value else 0f,
        animationSpec = tween(
            durationMillis = exitAnimationDuration.toInt(DurationUnit.MILLISECONDS),
            easing = snappyEasing
        ),
        label = "exitScale"
    )

    // Infinite ripple animation transition
    val infiniteTransition = rememberInfiniteTransition(label = "heartbeatTransition")

    Box(
        modifier = modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Only show ripples when visible and not exiting
        if (isVisible && !isExitAnimationStarted) {
            Box(
                modifier = Modifier.size(containerSize),
                contentAlignment = Alignment.Center
            ) {
                // Create ripple shapes with staggered animations
                repeat(rippleCount) { index ->
                    RippleShape(
                        infiniteTransition = infiniteTransition,
                        index = index,
                        rippleDurationMs = rippleDurationMs,
                        rippleDelayMs = rippleDelayMs,
                        baseSize = baseSize
                    )
                }
            }
        }

        // Exit animation shape
        if (isExitAnimationStarted) {
            Box(
                modifier = Modifier
                    .size(baseSize)
                    .graphicsLayer {
                        // РњР°СЃС€С‚Р°Р±РёСЂСѓРµРј С„РёРіСѓСЂСѓ: Р±Р°Р·РѕРІС‹Р№ СЃРєРµР№Р» + РІС‹С…РѕРґРЅРѕР№
                        scaleX = BASE_SCALE * exitAnimationScale
                        scaleY = BASE_SCALE * BASE_SCALE_Y_MULT * exitAnimationScale
                    }
                    .background(
                        color = blueCatalina,
                        shape = ActiveShape
                    )
            )
        }
    }
}

/**
 * Individual ripple shape component with staggered animation
 */
@Composable
private fun RippleShape(
    infiniteTransition: InfiniteTransition,
    index: Int,
    rippleDurationMs: Int,
    rippleDelayMs: Int,
    baseSize: Dp
) {
    val totalDuration = rippleDurationMs + (rippleDelayMs * index)
    val easing = CubicBezierEasing(0.4f, 0.0f, 0.2f, 1.0f)

    // Animate scale from 1f to 4f
    val animatedScale by infiniteTransition.animateFloat(
        initialValue = 1f,
        targetValue = 4f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = totalDuration,
                delayMillis = rippleDelayMs * index,
                easing = easing
            ),
            repeatMode = RepeatMode.Restart
        ),
        label = "rippleScale$index"
    )

    // Animate alpha from 0.25f to 0f
    val animatedAlpha by infiniteTransition.animateFloat(
        initialValue = 0.25f,
        targetValue = 0f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = totalDuration,
                delayMillis = rippleDelayMs * index,
                easing = easing
            ),
            repeatMode = RepeatMode.Restart
        ),
        label = "rippleAlpha$index"
    )

    Box(
        modifier = Modifier
            .size(baseSize)
            .graphicsLayer {
                // РњР°СЃС€С‚Р°Р±РёСЂСѓРµРј РІРѕР»РЅСѓ: Р±Р°Р·РѕРІС‹Р№ СЃРєРµР№Р» + Р°РЅРёРјРёСЂРѕРІР°РЅРЅС‹Р№
                scaleX = BASE_SCALE * animatedScale
                scaleY = BASE_SCALE * BASE_SCALE_Y_MULT * animatedScale
                alpha = animatedAlpha
            }
            .background(
                color = blueCatalina,
                shape = ActiveShape
            )
    )
}

@Preview(showBackground = true)
@Composable
fun HeartBeatAnimationPreview() {
    RandomTheme {
        HeartBeatAnimation(
            isVisible = true,
            exitAnimationDuration = 600L.milliseconds,
            onStartExitAnimation = { }
        )
    }
}

@Preview(showBackground = true)
@Composable
fun RippleShapePreview() {
    RandomTheme {
        RippleShape(
            infiniteTransition = rememberInfiniteTransition(label = "heartbeatTransition"),
            index = 0,
            rippleDurationMs = 3313 / 4,
            rippleDelayMs = (3313 / 4) / 8,
            baseSize = 144.dp
        )
    }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Color.kt
================================================
package com.byteflipper.random.ui.theme
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

val primaryLight = Color(0xFF415F91)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFD6E3FF)
val onPrimaryContainerLight = Color(0xFF284777)
val secondaryLight = Color(0xFF565F71)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFDAE2F9)
val onSecondaryContainerLight = Color(0xFF3E4759)
val tertiaryLight = Color(0xFF705575)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFFAD8FD)
val onTertiaryContainerLight = Color(0xFF573E5C)
val errorLight = Color(0xFFBA1A1A)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFDAD6)
val onErrorContainerLight = Color(0xFF93000A)
val backgroundLight = Color(0xFFF9F9FF)
val onBackgroundLight = Color(0xFF191C20)
val surfaceLight = Color(0xFFF9F9FF)
val onSurfaceLight = Color(0xFF191C20)
val surfaceVariantLight = Color(0xFFE0E2EC)
val onSurfaceVariantLight = Color(0xFF44474E)
val outlineLight = Color(0xFF74777F)
val outlineVariantLight = Color(0xFFC4C6D0)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF2E3036)
val inverseOnSurfaceLight = Color(0xFFF0F0F7)
val inversePrimaryLight = Color(0xFFAAC7FF)
val surfaceDimLight = Color(0xFFD9D9E0)
val surfaceBrightLight = Color(0xFFF9F9FF)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF3F3FA)
val surfaceContainerLight = Color(0xFFEDEDF4)
val surfaceContainerHighLight = Color(0xFFE7E8EE)
val surfaceContainerHighestLight = Color(0xFFE2E2E9)

val primaryLightMediumContrast = Color(0xFF133665)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF506DA0)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF2E3647)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF646D80)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF452E4A)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF7F6484)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF740006)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCF2C27)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFF9F9FF)
val onBackgroundLightMediumContrast = Color(0xFF191C20)
val surfaceLightMediumContrast = Color(0xFFF9F9FF)
val onSurfaceLightMediumContrast = Color(0xFF0F1116)
val surfaceVariantLightMediumContrast = Color(0xFFE0E2EC)
val onSurfaceVariantLightMediumContrast = Color(0xFF33363E)
val outlineLightMediumContrast = Color(0xFF4F525A)
val outlineVariantLightMediumContrast = Color(0xFF6A6D75)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF2E3036)
val inverseOnSurfaceLightMediumContrast = Color(0xFFF0F0F7)
val inversePrimaryLightMediumContrast = Color(0xFFAAC7FF)
val surfaceDimLightMediumContrast = Color(0xFFC5C6CD)
val surfaceBrightLightMediumContrast = Color(0xFFF9F9FF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF3F3FA)
val surfaceContainerLightMediumContrast = Color(0xFFE7E8EE)
val surfaceContainerHighLightMediumContrast = Color(0xFFDCDCE3)
val surfaceContainerHighestLightMediumContrast = Color(0xFFD1D1D8)

val primaryLightHighContrast = Color(0xFF032B5B)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF2A497A)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF232C3D)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF41495B)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF3A2440)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF59405E)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600004)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF98000A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFF9F9FF)
val onBackgroundLightHighContrast = Color(0xFF191C20)
val surfaceLightHighContrast = Color(0xFFF9F9FF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFE0E2EC)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF292C33)
val outlineVariantLightHighContrast = Color(0xFF464951)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF2E3036)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFAAC7FF)
val surfaceDimLightHighContrast = Color(0xFFB8B8BF)
val surfaceBrightLightHighContrast = Color(0xFFF9F9FF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF0F0F7)
val surfaceContainerLightHighContrast = Color(0xFFE2E2E9)
val surfaceContainerHighLightHighContrast = Color(0xFFD3D4DB)
val surfaceContainerHighestLightHighContrast = Color(0xFFC5C6CD)

val primaryDark = Color(0xFFAAC7FF)
val onPrimaryDark = Color(0xFF0A305F)
val primaryContainerDark = Color(0xFF284777)
val onPrimaryContainerDark = Color(0xFFD6E3FF)
val secondaryDark = Color(0xFFBEC6DC)
val onSecondaryDark = Color(0xFF283141)
val secondaryContainerDark = Color(0xFF3E4759)
val onSecondaryContainerDark = Color(0xFFDAE2F9)
val tertiaryDark = Color(0xFFDDBCE0)
val onTertiaryDark = Color(0xFF3F2844)
val tertiaryContainerDark = Color(0xFF573E5C)
val onTertiaryContainerDark = Color(0xFFFAD8FD)
val errorDark = Color(0xFFFFB4AB)
val onErrorDark = Color(0xFF690005)
val errorContainerDark = Color(0xFF93000A)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF111318)
val onBackgroundDark = Color(0xFFE2E2E9)
val surfaceDark = Color(0xFF111318)
val onSurfaceDark = Color(0xFFE2E2E9)
val surfaceVariantDark = Color(0xFF44474E)
val onSurfaceVariantDark = Color(0xFFC4C6D0)
val outlineDark = Color(0xFF8E9099)
val outlineVariantDark = Color(0xFF44474E)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE2E2E9)
val inverseOnSurfaceDark = Color(0xFF2E3036)
val inversePrimaryDark = Color(0xFF415F91)
val surfaceDimDark = Color(0xFF111318)
val surfaceBrightDark = Color(0xFF37393E)
val surfaceContainerLowestDark = Color(0xFF0C0E13)
val surfaceContainerLowDark = Color(0xFF191C20)
val surfaceContainerDark = Color(0xFF1D2024)
val surfaceContainerHighDark = Color(0xFF282A2F)
val surfaceContainerHighestDark = Color(0xFF33353A)

val primaryDarkMediumContrast = Color(0xFFCDDDFF)
val onPrimaryDarkMediumContrast = Color(0xFF002551)
val primaryContainerDarkMediumContrast = Color(0xFF7491C7)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFD4DCF2)
val onSecondaryDarkMediumContrast = Color(0xFF1D2636)
val secondaryContainerDarkMediumContrast = Color(0xFF8891A5)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFF3D2F7)
val onTertiaryDarkMediumContrast = Color(0xFF331D39)
val tertiaryContainerDarkMediumContrast = Color(0xFFA487A9)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFD2CC)
val onErrorDarkMediumContrast = Color(0xFF540003)
val errorContainerDarkMediumContrast = Color(0xFFFF5449)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF111318)
val onBackgroundDarkMediumContrast = Color(0xFFE2E2E9)
val surfaceDarkMediumContrast = Color(0xFF111318)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF44474E)
val onSurfaceVariantDarkMediumContrast = Color(0xFFDADCE6)
val outlineDarkMediumContrast = Color(0xFFAFB2BB)
val outlineVariantDarkMediumContrast = Color(0xFF8E9099)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE2E2E9)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF282A2F)
val inversePrimaryDarkMediumContrast = Color(0xFF294878)
val surfaceDimDarkMediumContrast = Color(0xFF111318)
val surfaceBrightDarkMediumContrast = Color(0xFF43444A)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF06070C)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1B1E22)
val surfaceContainerDarkMediumContrast = Color(0xFF26282D)
val surfaceContainerHighDarkMediumContrast = Color(0xFF313238)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3C3E43)
val primaryDarkHighContrast = Color(0xFFEBF0FF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFFA6C3FC)
val onPrimaryContainerDarkHighContrast = Color(0xFF000B20)
val secondaryDarkHighContrast = Color(0xFFEBF0FF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFBAC3D8)
val onSecondaryContainerDarkHighContrast = Color(0xFF030B1A)
val tertiaryDarkHighContrast = Color(0xFFFFE9FF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFD8B8DC)
val onTertiaryContainerDarkHighContrast = Color(0xFF16041D)
val errorDarkHighContrast = Color(0xFFFFECE9)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
val onErrorContainerDarkHighContrast = Color(0xFF220001)
val backgroundDarkHighContrast = Color(0xFF111318)
val onBackgroundDarkHighContrast = Color(0xFFE2E2E9)
val surfaceDarkHighContrast = Color(0xFF111318)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF44474E)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFEEEFF9)
val outlineVariantDarkHighContrast = Color(0xFFC0C2CC)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE2E2E9)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF294878)
val surfaceDimDarkHighContrast = Color(0xFF111318)
val surfaceBrightDarkHighContrast = Color(0xFF4E5056)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF1D2024)
val surfaceContainerDarkHighContrast = Color(0xFF2E3036)
val surfaceContainerHighDarkHighContrast = Color(0xFF393B41)
val surfaceContainerHighestDarkHighContrast = Color(0xFF45474C)

// Р¦РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ РєР°СЂС‚РѕС‡РµРє Р¶СЂРµР±РёСЏ (СЃРІРµС‚Р»Р°СЏ С‚РµРјР°)
val rainbowRedLight = Color(0xFFFF4444)
val rainbowOrangeLight = Color(0xFFFF8800)
val rainbowYellowLight = Color(0xFFFFFF00)
val rainbowGreenLight = Color(0xFF44FF44)
val rainbowCyanLight = Color(0xFF00FFFF)
val rainbowBlueLight = Color(0xFF4444FF)
val rainbowPurpleLight = Color(0xFFAA44FF)
val rainbowPinkLight = Color(0xFFFF69B4)
val rainbowTealLight = Color(0xFF20B2AA)
val rainbowCoralLight = Color(0xFFFF7F50)
val rainbowMintLight = Color(0xFF98FB98)
val rainbowOliveLight = Color(0xFF9ACD32)
val rainbowLavenderLight = Color(0xFFE6E6FA)
val rainbowGoldLight = Color(0xFFFFD700)

// Р¦РІРµС‚Р° СЂР°РґСѓРіРё РґР»СЏ РєР°СЂС‚РѕС‡РµРє Р¶СЂРµР±РёСЏ (С‚РµРјРЅР°СЏ С‚РµРјР°)
val rainbowRedDark = Color(0xFFFF6666)
val rainbowOrangeDark = Color(0xFFFF9944)
val rainbowYellowDark = Color(0xFFFFFF44)
val rainbowGreenDark = Color(0xFF66FF66)
val rainbowCyanDark = Color(0xFF44FFFF)
val rainbowBlueDark = Color(0xFF6666FF)
val rainbowPurpleDark = Color(0xFFBB66FF)
val rainbowPinkDark = Color(0xFFFF8DA1)
val rainbowTealDark = Color(0xFF40E0D0)
val rainbowCoralDark = Color(0xFFFF8C69)
val rainbowMintDark = Color(0xFF98F5B8)
val rainbowOliveDark = Color(0xFFB8D42A)
val rainbowLavenderDark = Color(0xFFE6E6FA)
val rainbowGoldDark = Color(0xFFFFED4E)

// РЎРїРёСЃРєРё С†РІРµС‚РѕРІ СЂР°РґСѓРіРё РґР»СЏ СЂР°Р·РЅС‹С… С‚РµРј
val rainbowColorsLight = listOf(
    rainbowRedLight,
    rainbowOrangeLight,
    rainbowYellowLight,
    rainbowGreenLight,
    rainbowCyanLight,
    rainbowBlueLight,
    rainbowPurpleLight,
    rainbowPinkLight,
    rainbowTealLight,
    rainbowCoralLight,
    rainbowMintLight,
    rainbowOliveLight,
    rainbowLavenderLight,
    rainbowGoldLight
)

val rainbowColorsDark = listOf(
    rainbowRedDark,
    rainbowOrangeDark,
    rainbowYellowDark,
    rainbowGreenDark,
    rainbowCyanDark,
    rainbowBlueDark,
    rainbowPurpleDark,
    rainbowPinkDark,
    rainbowTealDark,
    rainbowCoralDark,
    rainbowMintDark,
    rainbowOliveDark,
    rainbowLavenderDark,
    rainbowGoldDark
)

@Composable
fun getRainbowColors(): List<Color> {
    return if (isSystemInDarkTheme()) {
        rainbowColorsDark
    } else {
        rainbowColorsLight
    }
}










================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Dimens.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.ui.unit.dp

object Dimens {
    val CardElevation = 8.dp
    val CardCornerRadius = 24.dp
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Shapes.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.ui.unit.dp

object ShapesTokens {
    val CardShape = RoundedCornerShape(Dimens.CardCornerRadius)
    val MediumShape = RoundedCornerShape(16.dp)
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Theme.kt
================================================
package com.byteflipper.random.ui.theme
import android.app.Activity
import android.os.Build
import android.view.View
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.nestedscroll.NestedScrollSource.Companion.SideEffect
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val lightScheme = lightColorScheme(
    primary = primaryLight,
    onPrimary = onPrimaryLight,
    primaryContainer = primaryContainerLight,
    onPrimaryContainer = onPrimaryContainerLight,
    secondary = secondaryLight,
    onSecondary = onSecondaryLight,
    secondaryContainer = secondaryContainerLight,
    onSecondaryContainer = onSecondaryContainerLight,
    tertiary = tertiaryLight,
    onTertiary = onTertiaryLight,
    tertiaryContainer = tertiaryContainerLight,
    onTertiaryContainer = onTertiaryContainerLight,
    error = errorLight,
    onError = onErrorLight,
    errorContainer = errorContainerLight,
    onErrorContainer = onErrorContainerLight,
    background = backgroundLight,
    onBackground = onBackgroundLight,
    surface = surfaceLight,
    onSurface = onSurfaceLight,
    surfaceVariant = surfaceVariantLight,
    onSurfaceVariant = onSurfaceVariantLight,
    outline = outlineLight,
    outlineVariant = outlineVariantLight,
    scrim = scrimLight,
    inverseSurface = inverseSurfaceLight,
    inverseOnSurface = inverseOnSurfaceLight,
    inversePrimary = inversePrimaryLight,
    surfaceDim = surfaceDimLight,
    surfaceBright = surfaceBrightLight,
    surfaceContainerLowest = surfaceContainerLowestLight,
    surfaceContainerLow = surfaceContainerLowLight,
    surfaceContainer = surfaceContainerLight,
    surfaceContainerHigh = surfaceContainerHighLight,
    surfaceContainerHighest = surfaceContainerHighestLight,
)

private val darkScheme = darkColorScheme(
    primary = primaryDark,
    onPrimary = onPrimaryDark,
    primaryContainer = primaryContainerDark,
    onPrimaryContainer = onPrimaryContainerDark,
    secondary = secondaryDark,
    onSecondary = onSecondaryDark,
    secondaryContainer = secondaryContainerDark,
    onSecondaryContainer = onSecondaryContainerDark,
    tertiary = tertiaryDark,
    onTertiary = onTertiaryDark,
    tertiaryContainer = tertiaryContainerDark,
    onTertiaryContainer = onTertiaryContainerDark,
    error = errorDark,
    onError = onErrorDark,
    errorContainer = errorContainerDark,
    onErrorContainer = onErrorContainerDark,
    background = backgroundDark,
    onBackground = onBackgroundDark,
    surface = surfaceDark,
    onSurface = onSurfaceDark,
    surfaceVariant = surfaceVariantDark,
    onSurfaceVariant = onSurfaceVariantDark,
    outline = outlineDark,
    outlineVariant = outlineVariantDark,
    scrim = scrimDark,
    inverseSurface = inverseSurfaceDark,
    inverseOnSurface = inverseOnSurfaceDark,
    inversePrimary = inversePrimaryDark,
    surfaceDim = surfaceDimDark,
    surfaceBright = surfaceBrightDark,
    surfaceContainerLowest = surfaceContainerLowestDark,
    surfaceContainerLow = surfaceContainerLowDark,
    surfaceContainer = surfaceContainerDark,
    surfaceContainerHigh = surfaceContainerHighDark,
    surfaceContainerHighest = surfaceContainerHighestDark,
)

private val mediumContrastLightColorScheme = lightColorScheme(
    primary = primaryLightMediumContrast,
    onPrimary = onPrimaryLightMediumContrast,
    primaryContainer = primaryContainerLightMediumContrast,
    onPrimaryContainer = onPrimaryContainerLightMediumContrast,
    secondary = secondaryLightMediumContrast,
    onSecondary = onSecondaryLightMediumContrast,
    secondaryContainer = secondaryContainerLightMediumContrast,
    onSecondaryContainer = onSecondaryContainerLightMediumContrast,
    tertiary = tertiaryLightMediumContrast,
    onTertiary = onTertiaryLightMediumContrast,
    tertiaryContainer = tertiaryContainerLightMediumContrast,
    onTertiaryContainer = onTertiaryContainerLightMediumContrast,
    error = errorLightMediumContrast,
    onError = onErrorLightMediumContrast,
    errorContainer = errorContainerLightMediumContrast,
    onErrorContainer = onErrorContainerLightMediumContrast,
    background = backgroundLightMediumContrast,
    onBackground = onBackgroundLightMediumContrast,
    surface = surfaceLightMediumContrast,
    onSurface = onSurfaceLightMediumContrast,
    surfaceVariant = surfaceVariantLightMediumContrast,
    onSurfaceVariant = onSurfaceVariantLightMediumContrast,
    outline = outlineLightMediumContrast,
    outlineVariant = outlineVariantLightMediumContrast,
    scrim = scrimLightMediumContrast,
    inverseSurface = inverseSurfaceLightMediumContrast,
    inverseOnSurface = inverseOnSurfaceLightMediumContrast,
    inversePrimary = inversePrimaryLightMediumContrast,
    surfaceDim = surfaceDimLightMediumContrast,
    surfaceBright = surfaceBrightLightMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestLightMediumContrast,
    surfaceContainerLow = surfaceContainerLowLightMediumContrast,
    surfaceContainer = surfaceContainerLightMediumContrast,
    surfaceContainerHigh = surfaceContainerHighLightMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestLightMediumContrast,
)

private val highContrastLightColorScheme = lightColorScheme(
    primary = primaryLightHighContrast,
    onPrimary = onPrimaryLightHighContrast,
    primaryContainer = primaryContainerLightHighContrast,
    onPrimaryContainer = onPrimaryContainerLightHighContrast,
    secondary = secondaryLightHighContrast,
    onSecondary = onSecondaryLightHighContrast,
    secondaryContainer = secondaryContainerLightHighContrast,
    onSecondaryContainer = onSecondaryContainerLightHighContrast,
    tertiary = tertiaryLightHighContrast,
    onTertiary = onTertiaryLightHighContrast,
    tertiaryContainer = tertiaryContainerLightHighContrast,
    onTertiaryContainer = onTertiaryContainerLightHighContrast,
    error = errorLightHighContrast,
    onError = onErrorLightHighContrast,
    errorContainer = errorContainerLightHighContrast,
    onErrorContainer = onErrorContainerLightHighContrast,
    background = backgroundLightHighContrast,
    onBackground = onBackgroundLightHighContrast,
    surface = surfaceLightHighContrast,
    onSurface = onSurfaceLightHighContrast,
    surfaceVariant = surfaceVariantLightHighContrast,
    onSurfaceVariant = onSurfaceVariantLightHighContrast,
    outline = outlineLightHighContrast,
    outlineVariant = outlineVariantLightHighContrast,
    scrim = scrimLightHighContrast,
    inverseSurface = inverseSurfaceLightHighContrast,
    inverseOnSurface = inverseOnSurfaceLightHighContrast,
    inversePrimary = inversePrimaryLightHighContrast,
    surfaceDim = surfaceDimLightHighContrast,
    surfaceBright = surfaceBrightLightHighContrast,
    surfaceContainerLowest = surfaceContainerLowestLightHighContrast,
    surfaceContainerLow = surfaceContainerLowLightHighContrast,
    surfaceContainer = surfaceContainerLightHighContrast,
    surfaceContainerHigh = surfaceContainerHighLightHighContrast,
    surfaceContainerHighest = surfaceContainerHighestLightHighContrast,
)

private val mediumContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkMediumContrast,
    onPrimary = onPrimaryDarkMediumContrast,
    primaryContainer = primaryContainerDarkMediumContrast,
    onPrimaryContainer = onPrimaryContainerDarkMediumContrast,
    secondary = secondaryDarkMediumContrast,
    onSecondary = onSecondaryDarkMediumContrast,
    secondaryContainer = secondaryContainerDarkMediumContrast,
    onSecondaryContainer = onSecondaryContainerDarkMediumContrast,
    tertiary = tertiaryDarkMediumContrast,
    onTertiary = onTertiaryDarkMediumContrast,
    tertiaryContainer = tertiaryContainerDarkMediumContrast,
    onTertiaryContainer = onTertiaryContainerDarkMediumContrast,
    error = errorDarkMediumContrast,
    onError = onErrorDarkMediumContrast,
    errorContainer = errorContainerDarkMediumContrast,
    onErrorContainer = onErrorContainerDarkMediumContrast,
    background = backgroundDarkMediumContrast,
    onBackground = onBackgroundDarkMediumContrast,
    surface = surfaceDarkMediumContrast,
    onSurface = onSurfaceDarkMediumContrast,
    surfaceVariant = surfaceVariantDarkMediumContrast,
    onSurfaceVariant = onSurfaceVariantDarkMediumContrast,
    outline = outlineDarkMediumContrast,
    outlineVariant = outlineVariantDarkMediumContrast,
    scrim = scrimDarkMediumContrast,
    inverseSurface = inverseSurfaceDarkMediumContrast,
    inverseOnSurface = inverseOnSurfaceDarkMediumContrast,
    inversePrimary = inversePrimaryDarkMediumContrast,
    surfaceDim = surfaceDimDarkMediumContrast,
    surfaceBright = surfaceBrightDarkMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkMediumContrast,
    surfaceContainerLow = surfaceContainerLowDarkMediumContrast,
    surfaceContainer = surfaceContainerDarkMediumContrast,
    surfaceContainerHigh = surfaceContainerHighDarkMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkMediumContrast,
)

private val highContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkHighContrast,
    onPrimary = onPrimaryDarkHighContrast,
    primaryContainer = primaryContainerDarkHighContrast,
    onPrimaryContainer = onPrimaryContainerDarkHighContrast,
    secondary = secondaryDarkHighContrast,
    onSecondary = onSecondaryDarkHighContrast,
    secondaryContainer = secondaryContainerDarkHighContrast,
    onSecondaryContainer = onSecondaryContainerDarkHighContrast,
    tertiary = tertiaryDarkHighContrast,
    onTertiary = onTertiaryDarkHighContrast,
    tertiaryContainer = tertiaryContainerDarkHighContrast,
    onTertiaryContainer = onTertiaryContainerDarkHighContrast,
    error = errorDarkHighContrast,
    onError = onErrorDarkHighContrast,
    errorContainer = errorContainerDarkHighContrast,
    onErrorContainer = onErrorContainerDarkHighContrast,
    background = backgroundDarkHighContrast,
    onBackground = onBackgroundDarkHighContrast,
    surface = surfaceDarkHighContrast,
    onSurface = onSurfaceDarkHighContrast,
    surfaceVariant = surfaceVariantDarkHighContrast,
    onSurfaceVariant = onSurfaceVariantDarkHighContrast,
    outline = outlineDarkHighContrast,
    outlineVariant = outlineVariantDarkHighContrast,
    scrim = scrimDarkHighContrast,
    inverseSurface = inverseSurfaceDarkHighContrast,
    inverseOnSurface = inverseOnSurfaceDarkHighContrast,
    inversePrimary = inversePrimaryDarkHighContrast,
    surfaceDim = surfaceDimDarkHighContrast,
    surfaceBright = surfaceBrightDarkHighContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkHighContrast,
    surfaceContainerLow = surfaceContainerLowDarkHighContrast,
    surfaceContainer = surfaceContainerDarkHighContrast,
    surfaceContainerHigh = surfaceContainerHighDarkHighContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkHighContrast,
)

@Immutable
data class ColorFamily(
    val color: Color,
    val onColor: Color,
    val colorContainer: Color,
    val onColorContainer: Color
)

val unspecified_scheme = ColorFamily(
    Color.Unspecified, Color.Unspecified, Color.Unspecified, Color.Unspecified
)

@Composable
fun RandomTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable() () -> Unit
) {
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window

            // Disabling Autofill
            window.decorView.importantForAutofill =
                View.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS

            // Fix for nav bar being semi transparent in api 29+
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                window.isNavigationBarContrastEnforced = false
            }

            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme
            WindowCompat.getInsetsController(window, view).isAppearanceLightNavigationBars = !darkTheme
        }
    }

    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> darkScheme
        else -> lightScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}




================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Type.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Typography
import androidx.compose.runtime.Composable
import androidx.compose.ui.text.PlatformTextStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.googlefonts.Font as GoogleFontTypeface
import androidx.compose.ui.text.googlefonts.GoogleFont
import androidx.compose.ui.text.style.TextGeometricTransform
import androidx.compose.ui.unit.em
import androidx.compose.ui.unit.sp
import com.byteflipper.random.R

private val montserrat = GoogleFont("Montserrat")
private val provider = GoogleFont.Provider(
    providerAuthority = "com.google.android.gms.fonts",
    providerPackage   = "com.google.android.gms",
    certificates      = R.array.com_google_android_gms_fonts_certs
)

val MontserratFamily = FontFamily(
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.Black),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.ExtraBold),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.Bold),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.SemiBold),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.Medium),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.Normal),
    GoogleFontTypeface(googleFont = montserrat, fontProvider = provider, weight = FontWeight.Light),
)

private val NoPad = PlatformTextStyle(includeFontPadding = false)

val ExpTitleTypography = Typography(
    displayLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 60.sp,
        textGeometricTransform = TextGeometricTransform(scaleX = 1.5f),
        letterSpacing = (-0.02).em,
        lineHeight = 0.95.em,
        platformStyle = NoPad
    ),
    displayMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 50.sp,
        //textGeometricTransform = TextGeometricTransform(scaleX = 1f),
        letterSpacing = (-0.02).em,
        lineHeight = 0.95.em,
        platformStyle = NoPad
    ),
    titleMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Bold,
        fontSize = 32.sp,
        textGeometricTransform = TextGeometricTransform(scaleX = 1.3f),
        letterSpacing = (-0.02).em,
        lineHeight = 0.95.em,
        platformStyle = NoPad
    )
)

// Define tu FontFamily personalizada aquГ­
val GoogleSansRounded = FontFamily(
    Font(R.font.google_sans_rounded_regular, FontWeight.Normal)
    // Agrega otras variantes (light, medium, italic) si las tienes
)

// Set of Material typography styles to start with
// Р‘Р°Р·РѕРІР°СЏ С‚РёРїРѕРіСЂР°С„РёРєР° РїСЂРёР»РѕР¶РµРЅРёСЏ (РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РЅР° РІСЃРµС… СЌРєСЂР°РЅР°С…, РєСЂРѕРјРµ РєР°СЂС‚РѕС‡РµРє СЃРїРёСЃРєРѕРІ/С‡РёСЃРµР»)
val Typography = Typography(
    displayLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 60.sp,
        letterSpacing = (-0.02).em,
        lineHeight = 1.0.em,
        textGeometricTransform = TextGeometricTransform(scaleX = 1.15f),
        platformStyle = NoPad
    ),
    displayMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 48.sp,
        letterSpacing = (-0.01).em,
        lineHeight = 1.05.em,
        platformStyle = NoPad
    ),
    displaySmall = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 40.sp,
        letterSpacing = 0.em,
        lineHeight = 1.05.em,
        platformStyle = NoPad
    ),
    headlineLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 32.sp,
        letterSpacing = (-0.01).em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    headlineMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 28.sp,
        letterSpacing = 0.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    headlineSmall = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 24.sp,
        letterSpacing = 0.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    titleLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Bold,
        fontSize = 22.sp,
        letterSpacing = (-0.01).em,
        lineHeight = 1.15.em,
        platformStyle = NoPad
    ),
    titleMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 16.sp,
        letterSpacing = (-0.005).em,
        lineHeight = 1.2.em,
        platformStyle = NoPad
    ),
    titleSmall = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 14.sp,
        letterSpacing = 0.em,
        lineHeight = 1.2.em,
        platformStyle = NoPad
    ),
    bodyLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.35.em,
        platformStyle = NoPad
    ),
    bodyMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 14.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.35.em,
        platformStyle = NoPad
    ),
    bodySmall = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 12.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.35.em,
        platformStyle = NoPad
    ),
    labelLarge = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 14.sp,
        letterSpacing = 0.1.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    labelMedium = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 12.sp,
        letterSpacing = 0.05.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    labelSmall = TextStyle(
        fontFamily = MontserratFamily,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        letterSpacing = 0.05.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
)

// РљРѕРјРїР°РєС‚РЅР°СЏ С‚РёРїРѕРіСЂР°С„РёРєР° РґР»СЏ РєР°СЂС‚РѕС‡РµРє РЅР° СЌРєСЂР°РЅР°С… СЃРїРёСЃРєРѕРІ Рё С‡РёСЃРµР»
val CardTypography = Typography(
    displayLarge = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 44.sp,
        letterSpacing = 0.em,
        lineHeight = 1.0.em,
        platformStyle = NoPad
    ),
    displayMedium = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 36.sp,
        letterSpacing = 0.em,
        lineHeight = 1.0.em,
        platformStyle = NoPad
    ),
    displaySmall = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 30.sp,
        letterSpacing = 0.em,
        lineHeight = 1.0.em,
        platformStyle = NoPad
    ),
    headlineLarge = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 22.sp,
        letterSpacing = 0.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    headlineMedium = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 20.sp,
        letterSpacing = 0.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    headlineSmall = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 18.sp,
        letterSpacing = 0.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    titleLarge = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 18.sp,
        letterSpacing = 0.em,
        lineHeight = 1.15.em,
        platformStyle = NoPad
    ),
    titleMedium = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 16.sp,
        letterSpacing = 0.em,
        lineHeight = 1.15.em,
        platformStyle = NoPad
    ),
    titleSmall = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 14.sp,
        letterSpacing = 0.em,
        lineHeight = 1.15.em,
        platformStyle = NoPad
    ),
    bodyLarge = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Normal,
        fontSize = 14.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.25.em,
        platformStyle = NoPad
    ),
    bodyMedium = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Normal,
        fontSize = 13.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.25.em,
        platformStyle = NoPad
    ),
    bodySmall = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Normal,
        fontSize = 12.sp,
        letterSpacing = 0.sp,
        lineHeight = 1.25.em,
        platformStyle = NoPad
    ),
    labelLarge = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 12.sp,
        letterSpacing = 0.05.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    labelMedium = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        letterSpacing = 0.05.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
    labelSmall = TextStyle(
        fontFamily = GoogleSansRounded,
        fontWeight = FontWeight.Medium,
        fontSize = 10.sp,
        letterSpacing = 0.05.em,
        lineHeight = 1.1.em,
        platformStyle = NoPad
    ),
)

@Composable
fun CardContentTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = MaterialTheme.colorScheme,
        typography = CardTypography,
        shapes = MaterialTheme.shapes,
        content = content
    )
}


================================================
FILE: app/src/main/java/com/byteflipper/random/utils/ChromeCustomTabUtil.kt
================================================
package com.byteflipper.random.utils

import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.browser.customtabs.CustomTabColorSchemeParams
import androidx.browser.customtabs.CustomTabsIntent
import com.byteflipper.random.R

object ChromeCustomTabUtil {

    private const val TAG = "ChromeCustomTabUtil"

    /**
     * Opens a URL in a Chrome Custom Tab or falls back to the default browser.
     *
     * @param context The application context.
     * @param url The URL to open.
     * @param primaryColor The primary color from the current MaterialTheme (as ARGB Int).
     */
    fun openUrl(context: Context, url: String, primaryColor: Int) {
        val uri = Uri.parse(url)
        try {
            val customTabsIntent = CustomTabsIntent.Builder()
                .setDefaultColorSchemeParams(
                    CustomTabColorSchemeParams.Builder()
                        .setToolbarColor(primaryColor)
                        .build()
                )
                .setShowTitle(true)
                // Add custom animations (optional, requires anim resources)
                // .setStartAnimations(context, R.anim.slide_in_right, R.anim.slide_out_left)
                // .setExitAnimations(context, android.R.anim.slide_in_left, android.R.anim.slide_out_right)
                .build()

            customTabsIntent.intent.putExtra(
                Intent.EXTRA_REFERRER,
                Uri.parse("android-app://" + context.packageName)
            )

            customTabsIntent.launchUrl(context, uri)

        } catch (e: ActivityNotFoundException) {
            Log.e(TAG, "Custom Tabs not supported or no browser found: ${e.message}")
            openUrlInDefaultBrowser(context, uri)
        } catch (e: Exception) {
            // Handle other potential exceptions during Custom Tab launch
            Log.e(TAG, "Error launching Custom Tab: ${e.message}", e)
            openUrlInDefaultBrowser(context, uri)
        }
    }

    private fun openUrlInDefaultBrowser(context: Context, uri: Uri) {
        val intent = Intent(Intent.ACTION_VIEW, uri)
        try {
            context.startActivity(intent)
        } catch (e: ActivityNotFoundException) {
            Log.e(TAG, "No browser found to open URL: ${e.message}")
            Toast.makeText(
                context,
                context.getString(R.string.error_no_browser_found),
                Toast.LENGTH_SHORT
            ).show()
        } catch (e: Exception) {
            Log.e(TAG, "Error opening URL in default browser: ${e.message}", e)
            Toast.makeText(
                context,
                context.getString(R.string.error_no_browser_found),
                Toast.LENGTH_SHORT
            ).show()
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/utils/Constants.kt
================================================
package com.byteflipper.random.utils

/**
 * Constants used throughout the application
 */
object Constants {

    // Database
    const val DATABASE_NAME = "random.db"

    // DataStore
    const val DATASTORE_SETTINGS_NAME = "user_settings"

    // DataStore keys for default list
    const val DEFAULT_LIST_NAME_KEY = "default_list_name"
    const val DEFAULT_LIST_ITEMS_KEY = "default_list_items"
    const val ITEMS_SEPARATOR = "\u0001"

    // Generator settings
    const val DEFAULT_DELAY_MS = 3000
    const val MIN_DELAY_MS = 500
    const val MAX_DELAY_MS = 10000
    const val INSTANT_DELAY_MS = 1000

    // UI constants
    const val MIN_GENERATE_COUNT = 1
    const val MAX_GENERATE_COUNT = 1000
    const val DEFAULT_GENERATE_COUNT = 1

    // Animation durations
    const val SPLASH_FADE_DURATION = 800L
    const val SPLASH_FADE_OFFSET = 200L
    const val SPLASH_ANDROIDX_DURATION = 1000L
    const val SPLASH_CUSTOM_DURATION = 3000L

    // Card sizes
    const val LIST_CARD_SIZE_DP = 320
    const val NUMBERS_CARD_SIZE_DP = 280

    // Adaptive UI calculations
    const val ADAPTIVE_PADDING_RATIO = 0.04f
    const val ADAPTIVE_SPACING_RATIO = 0.03f
    const val ADAPTIVE_TITLE_FONT_RATIO = 0.045f
    const val ADAPTIVE_ITEM_FONT_RATIO = 0.035f

    // Adaptive UI bounds
    const val MIN_ADAPTIVE_PADDING_DP = 12f
    const val MAX_ADAPTIVE_PADDING_DP = 28f
    const val MIN_ADAPTIVE_SPACING_DP = 6f
    const val MAX_ADAPTIVE_SPACING_DP = 16f
    const val MIN_TITLE_FONT_SP = 18f
    const val MAX_TITLE_FONT_SP = 32f
    const val MIN_ITEM_FONT_SP = 20f
    const val MAX_ITEM_FONT_SP = 36f

    // Scrim animation
    const val SCRIM_BLUR_MULTIPLIER = 8f

    // Haptic feedback
    const val HAPTIC_FEEDBACK_ENABLED = true
}



================================================
FILE: app/src/main/res/resources.properties
================================================
unqualifiedResLocale = en





================================================
FILE: app/src/main/res/drawable/add_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M440,520L240,520Q223,520 211.5,508.5Q200,497 200,480Q200,463 211.5,451.5Q223,440 240,440L440,440L440,240Q440,223 451.5,211.5Q463,200 480,200Q497,200 508.5,211.5Q520,223 520,240L520,440L720,440Q737,440 748.5,451.5Q760,463 760,480Q760,497 748.5,508.5Q737,520 720,520L520,520L520,720Q520,737 508.5,748.5Q497,760 480,760Q463,760 451.5,748.5Q440,737 440,720L440,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/apps_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M240,800Q207,800 183.5,776.5Q160,753 160,720Q160,687 183.5,663.5Q207,640 240,640Q273,640 296.5,663.5Q320,687 320,720Q320,753 296.5,776.5Q273,800 240,800ZM480,800Q447,800 423.5,776.5Q400,753 400,720Q400,687 423.5,663.5Q447,640 480,640Q513,640 536.5,663.5Q560,687 560,720Q560,753 536.5,776.5Q513,800 480,800ZM720,800Q687,800 663.5,776.5Q640,753 640,720Q640,687 663.5,663.5Q687,640 720,640Q753,640 776.5,663.5Q800,687 800,720Q800,753 776.5,776.5Q753,800 720,800ZM240,560Q207,560 183.5,536.5Q160,513 160,480Q160,447 183.5,423.5Q207,400 240,400Q273,400 296.5,423.5Q320,447 320,480Q320,513 296.5,536.5Q273,560 240,560ZM480,560Q447,560 423.5,536.5Q400,513 400,480Q400,447 423.5,423.5Q447,400 480,400Q513,400 536.5,423.5Q560,447 560,480Q560,513 536.5,536.5Q513,560 480,560ZM720,560Q687,560 663.5,536.5Q640,513 640,480Q640,447 663.5,423.5Q687,400 720,400Q753,400 776.5,423.5Q800,447 800,480Q800,513 776.5,536.5Q753,560 720,560ZM240,320Q207,320 183.5,296.5Q160,273 160,240Q160,207 183.5,183.5Q207,160 240,160Q273,160 296.5,183.5Q320,207 320,240Q320,273 296.5,296.5Q273,320 240,320ZM480,320Q447,320 423.5,296.5Q400,273 400,240Q400,207 423.5,183.5Q447,160 480,160Q513,160 536.5,183.5Q560,207 560,240Q560,273 536.5,296.5Q513,320 480,320ZM720,320Q687,320 663.5,296.5Q640,273 640,240Q640,207 663.5,183.5Q687,160 720,160Q753,160 776.5,183.5Q800,207 800,240Q800,273 776.5,296.5Q753,320 720,320Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/arrow_back_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M313,520L509,716Q521,728 520.5,744Q520,760 508,772Q496,783 480,783.5Q464,784 452,772L188,508Q182,502 179.5,495Q177,488 177,480Q177,472 179.5,465Q182,458 188,452L452,188Q463,177 479.5,177Q496,177 508,188Q520,200 520,216.5Q520,233 508,245L313,440L760,440Q777,440 788.5,451.5Q800,463 800,480Q800,497 788.5,508.5Q777,520 760,520L313,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/autorenew_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M240,482Q240,498 242,513.5Q244,529 249,544Q254,561 248,576.5Q242,592 227,599Q211,607 195.5,600.5Q180,594 175,577Q167,554 163.5,530Q160,506 160,482Q160,348 253,254Q346,160 480,160L487,160L451,124Q440,113 440,96Q440,79 451,68Q462,57 479,57Q496,57 507,68L611,172Q623,184 623,200Q623,216 611,228L507,332Q496,343 479,343Q462,343 451,332Q440,321 440,304Q440,287 451,276L487,240L480,240Q380,240 310,310.5Q240,381 240,482ZM720,478Q720,462 718,446.5Q716,431 711,416Q706,399 712,383.5Q718,368 733,361Q749,353 764.5,359.5Q780,366 785,383Q793,406 796.5,430Q800,454 800,478Q800,612 707,706Q614,800 480,800L473,800L509,836Q520,847 520,864Q520,881 509,892Q498,903 481,903Q464,903 453,892L349,788Q337,776 337,760Q337,744 349,732L453,628Q464,617 481,617Q498,617 509,628Q520,639 520,656Q520,673 509,684L473,720L480,720Q580,720 650,649.5Q720,579 720,478Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/bolt_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M422,728L629,480L469,480L498,253L313,520L452,520L422,728ZM360,600L236,600Q212,600 200.5,578.5Q189,557 203,537L502,107Q512,93 528,87.5Q544,82 561,88Q578,94 586,109Q594,124 592,141L560,400L715,400Q741,400 751.5,423Q762,446 745,466L416,860Q405,873 389,877Q373,881 358,874Q343,867 334.5,852.5Q326,838 328,821L360,600ZM471,490L471,490L471,490L471,490L471,490L471,490Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/bug_report_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q415,840 359.5,808Q304,776 272,720L200,720Q183,720 171.5,708.5Q160,697 160,680Q160,663 171.5,651.5Q183,640 200,640L244,640Q241,620 240.5,600Q240,580 240,560L200,560Q183,560 171.5,548.5Q160,537 160,520Q160,503 171.5,491.5Q183,480 200,480L240,480Q240,460 240.5,440Q241,420 244,400L200,400Q183,400 171.5,388.5Q160,377 160,360Q160,343 171.5,331.5Q183,320 200,320L272,320Q286,297 303.5,277Q321,257 344,242L307,204Q296,193 296,176.5Q296,160 308,148Q319,137 336,137Q353,137 364,148L422,206Q450,197 479,197Q508,197 536,206L596,147Q607,136 623.5,136Q640,136 652,148Q663,159 663,176Q663,193 652,204L614,242Q637,257 655.5,276.5Q674,296 688,320L760,320Q777,320 788.5,331.5Q800,343 800,360Q800,377 788.5,388.5Q777,400 760,400L716,400Q719,420 719.5,440Q720,460 720,480L760,480Q777,480 788.5,491.5Q800,503 800,520Q800,537 788.5,548.5Q777,560 760,560L720,560Q720,580 719.5,600Q719,620 716,640L760,640Q777,640 788.5,651.5Q800,663 800,680Q800,697 788.5,708.5Q777,720 760,720L688,720Q656,776 600.5,808Q545,840 480,840ZM480,760Q546,760 593,713Q640,666 640,600L640,440Q640,374 593,327Q546,280 480,280Q414,280 367,327Q320,374 320,440L320,600Q320,666 367,713Q414,760 480,760ZM440,640L520,640Q537,640 548.5,628.5Q560,617 560,600Q560,583 548.5,571.5Q537,560 520,560L440,560Q423,560 411.5,571.5Q400,583 400,600Q400,617 411.5,628.5Q423,640 440,640ZM440,480L520,480Q537,480 548.5,468.5Q560,457 560,440Q560,423 548.5,411.5Q537,400 520,400L440,400Q423,400 411.5,411.5Q400,423 400,440Q400,457 411.5,468.5Q423,480 440,480ZM480,520Q480,520 480,520Q480,520 480,520L480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520L480,520Q480,520 480,520Q480,520 480,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/campaign_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M840,520L760,520Q743,520 731.5,508.5Q720,497 720,480Q720,463 731.5,451.5Q743,440 760,440L840,440Q857,440 868.5,451.5Q880,463 880,480Q880,497 868.5,508.5Q857,520 840,520ZM664,672Q674,658 690,656Q706,654 720,664L784,712Q798,722 800,738Q802,754 792,768Q782,782 766,784Q750,786 736,776L672,728Q658,718 656,702Q654,686 664,672ZM784,248L720,296Q706,306 690,304Q674,302 664,288Q654,274 656,258Q658,242 672,232L736,184Q750,174 766,176Q782,178 792,192Q802,206 800,222Q798,238 784,248ZM200,600L160,600Q127,600 103.5,576.5Q80,553 80,520L80,440Q80,407 103.5,383.5Q127,360 160,360L320,360L459,276Q479,264 499.5,276Q520,288 520,311L520,649Q520,672 499.5,684Q479,696 459,684L320,600L280,600L280,720Q280,737 268.5,748.5Q257,760 240,760Q223,760 211.5,748.5Q200,737 200,720L200,600ZM440,578L440,382L342,440L160,440Q160,440 160,440Q160,440 160,440L160,520Q160,520 160,520Q160,520 160,520L342,520L440,578ZM560,614L560,346Q587,370 603.5,404.5Q620,439 620,480Q620,521 603.5,555.5Q587,590 560,614ZM300,480L300,480L300,480Q300,480 300,480Q300,480 300,480L300,480Q300,480 300,480Q300,480 300,480L300,480L300,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/celebration_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M212,748L494,648L312,466L212,748ZM921,281Q912,290 900,290Q888,290 879,281L876,278Q862,264 841,264Q820,264 806,278L603,481Q594,490 582,490Q570,490 561,481Q552,472 552,460Q552,448 561,439L764,236Q796,204 841,204Q886,204 918,236L921,239Q930,248 930,260Q930,272 921,281ZM399,161Q408,152 420,152Q432,152 441,161L446,166Q478,198 478,242Q478,286 446,318L443,321Q434,330 422,330Q410,330 401,321Q392,312 392,300Q392,288 401,279L404,276Q418,262 418,242Q418,222 404,208L399,203Q390,194 390,182Q390,170 399,161ZM561,81Q570,72 582,72Q594,72 603,81L646,124Q678,156 678,201Q678,246 646,278L523,401Q514,410 502,410Q490,410 481,401Q472,392 472,380Q472,368 481,359L604,236Q618,222 618,201Q618,180 604,166L561,123Q552,114 552,102Q552,90 561,81ZM881,561Q872,570 860,570Q848,570 839,561L796,518Q782,504 761,504Q740,504 726,518L683,561Q674,570 662,570Q650,570 641,561Q632,552 632,540Q632,528 641,519L684,476Q716,444 761,444Q806,444 838,476L881,519Q890,528 890,540Q890,552 881,561ZM212,748L212,748L212,748ZM108,800L259,380Q264,367 274.5,360Q285,353 297,353Q305,353 312,356Q319,359 325,365L595,635Q601,641 604,648Q607,655 607,663Q607,675 600,685.5Q593,696 580,701L160,852Q148,857 137,853.5Q126,850 118,842Q110,834 106.5,823Q103,812 108,800Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/check_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M382,606L721,267Q733,255 749,255Q765,255 777,267Q789,279 789,295.5Q789,312 777,324L410,692Q398,704 382,704Q366,704 354,692L182,520Q170,508 170.5,491.5Q171,475 183,463Q195,451 211.5,451Q228,451 240,463L382,606Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/check_box_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M424,536L338,450Q327,439 310,439Q293,439 282,450Q271,461 271,478Q271,495 282,506L396,620Q408,632 424,632Q440,632 452,620L678,394Q689,383 689,366Q689,349 678,338Q667,327 650,327Q633,327 622,338L424,536ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/check_circle_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M424,552L338,466Q327,455 310,455Q293,455 282,466Q271,477 271,494Q271,511 282,522L396,636Q408,648 424,648Q440,648 452,636L678,410Q689,399 689,382Q689,365 678,354Q667,343 650,343Q633,343 622,354L424,552ZM480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/circle_notifications_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,740Q505,740 522.5,722.5Q540,705 540,680L420,680Q420,705 437.5,722.5Q455,740 480,740ZM400,560L400,440Q400,407 423.5,383.5Q447,360 480,360Q513,360 536.5,383.5Q560,407 560,440L560,560L400,560ZM480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480ZM320,640L640,640Q657,640 668.5,628.5Q680,617 680,600Q680,583 668.5,571.5Q657,560 640,560L640,560L640,456Q640,395 608.5,344.5Q577,294 520,280L520,260Q520,243 508.5,231.5Q497,220 480,220Q463,220 451.5,231.5Q440,243 440,260L440,280Q383,294 351.5,344.5Q320,395 320,456L320,560L320,560Q303,560 291.5,571.5Q280,583 280,600Q280,617 291.5,628.5Q303,640 320,640Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/code_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M193,481L348,636Q359,647 359,664Q359,681 348,692Q337,703 320,703Q303,703 292,692L108,508Q102,502 99.5,495Q97,488 97,480Q97,472 99.5,465Q102,458 108,452L292,268Q304,256 320.5,256Q337,256 349,268Q361,280 361,296.5Q361,313 349,325L193,481ZM767,479L612,324Q601,313 601,296Q601,279 612,268Q623,257 640,257Q657,257 668,268L852,452Q858,458 860.5,465Q863,472 863,480Q863,488 860.5,495Q858,502 852,508L668,692Q656,704 640,703.5Q624,703 612,691Q600,679 600,662.5Q600,646 612,634L767,479Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/colors_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M346,820L100,574Q90,564 85,552Q80,540 80,527Q80,514 85,502Q90,490 100,480L330,251L255,176Q242,163 241.5,145Q241,127 254,113Q267,99 286,99Q305,99 319,113L686,480Q696,490 700.5,502Q705,514 705,527Q705,540 700.5,552Q696,564 686,574L440,820Q430,830 418,835Q406,840 393,840Q380,840 368,835Q356,830 346,820ZM393,314L179,528Q179,528 179,528Q179,528 179,528L607,528Q607,528 607,528Q607,528 607,528L393,314ZM792,840Q756,840 731,814.5Q706,789 706,752Q706,725 719.5,701Q733,677 750,654L769,630Q778,619 792.5,618.5Q807,618 816,629L836,654Q852,677 866,701Q880,725 880,752Q880,789 854,814.5Q828,840 792,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/contrast_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM520,797Q639,782 719.5,692.5Q800,603 800,480Q800,357 719.5,267.5Q639,178 520,163L520,797Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/dark_mode_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q329,840 224.5,735.5Q120,631 120,480Q120,342 210,240.5Q300,139 440,122Q453,120 463,125.5Q473,131 479,140Q485,149 485.5,161Q486,173 478,184Q461,210 452.5,239Q444,268 444,300Q444,390 507,453Q570,516 660,516Q691,516 721.5,507Q752,498 776,482Q787,475 798.5,475.5Q810,476 819,481Q829,486 834.5,496Q840,506 838,520Q824,658 720.5,749Q617,840 480,840ZM480,760Q568,760 638,711.5Q708,663 740,585Q720,590 700,593Q680,596 660,596Q537,596 450.5,509.5Q364,423 364,300Q364,280 367,260Q370,240 375,220Q297,252 248.5,322Q200,392 200,480Q200,596 282,678Q364,760 480,760ZM470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Q470,490 470,490Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/delete_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M280,840Q247,840 223.5,816.5Q200,793 200,760L200,240L200,240Q183,240 171.5,228.5Q160,217 160,200Q160,183 171.5,171.5Q183,160 200,160L360,160L360,160Q360,143 371.5,131.5Q383,120 400,120L560,120Q577,120 588.5,131.5Q600,143 600,160L600,160L760,160Q777,160 788.5,171.5Q800,183 800,200Q800,217 788.5,228.5Q777,240 760,240L760,240L760,760Q760,793 736.5,816.5Q713,840 680,840L280,840ZM680,240L280,240L280,760Q280,760 280,760Q280,760 280,760L680,760Q680,760 680,760Q680,760 680,760L680,240ZM400,680Q417,680 428.5,668.5Q440,657 440,640L440,360Q440,343 428.5,331.5Q417,320 400,320Q383,320 371.5,331.5Q360,343 360,360L360,640Q360,657 371.5,668.5Q383,680 400,680ZM560,680Q577,680 588.5,668.5Q600,657 600,640L600,360Q600,343 588.5,331.5Q577,320 560,320Q543,320 531.5,331.5Q520,343 520,360L520,640Q520,657 531.5,668.5Q543,680 560,680ZM280,240L280,240L280,760Q280,760 280,760Q280,760 280,760L280,760Q280,760 280,760Q280,760 280,760L280,240Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/edit_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,760L257,760L648,369L591,312L200,703L200,760ZM160,840Q143,840 131.5,828.5Q120,817 120,800L120,703Q120,687 126,672.5Q132,658 143,647L648,143Q660,132 674.5,126Q689,120 705,120Q721,120 736,126Q751,132 762,144L817,200Q829,211 834.5,226Q840,241 840,256Q840,272 834.5,286.5Q829,301 817,313L313,817Q302,828 287.5,834Q273,840 257,840L160,840ZM760,256L760,256L704,200L704,200L760,256ZM619,341L591,312L591,312L648,369L648,369L619,341Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/explosion_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M421,620L452,650Q464,662 480,662Q496,662 508,650L539,620L580,620Q597,620 608.5,608.5Q620,597 620,580L620,539L650,508Q662,496 662,480Q662,464 650,452L620,421L620,380Q620,363 608.5,351.5Q597,340 580,340L539,340L501,303Q492,294 480,294Q468,294 459,303L421,340L380,340Q363,340 351.5,351.5Q340,363 340,380L340,421L310,452Q298,464 298,480Q298,496 310,508L340,539L340,580Q340,597 351.5,608.5Q363,620 380,620L421,620ZM346,800L240,800Q207,800 183.5,776.5Q160,753 160,720L160,614L83,536Q72,524 66,509.5Q60,495 60,480Q60,465 66,450.5Q72,436 83,424L160,346L160,240Q160,207 183.5,183.5Q207,160 240,160L346,160L424,83Q436,72 450.5,66Q465,60 480,60Q495,60 509.5,66Q524,72 536,83L614,160L720,160Q753,160 776.5,183.5Q800,207 800,240L800,346L877,424Q888,436 894,450.5Q900,465 900,480Q900,495 894,509.5Q888,524 877,536L800,614L800,720Q800,753 776.5,776.5Q753,800 720,800L614,800L536,877Q524,888 509.5,894Q495,900 480,900Q465,900 450.5,894Q436,888 424,877L346,800ZM380,720L480,820Q480,820 480,820Q480,820 480,820L580,720L720,720Q720,720 720,720Q720,720 720,720L720,580L820,480Q820,480 820,480Q820,480 820,480L720,380L720,240Q720,240 720,240Q720,240 720,240L580,240L480,140Q480,140 480,140Q480,140 480,140L380,240L240,240Q240,240 240,240Q240,240 240,240L240,380L140,480Q140,480 140,480Q140,480 140,480L240,580L240,720Q240,720 240,720Q240,720 240,720L380,720ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/favorite_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,813Q466,813 451.5,808Q437,803 426,792L357,729Q251,632 165.5,536.5Q80,441 80,326Q80,232 143,169Q206,106 300,106Q353,106 400,128.5Q447,151 480,190Q513,151 560,128.5Q607,106 660,106Q754,106 817,169Q880,232 880,326Q880,441 795,537Q710,633 602,730L534,792Q523,803 508.5,808Q494,813 480,813ZM442,270Q413,229 380,207.5Q347,186 300,186Q240,186 200,226Q160,266 160,326Q160,378 197,436.5Q234,495 285.5,550Q337,605 391.5,653Q446,701 480,732Q480,732 480,732Q480,732 480,732Q514,701 568.5,653Q623,605 674.5,550Q726,495 763,436.5Q800,378 800,326Q800,266 760,226Q720,186 660,186Q613,186 580,207.5Q547,229 518,270Q511,280 501,285Q491,290 480,290Q469,290 459,285Q449,280 442,270ZM480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Q480,459 480,459Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/format_size_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M560,280L420,280Q395,280 377.5,262.5Q360,245 360,220Q360,195 377.5,177.5Q395,160 420,160L820,160Q845,160 862.5,177.5Q880,195 880,220Q880,245 862.5,262.5Q845,280 820,280L680,280L680,740Q680,765 662.5,782.5Q645,800 620,800Q595,800 577.5,782.5Q560,765 560,740L560,280ZM200,480L140,480Q115,480 97.5,462.5Q80,445 80,420Q80,395 97.5,377.5Q115,360 140,360L380,360Q405,360 422.5,377.5Q440,395 440,420Q440,445 422.5,462.5Q405,480 380,480L320,480L320,740Q320,765 302.5,782.5Q285,800 260,800Q235,800 217.5,782.5Q200,765 200,740L200,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/gavel_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,760L600,760Q617,760 628.5,771.5Q640,783 640,800Q640,817 628.5,828.5Q617,840 600,840L200,840Q183,840 171.5,828.5Q160,817 160,800Q160,783 171.5,771.5Q183,760 200,760ZM329,589L216,476Q193,453 192.5,419.5Q192,386 215,363L244,334L472,560L443,589Q420,612 386,612Q352,612 329,589ZM640,392L414,164L443,135Q466,112 499.5,112.5Q533,113 556,136L669,249Q692,272 692,306Q692,340 669,363L640,392ZM796,772L302,278L358,222L852,716Q863,727 863,744Q863,761 852,772Q841,783 824,783Q807,783 796,772Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/github_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"     android:tint="?android:attr/colorControlNormal">
    <path android:fillColor="@android:color/white" android:pathData="M12,0.296c-6.627,0-12,5.372-12,12c0,5.302,3.438,9.8,8.206,11.387   c0.6,0.111,0.82-0.26,0.82-0.577c0-0.286-0.011-1.231-0.016-2.234c-3.338,0.726-4.043-1.416-4.043-1.416   C4.421,18.069,3.635,17.7,3.635,17.7c-1.089-0.745,0.082-0.729,0.082-0.729c1.205,0.085,1.839,1.237,1.839,1.237   c1.07,1.834,2.807,1.304,3.492,0.997C9.156,18.429,9.467,17.9,9.81,17.6c-2.665-0.303-5.467-1.332-5.467-5.93   c0-1.31,0.469-2.381,1.237-3.221C5.455,8.146,5.044,6.926,5.696,5.273c0,0,1.008-0.322,3.301,1.23   C9.954,6.237,10.98,6.104,12,6.099c1.02,0.005,2.047,0.138,3.006,0.404c2.29-1.553,3.297-1.23,3.297-1.23   c0.653,1.653,0.242,2.873,0.118,3.176c0.769,0.84,1.235,1.911,1.235,3.221c0,4.609-2.807,5.624-5.479,5.921   c0.43,0.372,0.814,1.103,0.814,2.222c0,1.606-0.014,2.898-0.014,3.293c0,0.319,0.216,0.694,0.824,0.576   c4.766-1.589,8.2-6.085,8.2-11.385C24,5.669,18.627,0.296,12,0.296z"/><path android:fillColor="@android:color/white" android:pathData="M4.545,17.526c-0.026,0.06-0.12,0.078-0.206,0.037c-0.087-0.039-0.136-0.121-0.108-0.18   c0.026-0.061,0.12-0.078,0.207-0.037C4.525,17.384,4.575,17.466,4.545,17.526L4.545,17.526z"/><path android:fillColor="@android:color/white" android:pathData="M5.031,18.068c-0.057,0.053-0.169,0.028-0.245-0.055c-0.079-0.084-0.093-0.196-0.035-0.249   c0.059-0.053,0.167-0.028,0.246,0.056C5.076,17.903,5.091,18.014,5.031,18.068L5.031,18.068z"/><path android:fillColor="@android:color/white" android:pathData="M5.504,18.759c-0.074,0.051-0.194,0.003-0.268-0.103c-0.074-0.107-0.074-0.235,0.002-0.286   c0.074-0.051,0.193-0.005,0.268,0.101C5.579,18.579,5.579,18.707,5.504,18.759L5.504,18.759z"/><path android:fillColor="@android:color/white" android:pathData="M6.152,19.427c-0.066,0.073-0.206,0.053-0.308-0.046c-0.105-0.097-0.134-0.234-0.068-0.307   c0.067-0.073,0.208-0.052,0.311,0.046C6.191,19.217,6.222,19.355,6.152,19.427L6.152,19.427z"/><path android:fillColor="@android:color/white" android:pathData="M7.047,19.814c-0.029,0.094-0.164,0.137-0.3,0.097C6.611,19.87,6.522,19.76,6.55,19.665   c0.028-0.095,0.164-0.139,0.301-0.096C6.986,19.609,7.075,19.719,7.047,19.814L7.047,19.814z"/><path android:fillColor="@android:color/white" android:pathData="M8.029,19.886c0.003,0.099-0.112,0.181-0.255,0.183c-0.143,0.003-0.26-0.077-0.261-0.174c0-0.1,0.113-0.181,0.256-0.184   C7.912,19.708,8.029,19.788,8.029,19.886L8.029,19.886z"/><path android:fillColor="@android:color/white" android:pathData="M8.943,19.731c0.017,0.096-0.082,0.196-0.224,0.222c-0.139,0.026-0.268-0.034-0.286-0.13   c-0.017-0.099,0.084-0.198,0.223-0.224C8.797,19.574,8.925,19.632,8.943,19.731L8.943,19.731z"/></vector>


================================================
FILE: app/src/main/res/drawable/ic_launcher_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>



================================================
FILE: app/src/main/res/drawable/ic_launcher_foreground.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>


================================================
FILE: app/src/main/res/drawable/ifl_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M640,700Q665,700 682.5,682.5Q700,665 700,640Q700,615 682.5,597.5Q665,580 640,580Q615,580 597.5,597.5Q580,615 580,640Q580,665 597.5,682.5Q615,700 640,700ZM480,540Q505,540 522.5,522.5Q540,505 540,480Q540,455 522.5,437.5Q505,420 480,420Q455,420 437.5,437.5Q420,455 420,480Q420,505 437.5,522.5Q455,540 480,540ZM320,380Q345,380 362.5,362.5Q380,345 380,320Q380,295 362.5,277.5Q345,260 320,260Q295,260 277.5,277.5Q260,295 260,320Q260,345 277.5,362.5Q295,380 320,380ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/info_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,680Q497,680 508.5,668.5Q520,657 520,640L520,480Q520,463 508.5,451.5Q497,440 480,440Q463,440 451.5,451.5Q440,463 440,480L440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,360Q497,360 508.5,348.5Q520,337 520,320Q520,303 508.5,291.5Q497,280 480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/light_mode_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,600Q530,600 565,565Q600,530 600,480Q600,430 565,395Q530,360 480,360Q430,360 395,395Q360,430 360,480Q360,530 395,565Q430,600 480,600ZM480,680Q397,680 338.5,621.5Q280,563 280,480Q280,397 338.5,338.5Q397,280 480,280Q563,280 621.5,338.5Q680,397 680,480Q680,563 621.5,621.5Q563,680 480,680ZM80,520Q63,520 51.5,508.5Q40,497 40,480Q40,463 51.5,451.5Q63,440 80,440L160,440Q177,440 188.5,451.5Q200,463 200,480Q200,497 188.5,508.5Q177,520 160,520L80,520ZM800,520Q783,520 771.5,508.5Q760,497 760,480Q760,463 771.5,451.5Q783,440 800,440L880,440Q897,440 908.5,451.5Q920,463 920,480Q920,497 908.5,508.5Q897,520 880,520L800,520ZM480,200Q463,200 451.5,188.5Q440,177 440,160L440,80Q440,63 451.5,51.5Q463,40 480,40Q497,40 508.5,51.5Q520,63 520,80L520,160Q520,177 508.5,188.5Q497,200 480,200ZM480,920Q463,920 451.5,908.5Q440,897 440,880L440,800Q440,783 451.5,771.5Q463,760 480,760Q497,760 508.5,771.5Q520,783 520,800L520,880Q520,897 508.5,908.5Q497,920 480,920ZM226,282L183,240Q171,229 171.5,212Q172,195 183,183Q195,171 212,171Q229,171 240,183L282,226Q293,238 293,254Q293,270 282,282Q271,294 254.5,293.5Q238,293 226,282ZM720,777L678,734Q667,722 667,705.5Q667,689 678,678Q689,666 705.5,666.5Q722,667 734,678L777,720Q789,731 788.5,748Q788,765 777,777Q765,789 748,789Q731,789 720,777ZM678,282Q666,271 666.5,254.5Q667,238 678,226L720,183Q731,171 748,171.5Q765,172 777,183Q789,195 789,212Q789,229 777,240L734,282Q722,293 706,293Q690,293 678,282ZM183,777Q171,765 171,748Q171,731 183,720L226,678Q238,667 254.5,667Q271,667 282,678Q294,689 293.5,705.5Q293,722 282,734L240,777Q229,789 212,788.5Q195,788 183,777ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/list_alt_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,680Q337,680 348.5,668.5Q360,657 360,640Q360,623 348.5,611.5Q337,600 320,600Q303,600 291.5,611.5Q280,623 280,640Q280,657 291.5,668.5Q303,680 320,680ZM320,520Q337,520 348.5,508.5Q360,497 360,480Q360,463 348.5,451.5Q337,440 320,440Q303,440 291.5,451.5Q280,463 280,480Q280,497 291.5,508.5Q303,520 320,520ZM320,360Q337,360 348.5,348.5Q360,337 360,320Q360,303 348.5,291.5Q337,280 320,280Q303,280 291.5,291.5Q280,303 280,320Q280,337 291.5,348.5Q303,360 320,360ZM480,680L640,680Q657,680 668.5,668.5Q680,657 680,640Q680,623 668.5,611.5Q657,600 640,600L480,600Q463,600 451.5,611.5Q440,623 440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,520L640,520Q657,520 668.5,508.5Q680,497 680,480Q680,463 668.5,451.5Q657,440 640,440L480,440Q463,440 451.5,451.5Q440,463 440,480Q440,497 451.5,508.5Q463,520 480,520ZM480,360L640,360Q657,360 668.5,348.5Q680,337 680,320Q680,303 668.5,291.5Q657,280 640,280L480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/looks_one_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,360L480,640Q480,657 491.5,668.5Q503,680 520,680Q537,680 548.5,668.5Q560,657 560,640L560,320Q560,303 548.5,291.5Q537,280 520,280L440,280Q423,280 411.5,291.5Q400,303 400,320Q400,337 411.5,348.5Q423,360 440,360L480,360ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/mobile_vibrate_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,840Q287,840 263.5,816.5Q240,793 240,760L240,200Q240,167 263.5,143.5Q287,120 320,120L640,120Q673,120 696.5,143.5Q720,167 720,200L720,760Q720,793 696.5,816.5Q673,840 640,840L320,840ZM640,760L640,200Q640,200 640,200Q640,200 640,200L320,200Q320,200 320,200Q320,200 320,200L320,760Q320,760 320,760Q320,760 320,760L640,760Q640,760 640,760Q640,760 640,760ZM480,320Q497,320 508.5,308.5Q520,297 520,280Q520,263 508.5,251.5Q497,240 480,240Q463,240 451.5,251.5Q440,263 440,280Q440,297 451.5,308.5Q463,320 480,320ZM0,560L0,400Q0,383 11.5,371.5Q23,360 40,360Q57,360 68.5,371.5Q80,383 80,400L80,560Q80,577 68.5,588.5Q57,600 40,600Q23,600 11.5,588.5Q0,577 0,560ZM120,640L120,320Q120,303 131.5,291.5Q143,280 160,280Q177,280 188.5,291.5Q200,303 200,320L200,640Q200,657 188.5,668.5Q177,680 160,680Q143,680 131.5,668.5Q120,657 120,640ZM880,560L880,400Q880,383 891.5,371.5Q903,360 920,360Q937,360 948.5,371.5Q960,383 960,400L960,560Q960,577 948.5,588.5Q937,600 920,600Q903,600 891.5,588.5Q880,577 880,560ZM760,640L760,320Q760,303 771.5,291.5Q783,280 800,280Q817,280 828.5,291.5Q840,303 840,320L840,640Q840,657 828.5,668.5Q817,680 800,680Q783,680 771.5,668.5Q760,657 760,640ZM320,760Q320,760 320,760Q320,760 320,760L320,760Q320,760 320,760Q320,760 320,760L320,200Q320,200 320,200Q320,200 320,200L320,200Q320,200 320,200Q320,200 320,200L320,760Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/mobile_vibrate_off_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">

  <path
      android:fillColor="@android:color/white"
      android:pathData="M320,840Q287,840 263.5,816.5Q240,793 240,760L240,200Q240,167 263.5,143.5Q287,120 320,120L640,120Q673,120 696.5,143.5Q720,167 720,200L720,760Q720,793 696.5,816.5Q673,840 640,840L320,840ZM640,760L640,200Q640,200 640,200Q640,200 640,200L320,200Q320,200 320,200Q320,200 320,200L320,760Q320,760 320,760Q320,760 320,760L640,760Q640,760 640,760Q640,760 640,760ZM480,320Q497,320 508.5,308.5Q520,297 520,280Q520,263 508.5,251.5Q497,240 480,240Q463,240 451.5,251.5Q440,263 440,280Q440,297 451.5,308.5Q463,320 480,320ZM0,560L0,400Q0,383 11.5,371.5Q23,360 40,360Q57,360 68.5,371.5Q80,383 80,400L80,560Q80,577 68.5,588.5Q57,600 40,600Q23,600 11.5,588.5Q0,577 0,560ZM120,640L120,320Q120,303 131.5,291.5Q143,280 160,280Q177,280 188.5,291.5Q200,303 200,320L200,640Q200,657 188.5,668.5Q177,680 160,680Q143,680 131.5,668.5Q120,657 120,640ZM880,560L880,400Q880,383 891.5,371.5Q903,360 920,360Q937,360 948.5,371.5Q960,383 960,400L960,560Q960,577 948.5,588.5Q937,600 920,600Q903,600 891.5,588.5Q880,577 880,560ZM760,640L760,320Q760,303 771.5,291.5Q783,280 800,280Q817,280 828.5,291.5Q840,303 840,320L840,640Q840,657 828.5,668.5Q817,680 800,680Q783,680 771.5,668.5Q760,657 760,640ZM320,760Q320,760 320,760Q320,760 320,760L320,760Q320,760 320,760Q320,760 320,760L320,200Q320,200 320,200Q320,200 320,200L320,200Q320,200 320,200Q320,200 320,200L320,760Z"/>

  <path
      android:pathData="M160,160 L800,800"
      android:strokeColor="@android:color/white"
      android:strokeWidth="80"
      android:strokeLineCap="round"
      android:strokeLineJoin="round"/>
</vector>


================================================
FILE: app/src/main/res/drawable/music_note_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M400,840Q334,840 287,793Q240,746 240,680Q240,614 287,567Q334,520 400,520Q423,520 442.5,525.5Q462,531 480,542L480,160Q480,143 491.5,131.5Q503,120 520,120L680,120Q697,120 708.5,131.5Q720,143 720,160L720,240Q720,257 708.5,268.5Q697,280 680,280L560,280L560,680Q560,746 513,793Q466,840 400,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/music_off_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M764,876L84,196Q73,185 73,168Q73,151 84,140Q95,129 112,129Q129,129 140,140L820,820Q831,831 831,848Q831,865 820,876Q809,887 792,887Q775,887 764,876ZM560,280L560,350Q560,370 547.5,379.5Q535,389 520,389Q505,389 492.5,379Q480,369 480,349L480,160Q480,143 491.5,131.5Q503,120 520,120L680,120Q697,120 708.5,131.5Q720,143 720,160L720,240Q720,257 708.5,268.5Q697,280 680,280L560,280ZM400,840Q334,840 287,793Q240,746 240,680Q240,614 287,567Q334,520 400,520Q423,520 442.5,525.5Q462,531 480,542L480,480L560,560L560,680Q560,746 513,793Q466,840 400,840Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/news_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L607,120Q623,120 637.5,126Q652,132 663,143L817,297Q828,308 834,322.5Q840,337 840,353L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,360L640,360Q623,360 611.5,348.5Q600,337 600,320L600,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM640,680Q657,680 668.5,668.5Q680,657 680,640Q680,623 668.5,611.5Q657,600 640,600L320,600Q303,600 291.5,611.5Q280,623 280,640Q280,657 291.5,668.5Q303,680 320,680L640,680ZM440,360Q457,360 468.5,348.5Q480,337 480,320Q480,303 468.5,291.5Q457,280 440,280L320,280Q303,280 291.5,291.5Q280,303 280,320Q280,337 291.5,348.5Q303,360 320,360L440,360ZM640,520Q657,520 668.5,508.5Q680,497 680,480Q680,463 668.5,451.5Q657,440 640,440L320,440Q303,440 291.5,451.5Q280,463 280,480Q280,497 291.5,508.5Q303,520 320,520L640,520ZM200,200L200,200L200,360L200,360L200,200L200,360L200,360L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/night_sight_auto_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M440,760Q492,760 539,739Q586,718 620,679Q492,671 406,579.5Q320,488 320,360Q320,347 321,334.5Q322,322 324,310Q267,342 233.5,398Q200,454 200,520Q200,620 270,690Q340,760 440,760ZM440,840Q306,840 213,747Q120,654 120,520Q120,462 139,409.5Q158,357 192,315.5Q226,274 273,246.5Q320,219 377,212Q402,209 416,229.5Q430,250 417,272Q405,292 402.5,314.5Q400,337 400,360Q400,460 470,530Q540,600 640,600Q652,600 664,599.5Q676,599 688,595Q709,588 724.5,603.5Q740,619 734,639Q705,733 622.5,786.5Q540,840 440,840ZM656,360L636,416Q632,427 623,433.5Q614,440 603,440Q584,440 573.5,424.5Q563,409 569,392L671,105Q675,94 685,87Q695,80 707,80L733,80Q745,80 755,87Q765,94 769,105L871,392Q877,409 866.5,424.5Q856,440 837,440Q826,440 817,433.5Q808,427 804,416L784,360L656,360ZM674,306L766,306L720,160L674,306ZM407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Q407,579 407,579Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/numbers_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M360,640L327,771Q324,784 314,792Q304,800 290,800Q271,800 259,785Q247,770 252,752L280,640L171,640Q151,640 139,624.5Q127,609 132,590Q135,576 146,568Q157,560 171,560L300,560L340,400L231,400Q211,400 199,384.5Q187,369 192,350Q195,336 206,328Q217,320 231,320L360,320L393,189Q396,176 406,168Q416,160 430,160Q449,160 461,175Q473,190 468,208L440,320L600,320L633,189Q636,176 646,168Q656,160 670,160Q689,160 701,175Q713,190 708,208L680,320L789,320Q809,320 821,335.5Q833,351 828,370Q825,384 814,392Q803,400 789,400L660,400L620,560L729,560Q749,560 761,575.5Q773,591 768,610Q765,624 754,632Q743,640 729,640L600,640L567,771Q564,784 554,792Q544,800 530,800Q511,800 499,785Q487,770 492,752L520,640L360,640ZM380,560L540,560L580,400L420,400L380,560Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/paid_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q397,880 324,848.5Q251,817 197,763Q143,709 111.5,636Q80,563 80,480Q80,397 111.5,324Q143,251 197,197Q251,143 324,111.5Q397,80 480,80Q563,80 636,111.5Q709,143 763,197Q817,251 848.5,324Q880,397 880,480Q880,563 848.5,636Q817,709 763,763Q709,817 636,848.5Q563,880 480,880ZM480,800Q614,800 707,707Q800,614 800,480Q800,346 707,253Q614,160 480,160Q346,160 253,253Q160,346 160,480Q160,614 253,707Q346,800 480,800ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480ZM479,760Q493,760 503.5,749.5Q514,739 514,725L514,710Q564,701 600,671Q636,641 636,582Q636,540 612,505Q588,470 516,444Q456,424 433,409Q410,394 410,368Q410,342 428.5,327Q447,312 482,312Q502,312 517,319Q532,326 542,338Q552,350 564.5,354.5Q577,359 588,354Q603,348 608.5,333.5Q614,319 606,307Q590,284 566.5,268Q543,252 516,250L516,235Q516,221 505.5,210.5Q495,200 481,200Q467,200 456.5,210.5Q446,221 446,235L446,250Q396,261 368,294Q340,327 340,368Q340,415 367.5,444Q395,473 454,494Q517,517 541.5,535Q566,553 566,582Q566,615 542.5,630.5Q519,646 486,646Q460,646 439,633.5Q418,621 404,596Q396,582 383,577Q370,572 357,577Q343,582 336.5,596Q330,610 336,623Q352,657 379,678.5Q406,700 444,708L444,725Q444,739 454.5,749.5Q465,760 479,760Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/palette_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,880Q398,880 325,848.5Q252,817 197.5,762.5Q143,708 111.5,635Q80,562 80,480Q80,397 112.5,324Q145,251 200.5,197Q256,143 330,111.5Q404,80 488,80Q568,80 639,107.5Q710,135 763.5,183.5Q817,232 848.5,298.5Q880,365 880,442Q880,557 810,618.5Q740,680 640,680L566,680Q557,680 553.5,685Q550,690 550,696Q550,708 565,730.5Q580,753 580,782Q580,832 552.5,856Q525,880 480,880ZM480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480ZM260,520Q286,520 303,503Q320,486 320,460Q320,434 303,417Q286,400 260,400Q234,400 217,417Q200,434 200,460Q200,486 217,503Q234,520 260,520ZM380,360Q406,360 423,343Q440,326 440,300Q440,274 423,257Q406,240 380,240Q354,240 337,257Q320,274 320,300Q320,326 337,343Q354,360 380,360ZM580,360Q606,360 623,343Q640,326 640,300Q640,274 623,257Q606,240 580,240Q554,240 537,257Q520,274 520,300Q520,326 537,343Q554,360 580,360ZM700,520Q726,520 743,503Q760,486 760,460Q760,434 743,417Q726,400 700,400Q674,400 657,417Q640,434 640,460Q640,486 657,503Q674,520 700,520ZM480,800Q489,800 494.5,795Q500,790 500,782Q500,768 485,749Q470,730 470,692Q470,650 499,625Q528,600 570,600L640,600Q706,600 753,561.5Q800,523 800,442Q800,321 707.5,240.5Q615,160 488,160Q352,160 256,253Q160,346 160,480Q160,613 253.5,706.5Q347,800 480,800Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/person_apron_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,480Q414,480 367,433Q320,386 320,320Q320,254 367,207Q414,160 480,160Q546,160 593,207Q640,254 640,320Q640,386 593,433Q546,480 480,480ZM160,720L160,688Q160,654 177,625.5Q194,597 224,582Q284,552 348.5,536Q413,520 480,520Q547,520 611.5,536Q676,552 736,582Q766,597 783,625.5Q800,654 800,688L800,720Q800,753 776.5,776.5Q753,800 720,800L240,800Q207,800 183.5,776.5Q160,753 160,720ZM480,400Q513,400 536.5,376.5Q560,353 560,320Q560,287 536.5,263.5Q513,240 480,240Q447,240 423.5,263.5Q400,287 400,320Q400,353 423.5,376.5Q447,400 480,400ZM640,628L640,720L720,720L720,688Q720,677 715,668Q710,659 700,654Q686,646 670.5,639.5Q655,633 640,628ZM400,607L400,660L560,660L560,607Q540,603 520,601.5Q500,600 480,600Q460,600 440,601.5Q420,603 400,607ZM240,720L320,720L320,628Q305,633 289.5,639.5Q274,646 260,654Q250,659 245,668Q240,677 240,688L240,720ZM640,720Q620,720 600,720Q580,720 560,720L560,720L400,720L400,720Q380,720 360,720Q340,720 320,720L320,720L640,720ZM480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Q480,320 480,320Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/privacy_tip_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,680Q497,680 508.5,668.5Q520,657 520,640L520,480Q520,463 508.5,451.5Q497,440 480,440Q463,440 451.5,451.5Q440,463 440,480L440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,360Q497,360 508.5,348.5Q520,337 520,320Q520,303 508.5,291.5Q497,280 480,280Q463,280 451.5,291.5Q440,303 440,320Q440,337 451.5,348.5Q463,360 480,360ZM480,876Q473,876 467,875Q461,874 455,872Q320,827 240,705.5Q160,584 160,444L160,255Q160,230 174.5,210Q189,190 212,181L452,91Q466,86 480,86Q494,86 508,91L748,181Q771,190 785.5,210Q800,230 800,255L800,444Q800,584 720,705.5Q640,827 505,872Q499,874 493,875Q487,876 480,876ZM480,796Q584,763 652,664Q720,565 720,444L720,255Q720,255 720,255Q720,255 720,255L480,165Q480,165 480,165Q480,165 480,165L240,255Q240,255 240,255Q240,255 240,255L240,444Q240,565 308,664Q376,763 480,796ZM480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Q480,480 480,480Q480,480 480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/rate_review_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M280,560L345,560Q353,560 360.5,557Q368,554 374,548L562,360Q571,351 575.5,339.5Q580,328 580,317Q580,306 575,295.5Q570,285 562,276L526,238Q517,229 506,224.5Q495,220 483,220Q472,220 460.5,224.5Q449,229 440,238L252,426Q246,432 243,439.5Q240,447 240,455L240,520Q240,537 251.5,548.5Q263,560 280,560ZM520,317L520,317L483,280L483,280L520,317ZM300,500L300,462L401,361L421,379L439,399L338,500L300,500ZM421,379L439,399L439,399L401,361L401,361L421,379ZM447,560L680,560Q697,560 708.5,548.5Q720,537 720,520Q720,503 708.5,491.5Q697,480 680,480L527,480L447,560ZM240,720L148,812Q129,831 104.5,820.5Q80,810 80,783L80,160Q80,127 103.5,103.5Q127,80 160,80L800,80Q833,80 856.5,103.5Q880,127 880,160L880,640Q880,673 856.5,696.5Q833,720 800,720L240,720ZM206,640L800,640Q800,640 800,640Q800,640 800,640L800,160Q800,160 800,160Q800,160 800,160L160,160Q160,160 160,160Q160,160 160,160L160,685L206,640ZM160,640L160,640L160,160Q160,160 160,160Q160,160 160,160L160,160Q160,160 160,160Q160,160 160,160L160,640Q160,640 160,640Q160,640 160,640Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/release_alert_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M326,870L268,772L158,748Q143,745 134,732.5Q125,720 127,705L138,592L63,506Q53,495 53,480Q53,465 63,454L138,368L127,255Q125,240 134,227.5Q143,215 158,212L268,188L326,90Q334,77 348,72.5Q362,68 376,74L480,118L584,74Q598,68 612,72.5Q626,77 634,90L692,188L802,212Q817,215 826,227.5Q835,240 833,255L822,368L897,454Q907,465 907,480Q907,495 897,506L822,592L833,705Q835,720 826,732.5Q817,745 802,748L692,772L634,870Q626,883 612,887.5Q598,892 584,886L480,842L376,886Q362,892 348,887.5Q334,883 326,870ZM378,798L480,754L584,798L640,702L750,676L740,564L814,480L740,394L750,282L640,258L582,162L480,206L376,162L320,258L210,282L220,394L146,480L220,564L210,678L320,702L378,798ZM480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480L480,480ZM480,680Q497,680 508.5,668.5Q520,657 520,640Q520,623 508.5,611.5Q497,600 480,600Q463,600 451.5,611.5Q440,623 440,640Q440,657 451.5,668.5Q463,680 480,680ZM480,520Q497,520 508.5,508.5Q520,497 520,480L520,320Q520,303 508.5,291.5Q497,280 480,280Q463,280 451.5,291.5Q440,303 440,320L440,480Q440,497 451.5,508.5Q463,520 480,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/repeat_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M274,760L308,794Q320,806 319.5,822Q319,838 308,850Q296,862 279.5,862.5Q263,863 251,851L148,748Q142,742 139.5,735Q137,728 137,720Q137,712 139.5,705Q142,698 148,692L251,589Q263,577 279.5,577.5Q296,578 308,590Q319,602 319.5,618Q320,634 308,646L274,680L680,680Q680,680 680,680Q680,680 680,680L680,560Q680,543 691.5,531.5Q703,520 720,520Q737,520 748.5,531.5Q760,543 760,560L760,680Q760,713 736.5,736.5Q713,760 680,760L274,760ZM686,280L280,280Q280,280 280,280Q280,280 280,280L280,400Q280,417 268.5,428.5Q257,440 240,440Q223,440 211.5,428.5Q200,417 200,400L200,280Q200,247 223.5,223.5Q247,200 280,200L686,200L652,166Q640,154 640.5,138Q641,122 652,110Q664,98 680.5,97.5Q697,97 709,109L812,212Q818,218 820.5,225Q823,232 823,240Q823,248 820.5,255Q818,262 812,268L709,371Q697,383 680.5,382.5Q664,382 652,370Q641,358 640.5,342Q640,326 652,314L686,280Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/restart_alt_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M393,828Q290,799 225,714.5Q160,630 160,520Q160,463 179,411.5Q198,360 233,317Q244,305 260,304.5Q276,304 289,317Q300,328 300.5,344Q301,360 290,374Q266,405 253,442Q240,479 240,520Q240,601 287.5,664.5Q335,728 410,751Q423,755 431.5,766Q440,777 440,790Q440,810 426,821.5Q412,833 393,828ZM567,828Q548,833 534,821Q520,809 520,789Q520,777 528.5,766Q537,755 550,751Q625,727 672.5,664Q720,601 720,520Q720,420 650,350Q580,280 480,280L477,280L493,296Q504,307 504,324Q504,341 493,352Q482,363 465,363Q448,363 437,352L353,268Q347,262 344.5,255Q342,248 342,240Q342,232 344.5,225Q347,218 353,212L437,128Q448,117 465,117Q482,117 493,128Q504,139 504,156Q504,173 493,184L477,200L480,200Q614,200 707,293Q800,386 800,520Q800,629 735,714Q670,799 567,828Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/save_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L647,120Q663,120 677.5,126Q692,132 703,143L817,257Q828,268 834,282.5Q840,297 840,313L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM760,314L646,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L760,760Q760,760 760,760Q760,760 760,760L760,314ZM480,720Q530,720 565,685Q600,650 600,600Q600,550 565,515Q530,480 480,480Q430,480 395,515Q360,550 360,600Q360,650 395,685Q430,720 480,720ZM280,400L560,400Q577,400 588.5,388.5Q600,377 600,360L600,280Q600,263 588.5,251.5Q577,240 560,240L280,240Q263,240 251.5,251.5Q240,263 240,280L240,360Q240,377 251.5,388.5Q263,400 280,400ZM200,314L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200L200,200L200,314Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/settings_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M433,880Q406,880 386.5,862Q367,844 363,818L354,752Q341,747 329.5,740Q318,733 307,725L245,751Q220,762 195,753Q170,744 156,721L109,639Q95,616 101,590Q107,564 128,547L181,507Q180,500 180,493.5Q180,487 180,480Q180,473 180,466.5Q180,460 181,453L128,413Q107,396 101,370Q95,344 109,321L156,239Q170,216 195,207Q220,198 245,209L307,235Q318,227 330,220Q342,213 354,208L363,142Q367,116 386.5,98Q406,80 433,80L527,80Q554,80 573.5,98Q593,116 597,142L606,208Q619,213 630.5,220Q642,227 653,235L715,209Q740,198 765,207Q790,216 804,239L851,321Q865,344 859,370Q853,396 832,413L779,453Q780,460 780,466.5Q780,473 780,480Q780,487 780,493.5Q780,500 778,507L831,547Q852,564 858,590Q864,616 850,639L802,721Q788,744 763,753Q738,762 713,751L653,725Q642,733 630,740Q618,747 606,752L597,818Q593,844 573.5,862Q554,880 527,880L433,880ZM440,800L519,800L533,694Q564,686 590.5,670.5Q617,655 639,633L738,674L777,606L691,541Q696,527 698,511.5Q700,496 700,480Q700,464 698,448.5Q696,433 691,419L777,354L738,286L639,328Q617,305 590.5,289.5Q564,274 533,266L520,160L441,160L427,266Q396,274 369.5,289.5Q343,305 321,327L222,286L183,354L269,418Q264,433 262,448Q260,463 260,480Q260,496 262,511Q264,526 269,541L183,606L222,674L321,632Q343,655 369.5,670.5Q396,686 427,694L440,800ZM482,620Q540,620 581,579Q622,538 622,480Q622,422 581,381Q540,340 482,340Q423,340 382.5,381Q342,422 342,480Q342,538 382.5,579Q423,620 482,620ZM480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480Q480,480 480,480L480,480L480,480L480,480Q480,480 480,480Q480,480 480,480L480,480Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/settings_backup_restore_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q354,840 257,763.5Q160,687 131,568Q127,553 137,540.5Q147,528 164,526Q180,524 193,532Q206,540 211,556Q235,646 310,703Q385,760 480,760Q597,760 678.5,678.5Q760,597 760,480Q760,363 678.5,281.5Q597,200 480,200Q411,200 351,232Q291,264 250,320L320,320Q337,320 348.5,331.5Q360,343 360,360Q360,377 348.5,388.5Q337,400 320,400L160,400Q143,400 131.5,388.5Q120,377 120,360L120,200Q120,183 131.5,171.5Q143,160 160,160Q177,160 188.5,171.5Q200,183 200,200L200,254Q251,190 324.5,155Q398,120 480,120Q555,120 620.5,148.5Q686,177 734.5,225.5Q783,274 811.5,339.5Q840,405 840,480Q840,555 811.5,620.5Q783,686 734.5,734.5Q686,783 620.5,811.5Q555,840 480,840ZM480,560Q447,560 423.5,536.5Q400,513 400,480Q400,447 423.5,423.5Q447,400 480,400Q513,400 536.5,423.5Q560,447 560,480Q560,513 536.5,536.5Q513,560 480,560Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/sort_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal"
    android:autoMirrored="true">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M160,720Q143,720 131.5,708.5Q120,697 120,680Q120,663 131.5,651.5Q143,640 160,640L320,640Q337,640 348.5,651.5Q360,663 360,680Q360,697 348.5,708.5Q337,720 320,720L160,720ZM160,520Q143,520 131.5,508.5Q120,497 120,480Q120,463 131.5,451.5Q143,440 160,440L560,440Q577,440 588.5,451.5Q600,463 600,480Q600,497 588.5,508.5Q577,520 560,520L160,520ZM160,320Q143,320 131.5,308.5Q120,297 120,280Q120,263 131.5,251.5Q143,240 160,240L800,240Q817,240 828.5,251.5Q840,263 840,280Q840,297 828.5,308.5Q817,320 800,320L160,320Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/star_shine_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M760,600Q772,588 788.5,588Q805,588 817,600L880,664Q892,676 892,692Q892,708 880,720Q868,732 852,732Q836,732 824,720L760,657Q748,645 748,628.5Q748,612 760,600ZM800,120Q812,132 812,148.5Q812,165 800,177L737,240Q725,252 708.5,252Q692,252 680,240Q668,228 668,211.5Q668,195 680,183L744,120Q756,108 772,108Q788,108 800,120ZM160,120Q172,108 188.5,108Q205,108 217,120L280,184Q292,196 292,212Q292,228 280,240Q268,252 251.5,252Q235,252 223,240L160,177Q148,165 148,148.5Q148,132 160,120ZM200,600Q212,612 212,628.5Q212,645 200,657L137,720Q125,732 108.5,732Q92,732 80,720Q68,708 68,691.5Q68,675 80,663L144,600Q156,588 172,588Q188,588 200,600ZM354,673L480,597L606,674L573,530L684,434L538,421L480,285L422,420L276,433L387,530L354,673ZM480,479L480,479L480,479L480,479L480,479L480,479L480,479L480,479L480,479L480,479ZM480,691L314,791Q303,798 291,797Q279,796 270,789Q261,782 256,771.5Q251,761 254,748L298,559L151,432Q141,423 138.5,411.5Q136,400 140,389Q144,378 152,371Q160,364 174,362L368,345L443,167Q448,155 458.5,149Q469,143 480,143Q491,143 501.5,149Q512,155 517,167L592,345L786,362Q800,364 808,371Q816,378 820,389Q824,400 821.5,411.5Q819,423 809,432L662,559L706,748Q709,761 704,771.5Q699,782 690,789Q681,796 669,797Q657,798 646,791L480,691Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/telegram_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"     android:tint="?android:attr/colorControlNormal">
    <path android:fillColor="@android:color/white" android:pathData="M12,0C5.373,0,0,5.373,0,12s5.373,12,12,12s12-5.373,12-12S18.627,0,12,0z    M17.562,8.161c-0.18,1.897-0.962,6.502-1.359,8.627c-0.168,0.9-0.5,1.201-0.82,1.23c-0.697,0.064-1.226-0.461-1.901-0.903   c-1.056-0.692-1.653-1.123-2.678-1.799c-1.185-0.781-0.417-1.21,0.258-1.911c0.177-0.184,3.247-2.977,3.307-3.23   c0.007-0.032,0.015-0.15-0.056-0.212s-0.174-0.041-0.248-0.024c-0.106,0.024-1.793,1.139-5.062,3.345   c-0.479,0.329-0.913,0.489-1.302,0.481c-0.428-0.009-1.252-0.242-1.865-0.442c-0.751-0.244-1.349-0.374-1.297-0.788   c0.027-0.216,0.324-0.437,0.892-0.663c3.498-1.524,5.831-2.529,6.998-3.015c3.333-1.386,4.025-1.627,4.477-1.635   C17.472,7.214,17.608,7.681,17.562,8.161z"/></vector>


================================================
FILE: app/src/main/res/drawable/timer_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M400,120Q383,120 371.5,108.5Q360,97 360,80Q360,63 371.5,51.5Q383,40 400,40L560,40Q577,40 588.5,51.5Q600,63 600,80Q600,97 588.5,108.5Q577,120 560,120L400,120ZM480,560Q497,560 508.5,548.5Q520,537 520,520L520,360Q520,343 508.5,331.5Q497,320 480,320Q463,320 451.5,331.5Q440,343 440,360L440,520Q440,537 451.5,548.5Q463,560 480,560ZM480,880Q406,880 340.5,851.5Q275,823 226,774Q177,725 148.5,659.5Q120,594 120,520Q120,446 148.5,380.5Q177,315 226,266Q275,217 340.5,188.5Q406,160 480,160Q542,160 599,180Q656,200 706,238L734,210Q745,199 762,199Q779,199 790,210Q801,221 801,238Q801,255 790,266L762,294Q800,344 820,401Q840,458 840,520Q840,594 811.5,659.5Q783,725 734,774Q685,823 619.5,851.5Q554,880 480,880ZM480,800Q596,800 678,718Q760,636 760,520Q760,404 678,322Q596,240 480,240Q364,240 282,322Q200,404 200,520Q200,636 282,718Q364,800 480,800ZM480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Q480,520 480,520Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/transparent_drawable.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="@android:color/transparent" />
</shape>


================================================
FILE: app/src/main/res/drawable/tune_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q463,840 451.5,828.5Q440,817 440,800L440,640Q440,623 451.5,611.5Q463,600 480,600Q497,600 508.5,611.5Q520,623 520,640L520,680L800,680Q817,680 828.5,691.5Q840,703 840,720Q840,737 828.5,748.5Q817,760 800,760L520,760L520,800Q520,817 508.5,828.5Q497,840 480,840ZM160,760Q143,760 131.5,748.5Q120,737 120,720Q120,703 131.5,691.5Q143,680 160,680L320,680Q337,680 348.5,691.5Q360,703 360,720Q360,737 348.5,748.5Q337,760 320,760L160,760ZM320,600Q303,600 291.5,588.5Q280,577 280,560L280,520L160,520Q143,520 131.5,508.5Q120,497 120,480Q120,463 131.5,451.5Q143,440 160,440L280,440L280,400Q280,383 291.5,371.5Q303,360 320,360Q337,360 348.5,371.5Q360,383 360,400L360,560Q360,577 348.5,588.5Q337,600 320,600ZM480,520Q463,520 451.5,508.5Q440,497 440,480Q440,463 451.5,451.5Q463,440 480,440L800,440Q817,440 828.5,451.5Q840,463 840,480Q840,497 828.5,508.5Q817,520 800,520L480,520ZM640,360Q623,360 611.5,348.5Q600,337 600,320L600,160Q600,143 611.5,131.5Q623,120 640,120Q657,120 668.5,131.5Q680,143 680,160L680,200L800,200Q817,200 828.5,211.5Q840,223 840,240Q840,257 828.5,268.5Q817,280 800,280L680,280L680,320Q680,337 668.5,348.5Q657,360 640,360ZM160,280Q143,280 131.5,268.5Q120,257 120,240Q120,223 131.5,211.5Q143,200 160,200L480,200Q497,200 508.5,211.5Q520,223 520,240Q520,257 508.5,268.5Q497,280 480,280L160,280Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/update_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M480,840Q405,840 339.5,811.5Q274,783 225.5,734.5Q177,686 148.5,620.5Q120,555 120,480Q120,405 148.5,339.5Q177,274 225.5,225.5Q274,177 339.5,148.5Q405,120 480,120Q562,120 635.5,155Q709,190 760,254L760,200Q760,183 771.5,171.5Q783,160 800,160Q817,160 828.5,171.5Q840,183 840,200L840,360Q840,377 828.5,388.5Q817,400 800,400L640,400Q623,400 611.5,388.5Q600,377 600,360Q600,343 611.5,331.5Q623,320 640,320L710,320Q669,264 609,232Q549,200 480,200Q363,200 281.5,281.5Q200,363 200,480Q200,597 281.5,678.5Q363,760 480,760Q575,760 650,703Q725,646 749,556Q754,540 767,532Q780,524 796,526Q813,528 823,540.5Q833,553 829,568Q800,687 703,763.5Q606,840 480,840ZM520,464L620,564Q631,575 631,592Q631,609 620,620Q609,631 592,631Q575,631 564,620L452,508Q446,502 443,494.5Q440,487 440,479L440,320Q440,303 451.5,291.5Q463,280 480,280Q497,280 508.5,291.5Q520,303 520,320L520,464Z"/>
</vector>



================================================
FILE: app/src/main/res/drawable/vk_24.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24" android:tint="?android:attr/colorControlNormal"><path android:fillColor="@android:color/white" android:pathData="M22.316,1.684C20.632,0,17.921,0,12.5,0h-1C6.079,0,3.368,0,1.684,1.684C0,3.368,0,6.079,0,11.5v1   c0,5.421,0,8.131,1.684,9.816S6.079,24,11.5,24h1c5.421,0,8.131,0,9.816-1.684C24,20.632,24,17.921,24,12.5v-1   C24,6.079,24,3.368,22.316,1.684z M19.503,17h-1.75c-0.667,0-0.863-0.532-2.05-1.719c-1.039-1.001-1.484-1.131-1.743-1.131   c-0.353,0-0.458,0.1-0.458,0.6v1.569c0,0.43-0.137,0.681-1.25,0.681c-1.854,0-3.892-1.126-5.339-3.202   c-2.17-3.041-2.763-5.34-2.763-5.803c0-0.26,0.1-0.495,0.6-0.495h1.751c0.447,0,0.615,0.196,0.783,0.68   c0.856,2.493,2.3,4.672,2.893,4.672c0.222,0,0.324-0.103,0.324-0.667V9.608c-0.065-1.186-0.696-1.284-0.696-1.706   c0-0.195,0.167-0.402,0.445-0.402h2.751c0.371,0,0.5,0.198,0.5,0.643v3.467c0,0.37,0.161,0.5,0.272,0.5   c0.223,0,0.408-0.13,0.816-0.538c1.261-1.409,2.151-3.578,2.151-3.578c0.112-0.26,0.316-0.495,0.762-0.495h1.75   c0.529,0,0.641,0.272,0.529,0.643c-0.223,1.02-2.355,4.023-2.355,4.023c-0.186,0.297-0.26,0.445,0,0.779   c0.186,0.26,0.797,0.779,1.205,1.261c0.752,0.846,1.319,1.559,1.477,2.051C20.254,16.75,20.003,17,19.503,17z"/></vector>


================================================
FILE: app/src/main/res/drawable/web_24px.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="960"
    android:viewportHeight="960"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M160,800Q127,800 103.5,776.5Q80,753 80,720L80,240Q80,207 103.5,183.5Q127,160 160,160L800,160Q833,160 856.5,183.5Q880,207 880,240L880,720Q880,753 856.5,776.5Q833,800 800,800L160,800ZM160,720L580,720L580,580L160,580L160,720Q160,720 160,720Q160,720 160,720ZM660,720L800,720Q800,720 800,720Q800,720 800,720L800,360L660,360L660,720ZM160,500L580,500L580,360L160,360L160,500Z"/>
</vector>



================================================
FILE: app/src/main/res/font/montserrat_bold.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto"
        app:fontProviderAuthority="com.google.android.gms.fonts"
        app:fontProviderPackage="com.google.android.gms"
        app:fontProviderQuery="Montserrat:wght700"
        app:fontProviderCerts="@array/com_google_android_gms_fonts_certs">
</font-family>



================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
    <monochrome android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_monochrome.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_monochrome_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_monochrome_round.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_monochrome_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_monochrome_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_monochrome_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_monochrome_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_monochrome_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_monochrome_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome_foreground.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_monochrome_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
================================================
[Binary file]


================================================
FILE: app/src/main/res/values/colors.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="splash_bg_light">#FAFAFA</color>
    <color name="splash_bg_dark">#101010</color>
</resources>


================================================
FILE: app/src/main/res/values/font_certs.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <array name="com_google_android_gms_fonts_certs">
        <item>@array/com_google_android_gms_fonts_certs_dev</item>
        <item>@array/com_google_android_gms_fonts_certs_prod</item>
    </array>
    <string-array name="com_google_android_gms_fonts_certs_dev">
        <item>
            MIIEqDCCA5CgAwIBAgIJANWFuGx90071MA0GCSqGSIb3DQEBBAUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTAeFw0wODA0MTUyMzM2NTZaFw0zNTA5MDEyMzM2NTZaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBANbOLggKv+IxTdGNs8/TGFy0PTP6DHThvbbR24kT9ixcOd9W+EaBPWW+wPPKQmsHxajtWjmQwWfna8mZuSeJS48LIgAZlKkpFeVyxW0qMBujb8X8ETrWy550NaFtI6t9+u7hZeTfHwqNvacKhp1RbE6dBRGWynwMVX8XW8N1+UjFaq6GCJukT4qmpN2afb8sCjUigq0GuMwYXrFVee74bQgLHWGJwPmvmLHC69EH6kWr22ijx4OKXlSIx2xT1AsSHee70w5iDBiK4aph27yH3TxkXy9V89TDdexAcKk/cVHYNnDBapcavl7y0RiQ4biu8ymM8Ga/nmzhRKya6G0cGw8CAQOjgfwwgfkwHQYDVR0OBBYEFI0cxb6VTEM8YYY6FbBMvAPyT+CyMIHJBgNVHSMEgcEwgb6AFI0cxb6VTEM8YYY6FbBMvAPyT+CyoYGapIGXMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbYIJANWFuGx90071MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEEBQADggEBABnTDPEF+3iSP0wNfdIjIz1AlnrPzgAIHVvXxunW7SBrDhEglQZBbKJEk5kT0mtKoOD1JMrSu1xuTKEBahWRbqHsXclaXjoBADb0kkjVEJu/Lh5hgYZnOjvlba8Ld7HCKePCVePoTJBdI4fvugnL8TsgK05aIskyY0hKI9L8KfqfGTl1lzOv2KoWD0KWwtAWPoGChZxmQ+nBli+gwYMzM1vAkP+aayLe0a1EQimlOalO762r0GXO0ks+UeXde2Z4e+8S/pf7pITEI/tP+MxJTALw9QUWEv9lKTk+jkbqxbsh8nfBUapfKqYn0eidpwq2AzVp3juYl7//fKnaPhJD9gs=
        </item>
    </string-array>
    <string-array name="com_google_android_gms_fonts_certs_prod">
        <item>
            MIIEQzCCAyugAwIBAgIJAMLgh0ZkSjCNMA0GCSqGSIb3DQEBBAUAMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDAeFw0wODA4MjEyMzEzMzRaFw0zNjAxMDcyMzEzMzRaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBAKtWLgDYO6IIrgqWbxJOKdoR8qtW0I9Y4sypEwPpt1TTcvZApxsdyxMJZ2JORland2qSGT2y5b+3JKkedxiLDmpHpDsz2WCbdxgxRczfey5YZnTJ4VZbH0xqWVW/8lGmPav5xVwnIiJS6HXk+BVKZF+JcWjAsb/GEuq/eFdpuzSqeYTcfi6idkyugwfYwXFU1+5fZKUaRKYCwkkFQVfcAs1fXA5V+++FGfvjJ/CxURaSxaBvGdGDhfXE28LWuT9ozCl5xw4Yq5OGazvV24mZVSoOO0yZ31j7kYvtwYK6NeADwbSxDdJEqO4k//0zOHKrUiGYXtqw/A0LFFtqoZKFjnkCAQOjgdkwgdYwHQYDVR0OBBYEFMd9jMIhF1Ylmn/Tgt9r45jk14alMIGmBgNVHSMEgZ4wgZuAFMd9jMIhF1Ylmn/Tgt9r45jk14aloXikdjB0MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIEluYy4xEDAOBgNVBAsTB0FuZHJvaWQxEDAOBgNVBAMTB0FuZHJvaWSCCQDC4IdGZEowjTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBAUAA4IBAQBt0lLO74UwLDYKqs6Tm8/yzKkEu116FmH4rkaymUIE0P9KaMftGlMexFlaYjzmB2OxZyl6euNXEsQH8gjwyxCUKRJNexBiGcCEyj6z+a1fuHHvkiaai+KL8W1EyNmgjmyy8AW7P+LLlkR+ho5zEHatRbM/YAnqGcFh5iZBqpknHf1SKMXFh4dd239FJ1jWYfbMDMy3NS5CTMQ2XFI1MvcyUTdZPErjQfTbQe3aDQsQcafEQPD+nqActifKZ0Np0IS9L9kR/wbNvyz6ENwPiTrjV2KRkEjH78ZMcUQXg0L3BYHJ3lc69Vs5Ddf9uUGGMYldX3WfMBEmh/9iFBDAaTCK
        </item>
    </string-array>
</resources>


================================================
FILE: app/src/main/res/values/ic_launcher_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#F6F6F6</color>
</resources>


================================================
FILE: app/src/main/res/values/ic_launcher_monochrome_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_monochrome_background">#FFFFFF</color>
</resources>


================================================
FILE: app/src/main/res/values/strings.xml
================================================
<resources>

    <!-- App -->
    <string name="app_name" translatable="false">Randify</string>

    <!-- Common -->
    <string name="add">Add</string>
    <string name="back">Back</string>
    <string name="cancel">Cancel</string>
    <string name="close">Close</string>
    <string name="delete">Delete</string>
    <string name="disabled">Disabled</string>
    <string name="edit">Edit</string>
    <string name="enabled">Enabled</string>
    <string name="loading">LoadingвЂ¦</string>
    <string name="rename">Rename</string>
    <string name="reset">Reset</string>
    <string name="result">Result</string>
    <string name="results">Results:</string>
    <string name="save">Save</string>
    <string name="settings">Settings</string>
    <string name="title">Title</string>

    <!-- Main screen -->
    <string name="coin">Coin</string>
    <string name="dice">Dice</string>
    <string name="list">List</string>
    <string name="lot">Lot</string>
    <string name="numbers">Numbers</string>
    <string name="random">Random</string>

    <!-- Lot screen -->
    <string name="lot_title">Lot</string>
    <string name="marked_fields_label">Marked fields</string>
    <string name="marked_more_than_total">Marked more than total</string>
    <string name="minimum_1_marked">At least 1 marked</string>
    <string name="minimum_3_fields">At least 3 fields</string>
    <string name="reshuffle">Reshuffle</string>
    <string name="show_all">Show all</string>
    <string name="total_fields_label">Total fields</string>
    <string name="vibration_off">Vibration: off</string>
    <string name="vibration_on">Vibration: on</string>

    <!-- List screen -->
    <string name="all_options_used">All options used up</string>
    <string name="item_1">Item 1</string>
    <string name="item_2">Item 2</string>
    <string name="item_3">Item 3</string>
    <string name="list_empty">List is empty</string>
    <string name="list_name">List name</string>
    <string name="my_list">My list</string>
    <string name="new_list">New list</string>
    <string name="new_name">New name</string>
    <string name="preset_actions">Preset actions</string>
    <string name="rename_list">Rename list</string>
    <string name="save_settings">Save settings</string>
    <string name="share_preset">Share preset</string>
    <string name="use_preset">Use preset</string>

    <!-- Numbers screen -->
    <string name="all_numbers_used">All numbers used</string>
    <string name="count_must_be_positive">Count must be greater than 0</string>
    <string name="enter_valid_numbers">Enter valid numbers in `FROM` and `TO`</string>
    <string name="from">FROM</string>
    <string name="history_cleared">Used numbers history cleared</string>
    <string name="number">Number</string>
    <string name="only_available_numbers">Only %1$d unused numbers available</string>
    <string name="reset_history">Reset used numbers history</string>
    <string name="to">TO</string>
    <string name="used_count">Used</string>

    <!-- Dice / Coin -->
    <string name="dice_count">Dice count</string>
    <string name="heads">Heads</string>
    <string name="roll_dice">Roll</string>
    <string name="sum">Sum</string>
    <string name="tails">Tails</string>

    <!-- Generator settings -->
    <string name="allow_repetitions">Allow repetitions</string>
    <string name="custom_delay_enabled">Custom delay between results</string>
    <string name="customize_generation">Customize generation settings</string>
    <string name="generator_settings">Generator settings</string>
    <string name="repetitions_description">Allow value repetition</string>
    <string name="result_count">Number of results</string>
    <string name="result_count_description">Select the number of generated results</string>
    <string name="sorting_description">Order of result display</string>
    <string name="swipe_hint">Swipe up to flip</string>

    <!-- Sorting -->
    <string name="alphabetical_az">Alphabetical (AвЂ“Z)</string>
    <string name="alphabetical_za">Reverse alphabetical (ZвЂ“A)</string>
    <string name="ascending">Ascending</string>
    <string name="descending">Descending</string>
    <string name="random_order">Random order</string>
    <string name="sorting">Sorting</string>

    <!-- Dialogs -->
    <string name="delay">Delay</string>
    <string name="expandable_section_collapse">Collapse</string>
    <string name="expandable_section_expand">Expand</string>
    <string name="fixed_delay_1_second">Fixed delay: 1 second</string>
    <string name="open_after_save">Open after saving</string>
    <string name="seconds">sec</string>
    <string name="seconds_short">s</string>
    <string name="use_delay">Use delay</string>

    <!-- Settings screen -->
    <string name="android_12_required">Android 12+ required</string>
    <string name="appearance">Appearance</string>
    <string name="dark_theme">Dark</string>
    <string name="dynamic_colors">Dynamic colors</string>
    <string name="dynamic_colors_description">Adapt palette to wallpaper (Material You)</string>
    <string name="fab_size">FAB size</string>
    <string name="fab_size_description">Size of main action button on screens</string>
    <string name="fab_size_large">L (Large)</string>
    <string name="fab_size_large_desc">Large size</string>
    <string name="fab_size_medium">M (Medium)</string>
    <string name="fab_size_medium_desc">Standard size</string>
    <string name="fab_size_small">S (Small)</string>
    <string name="fab_size_small_desc">Compact size</string>
    <string name="general">General</string>
    <string name="language">Language</string>
    <string name="language_description">Choose app language</string>
    <string name="language_english">English</string>
    <string name="language_russian">Russian</string>
    <string name="language_ukrainian">Ukrainian</string>
    <string name="language_belarusian">Belarusian</string>
    <string name="language_polish">Polish</string>
    <string name="language_system">System</string>
    <string name="light_theme">Light</string>
    <string name="settings_appearance_subtitle">Theme, dynamic colors, FAB size</string>
    <string name="settings_general_subtitle">Language and vibration</string>
    <string name="system_theme">System</string>
    <string name="theme">Theme</string>
    <string name="theme_description">Choose app theme</string>
    <string name="use_wallpaper_colors">Use wallpaper colors (Android 12+)</string>
    <string name="vibration">Vibration</string>
    <string name="vibration_description">Haptic feedback on interactions</string>
    <string name="vibration_intensity">Vibration intensity</string>
    <string name="vibration_low">Low</string>
    <string name="vibration_medium">Medium</string>
    <string name="vibration_high">High</string>
    <string name="vibration_switch_description_on">Provides haptic feedback across the app</string>
    <string name="vibration_switch_description_off">Disables all haptic feedback in the app</string>

    <!-- About screen -->
    <string name="about_app">About App</string>
    <string name="app_icon">App icon</string>
    <string name="bug_report_subtitle">Please describe the problem and send it to us</string>
    <string name="bug_report_title">Bug Report</string>
    <string name="connect_with_us_category_title">Connect With Us</string>
    <string name="contact_us">Contact Us</string>
    <string name="development_category_title">Development</string>
    <string name="discord_subtitle">Our Discord Server</string>
    <string name="discord_title">Discord</string>
    <string name="discord_url" translatable="false">https://discord.gg/byteflipper</string>
    <string name="error_no_browser_found">No browser found to open URL</string>
    <string name="github_subtitle">Our Github Repository</string>
    <string name="github_title">Github</string>
    <string name="github_url" translatable="false">https://github.com/ByteFlipper-58/</string>
    <string name="made_with_love">Made with вќ¤пёЏ by ByteFlipper</string>
    <string name="other_apps_subtitle">Our Other Apps</string>
    <string name="other_apps_title">Other Apps</string>
    <string name="other_apps_url" translatable="false">https://play.google.com/store/apps/dev?id=8551876312630719902</string>
    <string name="rate_the_app_subtitle">Rate the app on Google Play</string>
    <string name="rate_the_app_title">Rate the app</string>
    <string name="source_code_subtitle">Source code of the application on GitHub</string>
    <string name="source_code_title">Source Code</string>
    <string name="source_code_url" translatable="false">https://github.com/ByteFlipper-58/random</string>
    <string name="support_feedback_category_title">Support &amp; Feedback</string>
    <string name="telegram_subtitle">Our Telegram Channel</string>
    <string name="telegram_title">Telegram</string>
    <string name="telegram_url" translatable="false">https://t.me/byte_flipper</string>
    <string name="version">Version</string>
    <string name="vk_subtitle">Our community on VK</string>
    <string name="vk_title">VK</string>
    <string name="vk_url" translatable="false">https://vk.com/byteflipper</string>
    <string name="website_subtitle">Our Website</string>
    <string name="website_title">ByteFlipper Website</string>
    <string name="website_url" translatable="false">https://byteflipper.com/</string>
    <string name="youtube_subtitle">Our YouTube Channel</string>
    <string name="youtube_title">YouTube</string>
    <string name="youtube_url" translatable="false">https://www.youtube.com/</string>

    <!-- Setup screen -->
    <string name="setup_enable_notifications">Enable Notifications</string>
    <string name="setup_finish_description">You\'re ready to trust randomness рџЋІ</string>
    <string name="setup_finish_title">All Set!</string>
    <string name="setup_notifications_description">Enable notifications to receive push alerts about new updates and other important events.</string>
    <string name="setup_notifications_title">Notifications</string>
    <string name="setup_permission_error">Please grant all required permissions.</string>
    <string name="setup_permission_granted">Permission Granted</string>
    <string name="setup_welcome_description">Let\'s get the app ready for you.</string>
    <string name="setup_welcome_title">Welcome to Randify</string>

</resources>


================================================
FILE: app/src/main/res/values/themes.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <style name="Theme.Random" parent="Theme.AppCompat.NoActionBar">

        <item name="android:forceDarkAllowed" tools:ignore="NewApi">false</item>
        <item name="android:windowContentTransitions">false</item>

        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
    </style>

    <style name="App.Starting" parent="Theme.SplashScreen">
        <!-- РћР±СЏР·Р°С‚РµР»СЊРЅС‹Рµ Р°С‚СЂРёР±СѓС‚С‹ -->
        <item name="windowSplashScreenAnimatedIcon">@drawable/logo</item>
        <item name="windowSplashScreenIconBackgroundColor">@android:color/transparent</item>
        <item name="android:forceDarkAllowed" tools:ignore="NewApi">false</item>
        <item name="windowSplashScreenBackground">@color/splash_bg_light</item>

        <!-- РџРѕСЃР»Рµ СЃРїР»СЌС€Р° -->
        <item name="postSplashScreenTheme">@style/Theme.Random</item>
    </style>
</resources>



================================================
FILE: app/src/main/res/values-be/strings.xml
================================================
<resources>

    <!-- App -->
    <string name="app_name">Randify</string>

    <!-- Common -->
    <string name="add">Р”Р°РґР°С†СЊ</string>
    <string name="back">РќР°Р·Р°Рґ</string>
    <string name="cancel">РђРґРјРµРЅР°</string>
    <string name="close">Р—Р°РєСЂС‹С†СЊ</string>
    <string name="delete">Р’С‹РґР°Р»С–С†СЊ</string>
    <string name="disabled">РђРґРєР»СЋС‡Р°РЅР°</string>
    <string name="edit">Р СЌРґР°РіР°РІР°С†СЊ</string>
    <string name="enabled">РЈРєР»СЋС‡Р°РЅР°</string>
    <string name="loading">Р—Р°РіСЂСѓР·РєР°вЂ¦</string>
    <string name="rename">РџРµСЂР°Р№РјРµРЅР°РІР°С†СЊ</string>
    <string name="reset">РЎРєС–РЅСѓС†СЊ</string>
    <string name="result">Р’С‹РЅС–Рє</string>
    <string name="results">Р’С‹РЅС–РєС–:</string>
    <string name="save">Р—Р°С…Р°РІР°С†СЊ</string>
    <string name="settings">РќР°Р»Р°РґС‹</string>
    <string name="title">РќР°Р·РІР°</string>

    <!-- Main screen -->
    <string name="coin">РњР°РЅРµС‚Р°</string>
    <string name="dice">РљСѓР±С–Рє</string>
    <string name="list">РЎРїС–СЃ</string>
    <string name="lot">Р–СЌСЂР°Р±СЏ</string>
    <string name="numbers">Р›С–РєС–</string>
    <string name="random">Р’С‹РїР°РґРєРѕРІР°Рµ</string>

    <!-- Lot screen -->
    <string name="lot_title">Р–СЌСЂР°Р±СЏ</string>
    <string name="marked_fields_label">РџР°Р·РЅР°С‡Р°РЅС‹СЏ РїР°Р»С–</string>
    <string name="marked_more_than_total">РџР°Р·РЅР°С‡Р°РЅС‹С… Р±РѕР»СЊС€, С‡С‹Рј Р°РіСѓР»СЊРЅР°СЏ РєРѕР»СЊРєР°СЃС†СЊ</string>
    <string name="minimum_1_marked">РњС–РЅС–РјСѓРј 1 РїР°Р·РЅР°С‡Р°РЅР°Рµ</string>
    <string name="minimum_3_fields">РњС–РЅС–РјСѓРј 3 РїР°Р»С–</string>
    <string name="reshuffle">РџРµСЂР°С‚Р°СЃР°РІР°С†СЊ</string>
    <string name="show_all">РџР°РєР°Р·Р°С†СЊ СѓСЃС‘</string>
    <string name="total_fields_label">РђРіСѓР»СЊРЅР°СЏ РєРѕР»СЊРєР°СЃС†СЊ РїР°Р»С‘Сћ</string>
    <string name="vibration_off">Р’С–Р±СЂР°С†С‹СЏ: РІС‹РєР»</string>
    <string name="vibration_on">Р’С–Р±СЂР°С†С‹СЏ: СѓРєР»СЋС‡</string>

    <!-- List screen -->
    <string name="all_options_used">РЈСЃРµ РІР°СЂС‹СЏРЅС‚С‹ РІС‹РєР°СЂС‹СЃС‚Р°РЅС‹</string>
    <string name="item_1">Р­Р»РµРјРµРЅС‚ 1</string>
    <string name="item_2">Р­Р»РµРјРµРЅС‚ 2</string>
    <string name="item_3">Р­Р»РµРјРµРЅС‚ 3</string>
    <string name="list_empty">РЎРїС–СЃ РїСѓСЃС‚С‹</string>
    <string name="list_name">РќР°Р·РІР° СЃРїС–СЃСѓ</string>
    <string name="my_list">РњРѕР№ СЃРїС–СЃ</string>
    <string name="new_list">РќРѕРІС‹ СЃРїС–СЃ</string>
    <string name="new_name">РќРѕРІР°СЏ РЅР°Р·РІР°</string>
    <string name="preset_actions">Р“Р°С‚РѕРІС‹СЏ РґР·РµСЏРЅРЅС–</string>
    <string name="rename_list">РџРµСЂР°Р№РјРµРЅР°РІР°С†СЊ СЃРїС–СЃ</string>
    <string name="save_settings">Р—Р°С…Р°РІР°С†СЊ РЅР°Р»Р°РґС‹</string>
    <string name="share_preset">РџР°РґР·СЏР»С–С†С†Р° РїСЂСЌСЃСЌС‚Р°Рј</string>
    <string name="use_preset">Р’С‹РєР°СЂС‹СЃС‚Р°С†СЊ РїСЂСЌСЃСЌС‚</string>

    <!-- Numbers screen -->
    <string name="all_numbers_used">РЈСЃРµ Р»С–РєС– РІС‹РєР°СЂС‹СЃС‚Р°РЅС‹</string>
    <string name="count_must_be_positive">РљРѕР»СЊРєР°СЃС†СЊ РїР°РІС–РЅРЅР° Р±С‹С†СЊ Р±РѕР»СЊС€ Р·Р° 0</string>
    <string name="enter_valid_numbers">РЈРІСЏРґР·С–С†Рµ РєР°СЂСЌРєС‚РЅС‹СЏ Р·РЅР°С‡СЌРЅРЅС– Сћ `РђР”` С– `Р”Рћ`</string>
    <string name="from">РђР”</string>
    <string name="history_cleared">Р“С–СЃС‚РѕСЂС‹СЏ РІС‹РєР°СЂС‹СЃС‚Р°РЅС‹С… Р»С–РєР°Сћ Р°С‡С‹С€С‡Р°РЅР°</string>
    <string name="number">Р›С–Рє</string>
    <string name="only_available_numbers">Р”Р°СЃС‚СѓРїРЅР° С‚РѕР»СЊРєС– %1$d РЅСЏРІС‹РєР°СЂС‹СЃС‚Р°РЅС‹С… Р»С–РєР°Сћ</string>
    <string name="reset_history">РЎРєС–РЅСѓС†СЊ РіС–СЃС‚РѕСЂС‹СЋ</string>
    <string name="to">Р”Рћ</string>
    <string name="used_count">Р’С‹РєР°СЂС‹СЃС‚Р°РЅР°</string>

    <!-- Dice / Coin -->
    <string name="dice_count">РљРѕР»СЊРєР°СЃС†СЊ РєСѓР±С–РєР°Сћ</string>
    <string name="heads">РђСЂРѕР»</string>
    <string name="roll_dice">РљС–РЅСѓС†СЊ</string>
    <string name="sum">РЎСѓРјР°</string>
    <string name="tails">Р СЌС€РєР°</string>

    <!-- Generator settings -->
    <string name="allow_repetitions">Р”Р°Р·РІРѕР»С–С†СЊ РїР°СћС‚РѕСЂС‹</string>
    <string name="custom_delay_enabled">РЎРІР°СЏ Р·Р°С‚СЂС‹РјРєР° РїР°РјС–Р¶ РІС‹РЅС–РєР°РјС–</string>
    <string name="customize_generation">РќР°Р»Р°РґР·С–С†СЊ РіРµРЅРµСЂР°С†С‹СЋ</string>
    <string name="generator_settings">РќР°Р»Р°РґС‹ РіРµРЅРµСЂР°С‚Р°СЂР°</string>
    <string name="repetitions_description">Р”Р°Р·РІРѕР»С–С†СЊ РїР°СћС‚Р°СЂСЌРЅРЅРµ Р·РЅР°С‡СЌРЅРЅСЏСћ</string>
    <string name="result_count">РљРѕР»СЊРєР°СЃС†СЊ РІС‹РЅС–РєР°Сћ</string>
    <string name="result_count_description">РђР±СЏСЂС‹С†Рµ РєРѕР»СЊРєР°СЃС†СЊ РІС‹РЅС–РєР°Сћ</string>
    <string name="sorting_description">РџР°СЂР°РґР°Рє Р°РґР»СЋСЃС‚СЂР°РІР°РЅРЅСЏ</string>
    <string name="swipe_hint">РџСЂР°РІСЏРґР·С–С†Рµ СћРІРµСЂС…, РєР°Р± РїРµСЂР°РІСЏСЂРЅСѓС†СЊ</string>

    <!-- Sorting -->
    <string name="alphabetical_az">РџР° Р°Р»С„Р°РІС–С†Рµ (РђвЂ“РЇ)</string>
    <string name="alphabetical_za">РЈ Р·РІР°СЂРѕС‚РЅС‹Рј РїР°СЂР°РґРєСѓ (РЇвЂ“Рђ)</string>
    <string name="ascending">РџР° СћР·СЂР°СЃС‚Р°РЅРЅС–</string>
    <string name="descending">РџР° Р·РјСЏРЅС€СЌРЅРЅС–</string>
    <string name="random_order">Р’С‹РїР°РґРєРѕРІС‹ РїР°СЂР°РґР°Рє</string>
    <string name="sorting">РЎР°СЂС‚Р°РІР°РЅРЅРµ</string>

    <!-- Dialogs -->
    <string name="delay">Р—Р°С‚СЂС‹РјРєР°</string>
    <string name="expandable_section_collapse">Р—РіР°СЂРЅСѓС†СЊ</string>
    <string name="expandable_section_expand">Р Р°Р·РіР°СЂРЅСѓС†СЊ</string>
    <string name="fixed_delay_1_second">Р¤С–РєСЃР°РІР°РЅР°СЏ Р·Р°С‚СЂС‹РјРєР°: 1 СЃРµРєСѓРЅРґР°</string>
    <string name="open_after_save">РђРґРєСЂС‹С†СЊ РїР°СЃР»СЏ Р·Р°С…Р°РІР°РЅРЅСЏ</string>
    <string name="seconds">СЃРµРє</string>
    <string name="seconds_short">СЃ</string>
    <string name="use_delay">Р’С‹РєР°СЂС‹СЃС‚Р°С†СЊ Р·Р°С‚СЂС‹РјРєСѓ</string>

    <!-- Settings screen -->
    <string name="android_12_required">РџР°С‚СЂР°Р±СѓРµС†С†Р° Android 12+</string>
    <string name="appearance">Р’С‹РіР»СЏРґ</string>
    <string name="dark_theme">Р¦С‘РјРЅР°СЏ</string>
    <string name="dynamic_colors">Р”С‹РЅР°РјС–С‡РЅС‹СЏ РєРѕР»РµСЂС‹</string>
    <string name="dynamic_colors_description">РџСЂС‹СЃС‚Р°СЃР°РІР°С†СЊ РїР°Р»С–С‚СЂСѓ РґР° С€РїР°Р»РµСЂР°Сћ (Material You)</string>
    <string name="fab_size">РџР°РјРµСЂ FAB</string>
    <string name="fab_size_description">РџР°РјРµСЂ РіР°Р»РѕСћРЅР°Р№ РєРЅРѕРїРєС– РЅР° СЌРєСЂР°РЅР°С…</string>
    <string name="fab_size_large">L (Р’СЏР»С–РєС–)</string>
    <string name="fab_size_large_desc">Р’СЏР»С–РєС– РїР°РјРµСЂ</string>
    <string name="fab_size_medium">M (РЎСЏСЂСЌРґРЅС–)</string>
    <string name="fab_size_medium_desc">РЎС‚Р°РЅРґР°СЂС‚РЅС‹ РїР°РјРµСЂ</string>
    <string name="fab_size_small">S (РњР°Р»С‹)</string>
    <string name="fab_size_small_desc">РљР°РјРїР°РєС‚РЅС‹ РїР°РјРµСЂ</string>
    <string name="general">РђРіСѓР»СЊРЅС‹СЏ</string>
    <string name="language">РњРѕРІР°</string>
    <string name="language_description">РђР±СЏСЂС‹С†Рµ РјРѕРІСѓ РїСЂС‹РєР»Р°РґР°РЅРЅСЏ</string>
    <string name="language_english">РђРЅРіР»С–Р№СЃРєР°СЏ</string>
    <string name="language_russian">Р СѓСЃРєР°СЏ</string>
    <string name="language_ukrainian">РЈРєСЂР°С–РЅСЃРєР°СЏ</string>
    <string name="language_belarusian">Р‘РµР»Р°СЂСѓСЃРєР°СЏ</string>
    <string name="language_polish">РџРѕР»СЊСЃРєР°СЏ</string>
    <string name="language_system">РЎС–СЃС‚СЌРјРЅР°СЏ</string>
    <string name="light_theme">РЎРІРµС‚Р»Р°СЏ</string>
    <string name="settings_appearance_subtitle">РўСЌРјР°, РґС‹РЅР°РјС–С‡РЅС‹СЏ РєРѕР»РµСЂС‹, РїР°РјРµСЂ FAB</string>
    <string name="settings_general_subtitle">РњРѕРІР° С– РІС–Р±СЂР°С†С‹СЏ</string>
    <string name="system_theme">РЎС–СЃС‚СЌРјРЅР°СЏ</string>
    <string name="theme">РўСЌРјР°</string>
    <string name="theme_description">РђР±СЏСЂС‹С†Рµ С‚СЌРјСѓ РїСЂС‹РєР»Р°РґР°РЅРЅСЏ</string>
    <string name="use_wallpaper_colors">Р’С‹РєР°СЂС‹СЃС‚РѕСћРІР°С†СЊ РєРѕР»РµСЂС‹ С€РїР°Р»РµСЂР°Сћ (Android 12+)</string>
    <string name="vibration">Р’С–Р±СЂР°С†С‹СЏ</string>
    <string name="vibration_description">РўР°РєС‚С‹Р»СЊРЅР°СЏ Р°РґРґР°С‡Р° РїСЂС‹ СћР·Р°РµРјР°РґР·РµСЏРЅРЅС–</string>
    <string name="vibration_intensity">Р†РЅС‚СЌРЅСЃС–СћРЅР°СЃС†СЊ РІС–Р±СЂР°С†С‹С–</string>
    <string name="vibration_low">РќС–Р·РєР°СЏ</string>
    <string name="vibration_medium">РЎСЏСЂСЌРґРЅСЏСЏ</string>
    <string name="vibration_high">Р’С‹СЃРѕРєР°СЏ</string>
    <string name="vibration_switch_description_on">РЈРєР»СЋС‡Р°Рµ С‚Р°РєС‚С‹Р»СЊРЅСѓСЋ Р°РґРґР°С‡Сѓ РїР° СћСЃС–Рј РґР°РґР°С‚РєСѓ</string>
    <string name="vibration_switch_description_off">РђРґРєР»СЋС‡Р°Рµ СћСЃСЋ С‚Р°РєС‚С‹Р»СЊРЅСѓСЋ Р°РґРґР°С‡Сѓ Сћ РґР°РґР°С‚РєСѓ</string>

    <!-- About screen -->
    <string name="about_app">РџСЂР° РїСЂР°РіСЂР°РјСѓ</string>
    <string name="app_icon">Р†РєРѕРЅРєР°</string>
    <string name="bug_report_subtitle">РљР°Р»С– Р»Р°СЃРєР°, Р°РїС–С€С‹С†Рµ РїСЂР°Р±Р»РµРјСѓ С– Р°РґРїСЂР°СћС†Рµ РЅР°Рј</string>
    <string name="bug_report_title">РЎРїСЂР°РІР°Р·РґР°С‡Р° РїСЂР° РїР°РјС‹Р»РєСѓ</string>
    <string name="connect_with_us_category_title">РЎСѓРІСЏР·СЊ Р· РЅР°РјС–</string>
    <string name="contact_us">Р—РІСЏР·Р°С†С†Р° Р· РЅР°РјС–</string>
    <string name="development_category_title">Р Р°СЃРїСЂР°С†РѕСћРєР°</string>
    <string name="discord_subtitle">РќР°С€ СЃРµСЂРІРµСЂ Discord</string>
    <string name="discord_title">Discord</string>
    <string name="discord_url" translatable="false">https://discord.gg/byteflipper</string>
    <string name="error_no_browser_found">Р‘СЂР°СћР·РµСЂ РЅРµ Р·РЅРѕР№РґР·РµРЅС‹</string>
    <string name="github_subtitle">РќР°С€ СЂСЌРїР°Р·С–С‚Р°СЂ GitHub</string>
    <string name="github_title">Github</string>
    <string name="github_url" translatable="false">https://github.com/ByteFlipper-58/</string>
    <string name="made_with_love">Р—СЂРѕР±Р»РµРЅР° Р· вќ¤пёЏ Р°Рґ ByteFlipper</string>
    <string name="other_apps_subtitle">РќР°С€С‹ С–РЅС€С‹СЏ РїСЂР°РіСЂР°РјС‹</string>
    <string name="other_apps_title">Р†РЅС€С‹СЏ РїСЂР°РіСЂР°РјС‹</string>
    <string name="other_apps_url" translatable="false">https://play.google.com/store/apps/dev?id=8551876312630719902</string>
    <string name="rate_the_app_subtitle">РђС†Р°РЅС–С†Рµ РїСЂР°РіСЂР°РјСѓ Сћ Google Play</string>
    <string name="rate_the_app_title">РђС†Р°РЅС–С†СЊ РїСЂР°РіСЂР°РјСѓ</string>
    <string name="source_code_subtitle">РљСЂС‹РЅС–С‡РЅС‹ РєРѕРґ РЅР° GitHub</string>
    <string name="source_code_title">РљСЂС‹РЅС–С‡РЅС‹ РєРѕРґ</string>
    <string name="source_code_url" translatable="false">https://github.com/ByteFlipper-58/random</string>
    <string name="support_feedback_category_title">РџР°РґС‚СЂС‹РјРєР° С– РІРѕРґРіСѓРєС–</string>
    <string name="telegram_subtitle">РќР°С€ Telegram-РєР°РЅР°Р»</string>
    <string name="telegram_title">Telegram</string>
    <string name="telegram_url" translatable="false">https://t.me/byte_flipper</string>
    <string name="version">Р’РµСЂСЃС–СЏ</string>
    <string name="vk_subtitle">РќР°С€Р° СЃСѓРїРѕР»РєР° Сћ VK</string>
    <string name="vk_title">VK</string>
    <string name="vk_url" translatable="false">https://vk.com/byteflipper</string>
    <string name="website_subtitle">РќР°С€ СЃР°Р№С‚</string>
    <string name="website_title">РЎР°Р№С‚ ByteFlipper</string>
    <string name="website_url" translatable="false">https://byteflipper.com/</string>
    <string name="youtube_subtitle">РќР°С€ YouTube-РєР°РЅР°Р»</string>
    <string name="youtube_title">YouTube</string>
    <string name="youtube_url" translatable="false">https://www.youtube.com/</string>

    <!-- Setup screen -->
    <string name="setup_enable_notifications">РЈРєР»СЋС‡С‹С†СЊ Р°РїР°РІСЏС€С‡СЌРЅРЅС–</string>
    <string name="setup_finish_description">РўС‹ РіР°С‚РѕРІС‹ РґР°РІРµСЂС‹С†С†Р° РІС‹РїР°РґРєРѕРІР°СЃС†С– рџЋІ</string>
    <string name="setup_finish_title">РЈСЃС‘ РіР°С‚РѕРІР°!</string>
    <string name="setup_notifications_description">РЈРєР»СЋС‡С‹ Р°РїР°РІСЏС€С‡СЌРЅРЅС–, РєР°Р± Р°С‚СЂС‹РјР»С–РІР°С†СЊ Р°Р±РЅР°СћР»РµРЅРЅС– С– РІР°Р¶РЅС‹СЏ РїР°РґР·РµС–.</string>
    <string name="setup_notifications_title">РђРїР°РІСЏС€С‡СЌРЅРЅС–</string>
    <string name="setup_permission_error">РљР°Р»С– Р»Р°СЃРєР°, РґР°Р№ СѓСЃРµ РїР°С‚СЂСЌР±РЅС‹СЏ РґР°Р·РІРѕР»С‹.</string>
    <string name="setup_permission_granted">Р”Р°Р·РІРѕР» РґР°РґР·РµРЅС‹</string>
    <string name="setup_welcome_description">РџР°РґСЂС‹С…С‚СѓРµРј РїСЂР°РіСЂР°РјСѓ РґР»СЏ С†СЏР±Рµ.</string>
    <string name="setup_welcome_title">РЎР°СЂРґСЌС‡РЅР° Р·Р°РїСЂР°С€Р°РµРј Сѓ Randify</string>

</resources>


================================================
FILE: app/src/main/res/values-night/themes.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:tools="http://schemas.android.com/tools">

    <style name="Theme.Random" parent="Theme.AppCompat.NoActionBar"/>

    <style name="App.Starting" parent="Theme.SplashScreen">
        <item name="android:forceDarkAllowed" tools:ignore="NewApi">false</item>
        <item name="windowSplashScreenBackground">@color/splash_bg_dark</item>
        <item name="windowSplashScreenAnimatedIcon">@drawable/logo</item>
        <item name="windowSplashScreenIconBackgroundColor">@android:color/transparent</item>

        <!-- РџРѕСЃР»Рµ СЃРїР»СЌС€Р° -->
        <item name="postSplashScreenTheme">@style/Theme.Random</item>
    </style>
</resources>



================================================
FILE: app/src/main/res/values-pl/strings.xml
================================================
<resources>

    <!-- App -->
    <string name="app_name">Randify</string>

    <!-- Common -->
    <string name="add">Dodaj</string>
    <string name="back">Wstecz</string>
    <string name="cancel">Anuluj</string>
    <string name="close">Zamknij</string>
    <string name="delete">UsuЕ„</string>
    <string name="disabled">WyЕ‚Д…czone</string>
    <string name="edit">Edytuj</string>
    <string name="enabled">WЕ‚Д…czone</string>
    <string name="loading">ЕЃadowanieвЂ¦</string>
    <string name="rename">ZmieЕ„ nazwД™</string>
    <string name="reset">Resetuj</string>
    <string name="result">Wynik</string>
    <string name="results">Wyniki:</string>
    <string name="save">Zapisz</string>
    <string name="settings">Ustawienia</string>
    <string name="title">TytuЕ‚</string>

    <!-- Main screen -->
    <string name="coin">Moneta</string>
    <string name="dice">Kostka</string>
    <string name="list">Lista</string>
    <string name="lot">Los</string>
    <string name="numbers">Liczby</string>
    <string name="random">Losowe</string>

    <!-- Lot screen -->
    <string name="lot_title">Los</string>
    <string name="marked_fields_label">Zaznaczone pola</string>
    <string name="marked_more_than_total">Zaznaczonych wiД™cej niЕј Е‚Д…czna liczba</string>
    <string name="minimum_1_marked">Minimum 1 zaznaczone</string>
    <string name="minimum_3_fields">Minimum 3 pola</string>
    <string name="reshuffle">Przetasuj</string>
    <string name="show_all">PokaЕј wszystko</string>
    <string name="total_fields_label">ЕЃД…czna liczba pГіl</string>
    <string name="vibration_off">Wibracja: wyЕ‚</string>
    <string name="vibration_on">Wibracja: wЕ‚</string>

    <!-- List screen -->
    <string name="all_options_used">Wszystkie opcje zostaЕ‚y uЕјyte</string>
    <string name="item_1">Element 1</string>
    <string name="item_2">Element 2</string>
    <string name="item_3">Element 3</string>
    <string name="list_empty">Lista jest pusta</string>
    <string name="list_name">Nazwa listy</string>
    <string name="my_list">Moja lista</string>
    <string name="new_list">Nowa lista</string>
    <string name="new_name">Nowa nazwa</string>
    <string name="preset_actions">Gotowe akcje</string>
    <string name="rename_list">ZmieЕ„ nazwД™ listy</string>
    <string name="save_settings">Zapisz ustawienia</string>
    <string name="share_preset">UdostД™pnij preset</string>
    <string name="use_preset">UЕјyj presetu</string>

    <!-- Numbers screen -->
    <string name="all_numbers_used">Wszystkie liczby zostaЕ‚y uЕјyte</string>
    <string name="count_must_be_positive">Liczba musi byД‡ wiД™ksza niЕј 0</string>
    <string name="enter_valid_numbers">WprowadЕє poprawne wartoЕ›ci w `OD` i `DO`</string>
    <string name="from">OD</string>
    <string name="history_cleared">Historia uЕјytych liczb zostaЕ‚a wyczyszczona</string>
    <string name="number">Liczba</string>
    <string name="only_available_numbers">DostД™pne tylko %1$d niewykorzystane liczby</string>
    <string name="reset_history">WyczyЕ›Д‡ historiД™</string>
    <string name="to">DO</string>
    <string name="used_count">UЕјyto</string>

    <!-- Dice / Coin -->
    <string name="dice_count">Liczba kostek</string>
    <string name="heads">OrzeЕ‚</string>
    <string name="roll_dice">RzuД‡</string>
    <string name="sum">Suma</string>
    <string name="tails">Reszka</string>

    <!-- Generator settings -->
    <string name="allow_repetitions">ZezwГіl na powtГіrzenia</string>
    <string name="custom_delay_enabled">WЕ‚asne opГіЕєnienie miД™dzy wynikami</string>
    <string name="customize_generation">Dostosuj generowanie</string>
    <string name="generator_settings">Ustawienia generatora</string>
    <string name="repetitions_description">ZezwГіl na powtarzanie wartoЕ›ci</string>
    <string name="result_count">Liczba wynikГіw</string>
    <string name="result_count_description">Wybierz liczbД™ wynikГіw</string>
    <string name="sorting_description">KolejnoЕ›Д‡ wyЕ›wietlania</string>
    <string name="swipe_hint">PrzesuЕ„ w gГіrД™, aby obrГіciД‡</string>

    <!-- Sorting -->
    <string name="alphabetical_az">Alfabetycznie (AвЂ“Z)</string>
    <string name="alphabetical_za">Odwrotnie (ZвЂ“A)</string>
    <string name="ascending">RosnД…co</string>
    <string name="descending">MalejД…co</string>
    <string name="random_order">Losowa kolejnoЕ›Д‡</string>
    <string name="sorting">Sortowanie</string>

    <!-- Dialogs -->
    <string name="delay">OpГіЕєnienie</string>
    <string name="expandable_section_collapse">ZwiЕ„</string>
    <string name="expandable_section_expand">RozwiЕ„</string>
    <string name="fixed_delay_1_second">StaЕ‚e opГіЕєnienie: 1 sekunda</string>
    <string name="open_after_save">OtwГіrz po zapisaniu</string>
    <string name="seconds">sek</string>
    <string name="seconds_short">s</string>
    <string name="use_delay">UЕјyj opГіЕєnienia</string>

    <!-- Settings screen -->
    <string name="android_12_required">Wymagany Android 12+</string>
    <string name="appearance">WyglД…d</string>
    <string name="dark_theme">Ciemny</string>
    <string name="dynamic_colors">Dynamiczne kolory</string>
    <string name="dynamic_colors_description">Dopasuj paletД™ do tapety (Material You)</string>
    <string name="fab_size">Rozmiar FAB</string>
    <string name="fab_size_description">Rozmiar gЕ‚Гіwnego przycisku na ekranach</string>
    <string name="fab_size_large">L (DuЕјy)</string>
    <string name="fab_size_large_desc">DuЕјy rozmiar</string>
    <string name="fab_size_medium">M (Ељredni)</string>
    <string name="fab_size_medium_desc">Standardowy rozmiar</string>
    <string name="fab_size_small">S (MaЕ‚y)</string>
    <string name="fab_size_small_desc">Kompaktowy rozmiar</string>
    <string name="general">OgГіlne</string>
    <string name="language">JД™zyk</string>
    <string name="language_description">Wybierz jД™zyk aplikacji</string>
    <string name="language_english">Angielski</string>
    <string name="language_russian">Rosyjski</string>
    <string name="language_ukrainian">UkraiЕ„ski</string>
    <string name="language_belarusian">BiaЕ‚oruski</string>
    <string name="language_polish">Polski</string>
    <string name="language_system">Systemowy</string>
    <string name="light_theme">Jasny</string>
    <string name="settings_appearance_subtitle">Motyw, kolory dynamiczne, rozmiar FAB</string>
    <string name="settings_general_subtitle">JД™zyk i wibracja</string>
    <string name="system_theme">Systemowy</string>
    <string name="theme">Motyw</string>
    <string name="theme_description">Wybierz motyw aplikacji</string>
    <string name="use_wallpaper_colors">UЕјyj kolorГіw tapety (Android 12+)</string>
    <string name="vibration">Wibracja</string>
    <string name="vibration_description">SprzД™Ејenie dotykowe przy interakcji</string>
    <string name="vibration_intensity">IntensywnoЕ›Д‡ wibracji</string>
    <string name="vibration_low">Niska</string>
    <string name="vibration_medium">Ељrednia</string>
    <string name="vibration_high">Wysoka</string>
    <string name="vibration_switch_description_on">WЕ‚Д…cza wibracje w caЕ‚ej aplikacji</string>
    <string name="vibration_switch_description_off">WyЕ‚Д…cza wszystkie wibracje w aplikacji</string>

    <!-- About screen -->
    <string name="about_app">O aplikacji</string>
    <string name="app_icon">Ikona</string>
    <string name="bug_report_subtitle">ProszД™ opisz problem i wyЕ›lij do nas</string>
    <string name="bug_report_title">ZgЕ‚oЕ› bЕ‚Д…d</string>
    <string name="connect_with_us_category_title">Kontakt z nami</string>
    <string name="contact_us">Skontaktuj siД™ z nami</string>
    <string name="development_category_title">RozwГіj</string>
    <string name="discord_subtitle">Nasz serwer Discord</string>
    <string name="discord_title">Discord</string>
    <string name="discord_url" translatable="false">https://discord.gg/byteflipper</string>
    <string name="error_no_browser_found">Nie znaleziono przeglД…darki</string>
    <string name="github_subtitle">Nasz repozytorium GitHub</string>
    <string name="github_title">Github</string>
    <string name="github_url" translatable="false">https://github.com/ByteFlipper-58/</string>
    <string name="made_with_love">Stworzone z вќ¤пёЏ przez ByteFlipper</string>
    <string name="other_apps_subtitle">Nasze inne aplikacje</string>
    <string name="other_apps_title">Inne aplikacje</string>
    <string name="other_apps_url" translatable="false">https://play.google.com/store/apps/dev?id=8551876312630719902</string>
    <string name="rate_the_app_subtitle">OceЕ„ aplikacjД™ w Google Play</string>
    <string name="rate_the_app_title">OceЕ„ aplikacjД™</string>
    <string name="source_code_subtitle">Kod ЕєrГіdЕ‚owy na GitHub</string>
    <string name="source_code_title">Kod ЕєrГіdЕ‚owy</string>
    <string name="source_code_url" translatable="false">https://github.com/ByteFlipper-58/random</string>
    <string name="support_feedback_category_title">Wsparcie i opinie</string>
    <string name="telegram_subtitle">Nasz kanaЕ‚ Telegram</string>
    <string name="telegram_title">Telegram</string>
    <string name="telegram_url" translatable="false">https://t.me/byte_flipper</string>
    <string name="version">Wersja</string>
    <string name="vk_subtitle">Nasza spoЕ‚ecznoЕ›Д‡ VK</string>
    <string name="vk_title">VK</string>
    <string name="vk_url" translatable="false">https://vk.com/byteflipper</string>
    <string name="website_subtitle">Nasza strona</string>
    <string name="website_title">Strona ByteFlipper</string>
    <string name="website_url" translatable="false">https://byteflipper.com/</string>
    <string name="youtube_subtitle">Nasz kanaЕ‚ YouTube</string>
    <string name="youtube_title">YouTube</string>
    <string name="youtube_url" translatable="false">https://www.youtube.com/</string>

    <!-- Setup screen -->
    <string name="setup_enable_notifications">WЕ‚Д…cz powiadomienia</string>
    <string name="setup_finish_description">JesteЕ› gotГіw zaufaД‡ losowoЕ›ci рџЋІ</string>
    <string name="setup_finish_title">Wszystko gotowe!</string>
    <string name="setup_notifications_description">WЕ‚Д…cz powiadomienia, aby otrzymywaД‡ aktualizacje i waЕјne wydarzenia.</string>
    <string name="setup_notifications_title">Powiadomienia</string>
    <string name="setup_permission_error">ProszД™ przyznaД‡ wszystkie wymagane uprawnienia.</string>
    <string name="setup_permission_granted">Uprawnienie przyznane</string>
    <string name="setup_welcome_description">Przygotujemy aplikacjД™ dla Ciebie.</string>
    <string name="setup_welcome_title">Witamy w Randify</string>

</resources>


================================================
FILE: app/src/main/res/values-ru/strings.xml
================================================
[Binary file]


================================================
FILE: app/src/main/res/values-uk/strings.xml
================================================
[Binary file]


================================================
FILE: app/src/main/res/xml/backup_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>


================================================
FILE: app/src/main/res/xml/data_extraction_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>


================================================
FILE: app/src/main/res/xml/locale_config.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<locale-config xmlns:android="http://schemas.android.com/apk/res/android">
   <locale android:name="en"/> <!-- English -->
   <locale android:name="ru"/> <!-- Russian -->
   <locale android:name="uk"/> <!-- Ukrainian -->
   <locale android:name="pl"/> <!-- Polish -->
   <locale android:name="be"/> <!-- Belarusian -->
</locale-config>







================================================
FILE: app/src/test/java/com/byteflipper/random/ExampleUnitTest.kt
================================================
package com.byteflipper.random

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}


================================================
FILE: gradle/libs.versions.toml
================================================
[versions]
activityCompose = "1.10.1"
agp = "8.12.0"
appcompat = "1.7.0"
browser = "1.9.0"
composeBom = "2025.08.01"
coreKtx = "1.17.0"
datastore = "1.1.1"
espressoCore = "3.7.0"
firebaseAnalytics = "23.0.0"
firebaseCrashlytics = "20.0.1"
firebaseInappmessagingDisplay = "22.0.0"
firebaseMessaging = "25.0.0"
googleFirebaseCrashlytics = "3.0.6"
googleGmsGoogleServices = "4.4.3"
hilt = "2.56"
junit = "4.13.2"
junitExt = "1.3.0"
kotlin = "2.2.10"
ksp = "2.2.0-2.0.2"
lifecycleRuntimeKtx = "2.9.2"
material3 = "1.5.0-alpha03"
materialIconsExtended = "1.7.8"
navigationCompose = "2.9.3"
playBilling = "8.0.0"
reorderable = "3.0.0"
room = "2.7.2"
uiTextGoogleFonts = "1.9.0"

[libraries]
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
androidx-browser = { group = "androidx.browser", name = "browser", version.ref = "browser" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
androidx-datastore-preferences = { group = "androidx.datastore", name = "datastore-preferences", version.ref = "datastore" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitExt" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "materialIconsExtended" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3", version.ref = "material3" }
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics", version.ref = "firebaseAnalytics" }
firebase-crashlytics = { group = "com.google.firebase", name = "firebase-crashlytics", version.ref = "firebaseCrashlytics" }
firebase-inappmessaging-display = { group = "com.google.firebase", name = "firebase-inappmessaging-display", version.ref = "firebaseInappmessagingDisplay" }
firebase-messaging = { group = "com.google.firebase", name = "firebase-messaging", version.ref = "firebaseMessaging" }
hilt = { group = "com.google.dagger.hilt", name = "hilt-android", version.ref = "hilt" }
hilt-compiler = { group = "com.google.dagger", name = "hilt-compiler", version.ref = "hilt" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
play-billing = { group = "com.android.billingclient", name = "billing", version.ref = "playBilling" }
reorderable = { group = "sh.calvin.reorderable", name = "reorderable", version.ref = "reorderable" }
androidx-ui-text-google-fonts = { group = "androidx.compose.ui", name = "ui-text-google-fonts", version.ref = "uiTextGoogleFonts" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
google-firebase-crashlytics = { id = "com.google.firebase.crashlytics", version.ref = "googleFirebaseCrashlytics" }
google-gms-google-services = { id = "com.google.gms.google-services", version.ref = "googleGmsGoogleServices" }
hilt-android-plugin = { id = "com.google.dagger.hilt.android.plugin", version.ref = "hilt" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }


================================================
FILE: gradle/wrapper/gradle-wrapper.properties
================================================
#Thu Aug 14 22:02:28 CEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: .github/ISSUE_TEMPLATE.md
================================================
## рџђ› Bug Report

### Description
A clear and concise description of what the bug is.

### Steps to Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

### Expected Behavior
A clear and concise description of what you expected to happen.

### Actual Behavior
A clear and concise description of what actually happened.

### Device Information
- **Device**: [e.g. Samsung Galaxy S21]
- **Android Version**: [e.g. Android 13]
- **App Version**: [e.g. 1.0.0]

### Additional Context
Add any other context about the problem here.

---

## рџ’Ў Feature Request

### Description
A clear and concise description of what you want to happen.

### Use Case
Describe the use case for this feature.

### Additional Context
Add any other context or screenshots about the feature request here.

---

## вќ“ Question

### Description
A clear and concise description of your question.

### Additional Context
Add any other context or details that might help answer your question.

---

**Thank you for helping us improve Random!** рџЋІвњЁ



================================================
FILE: .github/PULL_REQUEST_TEMPLATE.md
================================================
## Description
Brief description of changes made in this PR.

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Code refactoring

## Testing
- [ ] Unit tests pass
- [ ] Tested on different Android versions
- [ ] Manual testing completed

## Screenshots (if applicable)
Add screenshots for UI changes or new features.

---

**Thank you for contributing to Random!** рџЋІвњЁ


