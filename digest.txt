Directory structure:
└── Random/
    ├── build.gradle.kts
    ├── gradle.properties
    ├── gradlew
    ├── gradlew.bat
    ├── settings.gradle.kts
    ├── app/
    │   ├── build.gradle.kts
    │   ├── proguard-rules.pro
    │   └── src/
    │       ├── androidTest/
    │       │   └── java/
    │       │       └── com/
    │       │           └── byteflipper/
    │       │               └── random/
    │       │                   └── ExampleInstrumentedTest.kt
    │       ├── main/
    │       │   ├── AndroidManifest.xml
    │       │   ├── java/
    │       │   │   └── com/
    │       │   │       └── byteflipper/
    │       │   │           └── random/
    │       │   │               ├── MainActivity.kt
    │       │   │               ├── data/
    │       │   │               │   ├── db/
    │       │   │               │   │   ├── AppDatabase.kt
    │       │   │               │   │   └── Converters.kt
    │       │   │               │   ├── di/
    │       │   │               │   │   └── DatabaseModule.kt
    │       │   │               │   └── preset/
    │       │   │               │       ├── ListPreset.kt
    │       │   │               │       ├── ListPresetDao.kt
    │       │   │               │       └── ListPresetRepository.kt
    │       │   │               ├── navigation/
    │       │   │               │   └── NavGraph.kt
    │       │   │               └── ui/
    │       │   │                   ├── home/
    │       │   │                   │   └── HomeScreen.kt
    │       │   │                   ├── numbers/
    │       │   │                   │   └── NumbersScreen.kt
    │       │   │                   ├── presets/
    │       │   │                   │   └── AddListPresetScreen.kt
    │       │   │                   └── theme/
    │       │   │                       ├── Color.kt
    │       │   │                       ├── Theme.kt
    │       │   │                       └── Type.kt
    │       │   └── res/
    │       │       ├── drawable/
    │       │       │   ├── ic_launcher_background.xml
    │       │       │   └── ic_launcher_foreground.xml
    │       │       ├── mipmap-anydpi/
    │       │       │   ├── ic_launcher.xml
    │       │       │   └── ic_launcher_round.xml
    │       │       ├── mipmap-hdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-mdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── mipmap-xxxhdpi/
    │       │       │   ├── ic_launcher.webp
    │       │       │   └── ic_launcher_round.webp
    │       │       ├── values/
    │       │       │   ├── colors.xml
    │       │       │   ├── strings.xml
    │       │       │   └── themes.xml
    │       │       └── xml/
    │       │           ├── backup_rules.xml
    │       │           └── data_extraction_rules.xml
    │       └── test/
    │           └── java/
    │               └── com/
    │                   └── byteflipper/
    │                       └── random/
    │                           └── ExampleUnitTest.kt
    └── gradle/
        ├── libs.versions.toml
        └── wrapper/
            └── gradle-wrapper.properties

================================================
FILE: build.gradle.kts
================================================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
}


================================================
FILE: gradle.properties
================================================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true


================================================
FILE: gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: settings.gradle.kts
================================================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Random"
include(":app")



================================================
FILE: app/build.gradle.kts
================================================
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
}

android {
    namespace = "com.byteflipper.random"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.byteflipper.random"
        minSdk = 28
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


================================================
FILE: app/proguard-rules.pro
================================================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile


================================================
FILE: app/src/androidTest/java/com/byteflipper/random/ExampleInstrumentedTest.kt
================================================
package com.byteflipper.random

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.byteflipper.random", appContext.packageName)
    }
}


================================================
FILE: app/src/main/AndroidManifest.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Random">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.Random">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


================================================
FILE: app/src/main/java/com/byteflipper/random/MainActivity.kt
================================================
package com.byteflipper.random

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import androidx.navigation.compose.rememberNavController
import com.byteflipper.random.ui.theme.RandomTheme
import com.byteflipper.random.navigation.AppNavGraph

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            RandomTheme {
                Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                    val navController = rememberNavController()
                    AppNavGraph(navController = navController)
                }
            }
        }
    }
}



================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/AppDatabase.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetDao

@Database(
    entities = [ListPreset::class],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun listPresetDao(): ListPresetDao
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/db/Converters.kt
================================================
package com.byteflipper.random.data.db

import androidx.room.TypeConverter

class Converters {
    @TypeConverter
    fun fromString(value: String?): List<String>? = value?.split("\u0001")?.map { it }

    @TypeConverter
    fun listToString(list: List<String>?): String? = list?.joinToString("\u0001")
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/di/DatabaseModule.kt
================================================
package com.byteflipper.random.data.di

import android.content.Context
import androidx.room.Room
import com.byteflipper.random.data.db.AppDatabase
import com.byteflipper.random.data.db.Converters

object DatabaseModule {
    @Volatile private var db: AppDatabase? = null

    fun provideDatabase(context: Context): AppDatabase =
        db ?: synchronized(this) {
            db ?: Room.databaseBuilder(
                context.applicationContext,
                AppDatabase::class.java,
                "random.db"
            )
                .fallbackToDestructiveMigration()
                .build()
                .also { db = it }
        }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPreset.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "list_presets")
data class ListPreset(
    @PrimaryKey(autoGenerate = true) val id: Long = 0,
    val name: String,
    val items: List<String>
)





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetDao.kt
================================================
package com.byteflipper.random.data.preset

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import kotlinx.coroutines.flow.Flow

@Dao
interface ListPresetDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun upsert(preset: ListPreset): Long

    @Update
    suspend fun update(preset: ListPreset)

    @Delete
    suspend fun delete(preset: ListPreset)

    @Query("SELECT * FROM list_presets ORDER BY name ASC")
    fun observeAll(): Flow<List<ListPreset>>

    @Query("SELECT * FROM list_presets WHERE id = :id")
    suspend fun getById(id: Long): ListPreset?
}





================================================
FILE: app/src/main/java/com/byteflipper/random/data/preset/ListPresetRepository.kt
================================================
package com.byteflipper.random.data.preset

import com.byteflipper.random.data.di.DatabaseModule
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.withContext

class ListPresetRepository(private val dao: ListPresetDao) {
    fun observeAll(): Flow<List<ListPreset>> = dao.observeAll()

    suspend fun upsert(preset: ListPreset): Long = withContext(Dispatchers.IO) {
        dao.upsert(preset)
    }

    suspend fun delete(preset: ListPreset) = withContext(Dispatchers.IO) {
        dao.delete(preset)
    }

    companion object {
        fun fromContext(context: android.content.Context): ListPresetRepository {
            val db = DatabaseModule.provideDatabase(context)
            return ListPresetRepository(db.listPresetDao())
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/navigation/NavGraph.kt
================================================
package com.byteflipper.random.navigation

import androidx.compose.animation.AnimatedContentTransitionScope
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.byteflipper.random.ui.home.HomeScreen
import com.byteflipper.random.ui.numbers.NumbersScreen
import com.byteflipper.random.ui.presets.AddListPresetScreen

sealed class Route(val route: String) {
    data object Home : Route("home")
    data object Numbers : Route("numbers")
    data object List : Route("list")
    data object AddListPreset : Route("add_list_preset")
    data object Dice : Route("dice")
    data object Lot : Route("lot")
    data object Coin : Route("coin")
}

@Composable
fun AppNavGraph(navController: NavHostController) {
    NavHost(navController = navController, startDestination = Route.Home.route) {
        composable(Route.Home.route) {
            HomeScreen(
                onOpenNumbers = { navController.navigate(Route.Numbers.route) },
                onOpenList = { /* TODO */ },
                onOpenDice = { /* TODO */ },
                onOpenLot = { /* TODO */ },
                onOpenCoin = { /* TODO */ },
                onAddNumbersPreset = { /* TODO: screen for number presets */ },
                onAddListPreset = { navController.navigate(Route.AddListPreset.route) }
            )
        }
        composable(
            route = Route.Numbers.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            NumbersScreen(onBack = { navController.popBackStack() })
        }
        composable(
            route = Route.AddListPreset.route,
            enterTransition = {
                scaleIn(initialScale = 0.92f) + fadeIn()
            },
            exitTransition = {
                scaleOut(targetScale = 1.06f) + fadeOut()
            },
            popEnterTransition = {
                scaleIn(initialScale = 1.06f) + fadeIn()
            },
            popExitTransition = {
                scaleOut(targetScale = 0.92f) + fadeOut()
            }
        ) {
            AddListPresetScreen(onBack = { navController.popBackStack() })
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/home/HomeScreen.kt
================================================
package com.byteflipper.random.ui.home

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Add
import androidx.compose.material.icons.outlined.Casino
import androidx.compose.material.icons.outlined.MonetizationOn
import androidx.compose.material.icons.outlined.FormatListBulleted
import androidx.compose.material.icons.outlined.FormatListNumbered
import androidx.compose.material.icons.outlined.Gavel
import androidx.compose.material.icons.outlined.MoreVert
import androidx.compose.material.icons.outlined.Settings
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    onOpenNumbers: () -> Unit,
    onOpenList: () -> Unit,
    onOpenDice: () -> Unit,
    onOpenLot: () -> Unit,
    onOpenCoin: () -> Unit,
    onAddNumbersPreset: () -> Unit,
    onAddListPreset: () -> Unit,
) {
    Scaffold(
        topBar = { TopAppBar(title = { Text("Рандом") }, actions = {
            IconButton(onClick = { /* TODO: settings */ }) { Icon(Icons.Outlined.Settings, contentDescription = "Настройки") }
            IconButton(onClick = { /* TODO: menu */ }) { Icon(Icons.Outlined.MoreVert, contentDescription = "Меню") }
        }) }
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(16.dp),
            verticalArrangement = Arrangement.Top,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
        MenuCard(
            icon = Icons.Outlined.FormatListNumbered,
            title = "Числа",
            onClick = onOpenNumbers,
            onAddClick = onAddNumbersPreset
        )
        Spacer(Modifier.height(12.dp))
        MenuCard(
            icon = Icons.Outlined.FormatListBulleted,
            title = "Список",
            onClick = onOpenList,
            onAddClick = onAddListPreset
        )
        Spacer(Modifier.height(12.dp))
        MenuCard(icon = Icons.Outlined.Casino, title = "Игральные кости", onClick = onOpenDice)
        Spacer(Modifier.height(12.dp))
        MenuCard(icon = Icons.Outlined.Gavel, title = "Жребий", onClick = onOpenLot)
        Spacer(Modifier.height(12.dp))
        MenuCard(icon = Icons.Outlined.MonetizationOn, title = "Монетка", onClick = onOpenCoin)
        }
    }
}

@Composable
private fun MenuCard(
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    title: String,
    onClick: () -> Unit,
    onAddClick: (() -> Unit)? = null,
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        onClick = onClick,
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceContainer)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 14.dp),
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Icon(imageVector = icon, contentDescription = null)
            Text(
                text = title,
                modifier = Modifier
                    .weight(1f)
                    .padding(start = 16.dp),
                style = MaterialTheme.typography.titleMedium
            )
            if (onAddClick != null) {
                IconButton(onClick = onAddClick) {
                    Icon(imageVector = Icons.Outlined.Add, contentDescription = "Добавить пресет")
                }
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/numbers/NumbersScreen.kt
================================================
package com.byteflipper.random.ui.numbers

import android.view.SoundEffectConstants
import androidx.activity.compose.BackHandler
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material.icons.outlined.Autorenew
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.runtime.withFrameNanos
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.layout.boundsInRoot
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.layout.positionInRoot
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.Job
import kotlinx.coroutines.async
import kotlinx.coroutines.delay
import kotlinx.coroutines.joinAll
import kotlinx.coroutines.launch
import kotlin.math.PI
import kotlin.math.floor
import kotlin.math.hypot
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sin
import kotlin.math.sqrt

private const val MIN_DELAY_MS = 1_000
private const val MAX_DELAY_MS = 60_000

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NumbersScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val haptics = LocalHapticFeedback.current
    val view = LocalView.current

    var fromText by rememberSaveable { mutableStateOf("1") }
    var toText by rememberSaveable { mutableStateOf("3") }
    var delayText by rememberSaveable { mutableStateOf("") }

    // Р—РЅР°С‡РµРЅРёСЏ РЅР° СЃС‚РѕСЂРѕРЅР°С… РєР°СЂС‚РѕС‡РєРё
    var frontValue by rememberSaveable { mutableStateOf<Int?>(null) }
    var backValue by rememberSaveable { mutableStateOf<Int?>(null) }

    // Р’РёРґРёРјРѕСЃС‚СЊ/СЃРѕСЃС‚РѕСЏРЅРёСЏ
    var isCardVisible by rememberSaveable { mutableStateOf(false) }
    var isClosing by remember { mutableStateOf(false) }
    var isSpinning by remember { mutableStateOf(false) }

    // РџРѕРІРѕСЂРѕС‚ РєР°СЂС‚РѕС‡РєРё (РїРѕ Y) вЂ” РІСЃРµРіРґР° РїСЂРѕС‚РёРІ С‡Р°СЃРѕРІРѕР№
    val rotYAnim = remember { Animatable(0f) }
    var lastStopAngle by rememberSaveable { mutableStateOf(0f) }

    // РџРѕР·РёС†РёРё FAB Рё РєР°СЂС‚РѕС‡РєРё (РґР»СЏ scrim Рё В«РІС‹Р»РµС‚Р°В»)
    var fabCenterInRoot by remember { mutableStateOf(Offset.Zero) }
    var fabSize by remember { mutableStateOf(IntSize.Zero) }
    var overlayTopLeftInRoot by remember { mutableStateOf(Offset.Zero) }
    var overlaySize by remember { mutableStateOf(IntSize.Zero) }
    var cardCenterInRoot by remember { mutableStateOf(Offset.Zero) }

    // Scrim/blur РїСЂРѕРіСЂРµСЃСЃ [0..1]
    val scrimProgress = remember { Animatable(0f) }

    // РџР°СЂР°РјРµС‚СЂС‹ Р·Р°РєСЂС‹С‚РёСЏ/РІС‹Р»РµС‚Р°
    val exitAlpha = remember { Animatable(1f) }
    val exitRotationZ = remember { Animatable(0f) }
    val exitTx = remember { Animatable(0f) }
    val exitTy = remember { Animatable(0f) }
    val exitScale = remember { Animatable(1f) }

    // РџСѓР»СЊСЃ/РїРѕРґСЃРІРµС‚РєР° FAB
    val fabPulseProgress = remember { Animatable(0f) }
    val fabScale = remember { Animatable(1f) }

    var closeJob: Job? by remember { mutableStateOf(null) }
    var spinJob: Job? by remember { mutableStateOf(null) }

    // Р¦РІРµС‚Р° РІС‹РЅРµСЃРµРЅС‹ РґР»СЏ Canvas
    val primaryColor = MaterialTheme.colorScheme.primary
    val scrimSurfaceColor = MaterialTheme.colorScheme.surface

    fun parseIntOrNull(text: String): Int? = text.trim().toIntOrNull()

    fun validateInputs(): IntRange? {
        val from = parseIntOrNull(fromText)
        val to = parseIntOrNull(toText)
        if (from == null || to == null) {
            scope.launch { snackbarHostState.showSnackbar("Р’РІРµРґРёС‚Рµ РєРѕСЂСЂРµРєС‚РЅС‹Рµ С‡РёСЃР»Р° РІ РїРѕР»СЏ 'РћРў' Рё 'Р”Рћ'") }
            return null
        }
        return if (from <= to) from..to else to..from
    }

    fun resetExitTransforms() = scope.launch {
        exitAlpha.snapTo(1f)
        exitRotationZ.snapTo(0f)
        exitTx.snapTo(0f)
        exitTy.snapTo(0f)
        exitScale.snapTo(1f)
    }

    fun triggerFabPulse() = scope.launch {
        haptics.performHapticFeedback(HapticFeedbackType.LongPress)
        view.playSoundEffect(SoundEffectConstants.CLICK)

        fabPulseProgress.snapTo(0f)
        val ring = launch {
            fabPulseProgress.animateTo(1f, tween(460, easing = FastOutSlowInEasing))
            fabPulseProgress.snapTo(0f)
        }
        val scale = launch {
            fabScale.animateTo(1.08f, spring(dampingRatio = 0.5f, stiffness = Spring.StiffnessMedium))
            fabScale.animateTo(1f, spring(dampingRatio = 0.8f, stiffness = Spring.StiffnessLow))
        }
        ring.join(); scale.join()
    }

    fun openOverlay() = scope.launch {
        isCardVisible = true
        scrimProgress.stop()
        scrimProgress.animateTo(1f, tween(380, easing = FastOutSlowInEasing))
    }

    // РЎРїРёРЅ СЃ Р·Р°РјРµРґР»РµРЅРёРµРј + Р»С‘РіРєРёРј РґР¶РёС‚С‚РµСЂРѕРј (1вЂ“60СЃ), СЂРµР·СѓР»СЊС‚Р°С‚ РїРѕРєР°Р·С‹РІР°РµС‚СЃСЏ Рє С„РёРЅРёС€Сѓ
    fun spinAndReveal(range: IntRange, inputDelayMs: Int) {
        val delayMs = inputDelayMs.coerceIn(MIN_DELAY_MS, MAX_DELAY_MS)
        spinJob?.cancel()
        spinJob = scope.launch {
            isSpinning = true

            val norm = (delayMs - MIN_DELAY_MS).toFloat() / (MAX_DELAY_MS - MIN_DELAY_MS).toFloat()
            val weight = sqrt(1f - norm) // 1..0
            val rpsShort = 2.0f
            val rpsLong = 0.15f
            val rps = rpsLong + (rpsShort - rpsLong) * weight

            val totalRotations = max(0f, rps * (delayMs / 1000f))
            val wholeRotations = floor(totalRotations)
            val baseDelta = -(wholeRotations * 360f + 180f) // РїСЂРѕС‚РёРІ С‡Р°СЃРѕРІРѕР№, С„РёРЅР°Р» РЅР° РґСЂСѓРіРѕР№ СЃС‚РѕСЂРѕРЅРµ

            rotYAnim.stop()
            rotYAnim.snapTo(lastStopAngle)
            val startAngle = lastStopAngle
            val targetAngle = startAngle + baseDelta

            fun isFront(angle: Float): Boolean {
                val rm = ((angle % 360f) + 360f) % 360f
                return rm < 90f || rm > 270f
            }
            val targetIsFront = isFront(targetAngle)
            val newNumber = range.random()

            val ampShort = 18f
            val ampLong = 8f
            val amp0 = ampLong + (ampShort - ampLong) * weight // deg

            fun easeOutQuint(p: Float): Float {
                val om = 1f - p
                return 1f - om * om * om * om * om
            }

            var revealed = false
            val start = withFrameNanos { it }
            var now = start
            while (true) {
                now = withFrameNanos { it }
                val elapsedMs = ((now - start) / 1_000_000).toInt()
                val p = (elapsedMs.toFloat() / delayMs).coerceIn(0f, 1f)
                val s = easeOutQuint(p)

                val tSec = (now - start) / 1_000_000_000f
                val amp = amp0 * (1f - s)
                val jitter = amp * (
                        0.6f * sin(2f * PI.toFloat() * 3.2f * tSec) +
                                0.4f * sin(2f * PI.toFloat() * 5.1f * tSec + 0.7f)
                        )

                val angle = startAngle + baseDelta * s + jitter
                rotYAnim.snapTo(angle)

                if (!revealed && delayMs - elapsedMs <= min(250, delayMs / 4)) {
                    if (targetIsFront) frontValue = newNumber else backValue = newNumber
                    revealed = true
                }

                if (p >= 1f) break
            }

            rotYAnim.snapTo(targetAngle)
            lastStopAngle = targetAngle
            isSpinning = false
        }
    }

    fun startClose() {
        if (!isCardVisible || isClosing) return
        isClosing = true
        // РџСЂРµСЂРІС‘Рј СЃРїРёРЅ, СѓР±РµСЂС‘Рј С„Р»Р°Рі
        spinJob?.cancel()
        spinJob = null
        isSpinning = false

        closeJob?.cancel()
        closeJob = scope.launch {
            val dx = fabCenterInRoot.x - cardCenterInRoot.x
            val dy = fabCenterInRoot.y - cardCenterInRoot.y

            val a1 = async { scrimProgress.animateTo(0f, tween(320, easing = FastOutSlowInEasing)) }
            val a2 = async { exitRotationZ.animateTo(-420f, tween(420, easing = FastOutSlowInEasing)) }
            val a3 = async { exitScale.animateTo(0.65f, spring(dampingRatio = 0.6f, stiffness = Spring.StiffnessLow)) }
            val a4 = async { exitTx.animateTo(dx, spring(dampingRatio = 0.6f, stiffness = Spring.StiffnessLow)) }
            val a5 = async { exitTy.animateTo(dy, spring(dampingRatio = 0.6f, stiffness = Spring.StiffnessLow)) }
            val a6 = async { exitAlpha.animateTo(0f, tween(380, easing = FastOutSlowInEasing)) }

            listOf(a1, a2, a3, a4, a5, a6).joinAll()
            triggerFabPulse()

            isCardVisible = false
            isClosing = false
            lastStopAngle = 0f
            rotYAnim.snapTo(0f)
            frontValue = null
            backValue = null
            resetExitTransforms()
        }
    }

    BackHandler(enabled = isCardVisible && !isClosing) { startClose() }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Р§РёСЃР»Рѕ") },
                navigationIcon = {
                    IconButton(onClick = onBack) { Icon(Icons.Outlined.ArrowBack, contentDescription = "РќР°Р·Р°Рґ") }
                }
            )
        },
        floatingActionButton = {
            // РљРѕРЅС‚РµР№РЅРµСЂ FAB: РїРѕР·РёС†РёСЏ + РїСѓР»СЊСЃ
            Box(
                modifier = Modifier.onGloballyPositioned { coords ->
                    fabSize = coords.size
                    val pos = coords.positionInRoot()
                    fabCenterInRoot = Offset(pos.x + fabSize.width / 2f, pos.y + fabSize.height / 2f)
                }
            ) {
                // РџСѓР»СЊСЃ-РєРѕР»РµС‡РєРѕ РїРѕР·Р°РґРё FAB (С†РІРµС‚ РІС‹РЅРµСЃРµРЅ РёР· Canvas)
                if (fabPulseProgress.value > 0f && fabSize.width > 0 && fabSize.height > 0) {
                    Canvas(modifier = Modifier.matchParentSize()) {
                        val c = Offset(size.width / 2f, size.height / 2f)
                        val baseR = min(size.width, size.height) / 2f
                        val t = fabPulseProgress.value
                        val r = baseR + baseR * 1.2f * t
                        drawCircle(
                            brush = Brush.radialGradient(
                                colors = listOf(
                                    primaryColor.copy(alpha = 0.35f * (1f - t)),
                                    primaryColor.copy(alpha = 0.15f * (1f - t)),
                                    primaryColor.copy(alpha = 0f)
                                ),
                                center = c,
                                radius = max(1f, r)
                            ),
                            center = c,
                            radius = max(1f, r)
                        )
                    }
                }

                FloatingActionButton(
                    onClick = {
                        if (isClosing) return@FloatingActionButton
                        val range = validateInputs() ?: return@FloatingActionButton
                        val delayParsed = parseIntOrNull(delayText) ?: MIN_DELAY_MS
                        val delayMs = delayParsed.coerceIn(MIN_DELAY_MS, MAX_DELAY_MS)

                        if (!isCardVisible) openOverlay()
                        spinAndReveal(range, delayMs)
                    },
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    contentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                    modifier = Modifier.graphicsLayer {
                        scaleX = fabScale.value
                        scaleY = fabScale.value
                    }
                ) {
                    Icon(Icons.Outlined.Autorenew, contentDescription = "РЎРіРµРЅРµСЂРёСЂРѕРІР°С‚СЊ")
                }
            }
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { inner ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
        ) {
            // РџРѕРґР»РѕР¶РєР°: Р»С‘РіРєРёР№ blur РїРѕ РјРµСЂРµ РѕС‚РєСЂС‹С‚РёСЏ
            val blurDp = (6f * scrimProgress.value).dp
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .blur(blurDp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    "РћРў",
                    style = MaterialTheme.typography.displaySmall,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                BasicTextField(
                    value = fromText,
                    onValueChange = { fromText = it.filter { ch -> ch.isDigit() || ch == '-' } },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                )
                Spacer(Modifier.height(8.dp))
                Text(
                    "Р”Рћ",
                    style = MaterialTheme.typography.displaySmall,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                BasicTextField(
                    value = toText,
                    onValueChange = { toText = it.filter { ch -> ch.isDigit() || ch == '-' } },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    textStyle = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                )
                Spacer(Modifier.height(8.dp))
                Text(
                    "Р—Р°РґРµСЂР¶РєР°, РјСЃ (1000вЂ“60000)",
                    style = MaterialTheme.typography.titleSmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                BasicTextField(
                    value = delayText,
                    onValueChange = { delayText = it.filter { ch -> ch.isDigit() } },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    textStyle = MaterialTheme.typography.titleLarge.copy(
                        textAlign = TextAlign.Center,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                )
                Spacer(Modifier.height(24.dp))
            }

            // РћРІРµСЂР»РµР№ (РїРѕРєР° РѕС‚РєСЂС‹С‚ РёР»Рё РїРѕРєР° scrim РЅРµ СЃРІРµСЂРЅСѓР»СЃСЏ РґРѕ РєРѕРЅС†Р°)
            if (isCardVisible || scrimProgress.value > 0.001f) {
                val overlayClickInteraction = remember { MutableInteractionSource() }

                // РљР»РёРєР°Р±РµР»СЊРЅС‹Р№ С„РѕРЅ вЂ” Р·Р°РєСЂС‹С‚РёРµ РїРѕ РїСѓСЃС‚РѕРјСѓ РјРµСЃС‚Сѓ
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .onGloballyPositioned { coords ->
                            overlayTopLeftInRoot = coords.positionInRoot()
                            overlaySize = coords.size
                        }
                        .clickable(
                            interactionSource = overlayClickInteraction,
                            indication = null,
                            enabled = isCardVisible && !isClosing
                        ) { startClose() }
                ) {
                    // Р Р°РґРёР°Р»СЊРЅС‹Р№ scrim РѕС‚ FAB (radius >= 1f вЂ” Р±РµР· РєСЂСЌС€РµР№)
                    if (overlaySize.width > 0 && overlaySize.height > 0) {
                        val maxRadius = hypot(overlaySize.width.toFloat(), overlaySize.height.toFloat())
                        val fabCenterLocal = fabCenterInRoot - overlayTopLeftInRoot
                        val radius = max(1f, scrimProgress.value * maxRadius)
                        val alpha = 0.75f * scrimProgress.value

                        Canvas(modifier = Modifier.fillMaxSize()) {
                            drawCircle(
                                brush = Brush.radialGradient(
                                    colors = listOf(
                                        scrimSurfaceColor.copy(alpha = 0f),
                                        scrimSurfaceColor.copy(alpha = alpha * 0.2f),
                                        scrimSurfaceColor.copy(alpha = alpha * 0.45f),
                                        scrimSurfaceColor.copy(alpha = alpha)
                                    ),
                                    center = fabCenterLocal,
                                    radius = radius
                                ),
                                center = fabCenterLocal,
                                radius = radius
                            )
                        }
                    }
                }

                // РўРµРєСѓС‰РёР№ СѓРіРѕР» [0..360) РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅРѕ РІРЅРµС€РЅРµР№ В«С€РєР°Р»С‹В»
                val rotationMod = ((rotYAnim.value % 360f) + 360f) % 360f
                val showFront = rotationMod < 90f || rotationMod > 270f

                // РџСЂСѓР¶РёРЅРєР° РјР°СЃС€С‚Р°Р±Р° РЅР° 90В° (РєР°Р¶РґС‹Рµ 180В°)
                val flipProgress01 = (rotationMod % 180f) / 180f
                val bump = 0.05f * sin((flipProgress01 * PI).toFloat())
                val scaleFromFlip = 1f + bump

                // РљР°СЂС‚РѕС‡РєР° РІ С†РµРЅС‚СЂРµ
                Box(
                    modifier = Modifier
                        .size(200.dp)
                        .align(Alignment.Center)
                        .onGloballyPositioned { coords ->
                            val bounds = coords.boundsInRoot()
                            cardCenterInRoot = bounds.center
                        }
                        .clickable(
                            interactionSource = remember { MutableInteractionSource() },
                            indication = null,
                            enabled = isCardVisible && !isClosing
                        ) { /* РїРµСЂРµС…РІР°С‚С‹РІР°РµРј РєР»РёРє */ }
                        .graphicsLayer {
                            // Р’РђР–РќРћ: РёСЃРїРѕР»СЊР·СѓРµРј rotYAnim.value, С‡С‚РѕР±С‹ РЅРµ РєРѕРЅС„Р»РёРєС‚РѕРІР°С‚СЊ РїРѕ РёРјРµРЅРё
                            rotationY = rotYAnim.value
                            rotationZ = exitRotationZ.value
                            val s = scaleFromFlip * exitScale.value
                            scaleX = s
                            scaleY = s
                            translationX = exitTx.value
                            translationY = exitTy.value
                            cameraDistance = 8f * density
                            alpha = exitAlpha.value
                        }
                ) {
                    if (showFront) {
                        Card(
                            modifier = Modifier.fillMaxSize(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.primaryContainer
                            )
                        ) {
                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                val text = if (isSpinning) "" else (frontValue?.toString() ?: "РќР°Р¶РјРёС‚Рµ FAB")
                                Text(
                                    text = text,
                                    style = MaterialTheme.typography.displayLarge,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }
                    } else {
                        Card(
                            modifier = Modifier
                                .fillMaxSize()
                                // СЌС‚Рѕ rotationY СЃРІРѕР№СЃС‚РІР° graphicsLayer, РќР• РЅР°С€ rotYAnim
                                .graphicsLayer { rotationY = 180f },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.secondaryContainer
                            )
                        ) {
                            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                val text = if (isSpinning) "" else (backValue?.toString() ?: "")
                                Text(
                                    text = text,
                                    style = MaterialTheme.typography.displayLarge,
                                    color = MaterialTheme.colorScheme.onSecondaryContainer
                                )
                            }
                        }
                    }
                }
            }
        }
    }

    // Р•СЃР»Рё РѕРІРµСЂР»РµР№ РѕС‚РєСЂС‹С‚ вЂ” СЃР±СЂР°СЃС‹РІР°РµРј В«РІС‹Р»РµС‚В»-СЃРѕСЃС‚РѕСЏРЅРёСЏ
    LaunchedEffect(isCardVisible) { if (isCardVisible) resetExitTransforms() }
}


================================================
FILE: app/src/main/java/com/byteflipper/random/ui/presets/AddListPresetScreen.kt
================================================
package com.byteflipper.random.ui.presets

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Add
import androidx.compose.material.icons.outlined.ArrowBack
import androidx.compose.material.icons.outlined.Delete
import androidx.compose.material3.Button
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.byteflipper.random.data.preset.ListPreset
import com.byteflipper.random.data.preset.ListPresetRepository
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddListPresetScreen(onBack: () -> Unit) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val context = androidx.compose.ui.platform.LocalContext.current
    val repository = remember { ListPresetRepository.fromContext(context) }

    var name by rememberSaveable { mutableStateOf("") }
    val items = remember { mutableStateListOf<String>() }
    var newItem by rememberSaveable { mutableStateOf("") }

    fun save() {
        val trimmed = items.map { it.trim() }.filter { it.isNotEmpty() }
        if (name.isBlank() || trimmed.isEmpty()) {
            scope.launch { snackbarHostState.showSnackbar("Р’РІРµРґРёС‚Рµ РЅР°Р·РІР°РЅРёРµ Рё РјРёРЅРёРјСѓРј РѕРґРёРЅ СЌР»РµРјРµРЅС‚") }
            return
        }
        scope.launch {
            repository.upsert(ListPreset(name = name.trim(), items = trimmed))
            onBack()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("РќРѕРІС‹Р№ СЃРїРёСЃРѕРє") }, navigationIcon = {
                IconButton(onClick = onBack) { Icon(Icons.Outlined.ArrowBack, contentDescription = null) }
            })
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { inner ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(16.dp),
            verticalArrangement = Arrangement.Top
        ) {
            OutlinedTextField(
                value = name,
                onValueChange = { name = it },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                label = { Text("РќР°Р·РІР°РЅРёРµ РїСЂРµСЃРµС‚Р°") }
            )
            Spacer(Modifier.height(12.dp))

            Row(verticalAlignment = Alignment.CenterVertically) {
                OutlinedTextField(
                    value = newItem,
                    onValueChange = { newItem = it },
                    modifier = Modifier.weight(1f),
                    singleLine = true,
                    label = { Text("Р­Р»РµРјРµРЅС‚") }
                )
                IconButton(onClick = {
                    val t = newItem.trim()
                    if (t.isNotEmpty()) {
                        items.add(t)
                        newItem = ""
                    }
                }) {
                    Icon(Icons.Outlined.Add, contentDescription = "Р”РѕР±Р°РІРёС‚СЊ")
                }
            }
            Spacer(Modifier.height(12.dp))
            Divider()
            Spacer(Modifier.height(8.dp))

            LazyColumn(modifier = Modifier.weight(1f, fill = false)) {
                itemsIndexed(items) { index, item ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 6.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(text = "${index + 1}. $item", modifier = Modifier.weight(1f))
                        IconButton(onClick = { items.removeAt(index) }) {
                            Icon(Icons.Outlined.Delete, contentDescription = "РЈРґР°Р»РёС‚СЊ")
                        }
                    }
                }
            }

            Button(onClick = { save() }, modifier = Modifier.fillMaxWidth()) {
                Text("РЎРѕС…СЂР°РЅРёС‚СЊ")
            }
        }
    }
}





================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Color.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.ui.graphics.Color

val primaryLight = Color(0xFF236488)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFC8E6FF)
val onPrimaryContainerLight = Color(0xFF004C6D)
val secondaryLight = Color(0xFF4F616E)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFD2E5F5)
val onSecondaryContainerLight = Color(0xFF384956)
val tertiaryLight = Color(0xFF63597C)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFE9DDFF)
val onTertiaryContainerLight = Color(0xFF4B4263)
val errorLight = Color(0xFFBA1A1A)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFDAD6)
val onErrorContainerLight = Color(0xFF93000A)
val backgroundLight = Color(0xFFF6FAFE)
val onBackgroundLight = Color(0xFF181C20)
val surfaceLight = Color(0xFFF6FAFE)
val onSurfaceLight = Color(0xFF181C20)
val surfaceVariantLight = Color(0xFFDDE3EA)
val onSurfaceVariantLight = Color(0xFF41484D)
val outlineLight = Color(0xFF71787E)
val outlineVariantLight = Color(0xFFC1C7CE)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF2D3135)
val inverseOnSurfaceLight = Color(0xFFEEF1F6)
val inversePrimaryLight = Color(0xFF93CDF6)
val surfaceDimLight = Color(0xFFD7DADF)
val surfaceBrightLight = Color(0xFFF6FAFE)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF1F4F9)
val surfaceContainerLight = Color(0xFFEBEEF3)
val surfaceContainerHighLight = Color(0xFFE5E8ED)
val surfaceContainerHighestLight = Color(0xFFDFE3E7)

val primaryLightMediumContrast = Color(0xFF003A55)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF367398)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF273844)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF5E6F7D)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF3A3151)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF72688B)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF740006)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCF2C27)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFF6FAFE)
val onBackgroundLightMediumContrast = Color(0xFF181C20)
val surfaceLightMediumContrast = Color(0xFFF6FAFE)
val onSurfaceLightMediumContrast = Color(0xFF0D1215)
val surfaceVariantLightMediumContrast = Color(0xFFDDE3EA)
val onSurfaceVariantLightMediumContrast = Color(0xFF30373C)
val outlineLightMediumContrast = Color(0xFF4D5359)
val outlineVariantLightMediumContrast = Color(0xFF676E74)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF2D3135)
val inverseOnSurfaceLightMediumContrast = Color(0xFFEEF1F6)
val inversePrimaryLightMediumContrast = Color(0xFF93CDF6)
val surfaceDimLightMediumContrast = Color(0xFFC3C7CB)
val surfaceBrightLightMediumContrast = Color(0xFFF6FAFE)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF1F4F9)
val surfaceContainerLightMediumContrast = Color(0xFFE5E8ED)
val surfaceContainerHighLightMediumContrast = Color(0xFFDADDE2)
val surfaceContainerHighestLightMediumContrast = Color(0xFFCED2D7)

val primaryLightHighContrast = Color(0xFF003046)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF004E70)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF1D2E3A)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF3A4B58)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF302747)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF4D4465)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600004)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF98000A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFF6FAFE)
val onBackgroundLightHighContrast = Color(0xFF181C20)
val surfaceLightHighContrast = Color(0xFFF6FAFE)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFDDE3EA)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF262D32)
val outlineVariantLightHighContrast = Color(0xFF434A50)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF2D3135)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFF93CDF6)
val surfaceDimLightHighContrast = Color(0xFFB5B9BE)
val surfaceBrightLightHighContrast = Color(0xFFF6FAFE)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFEEF1F6)
val surfaceContainerLightHighContrast = Color(0xFFDFE3E7)
val surfaceContainerHighLightHighContrast = Color(0xFFD1D5D9)
val surfaceContainerHighestLightHighContrast = Color(0xFFC3C7CB)

val primaryDark = Color(0xFF93CDF6)
val onPrimaryDark = Color(0xFF00344C)
val primaryContainerDark = Color(0xFF004C6D)
val onPrimaryContainerDark = Color(0xFFC8E6FF)
val secondaryDark = Color(0xFFB6C9D8)
val onSecondaryDark = Color(0xFF21323E)
val secondaryContainerDark = Color(0xFF384956)
val onSecondaryContainerDark = Color(0xFFD2E5F5)
val tertiaryDark = Color(0xFFCDC0E9)
val onTertiaryDark = Color(0xFF342B4B)
val tertiaryContainerDark = Color(0xFF4B4263)
val onTertiaryContainerDark = Color(0xFFE9DDFF)
val errorDark = Color(0xFFFFB4AB)
val onErrorDark = Color(0xFF690005)
val errorContainerDark = Color(0xFF93000A)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF101417)
val onBackgroundDark = Color(0xFFDFE3E7)
val surfaceDark = Color(0xFF101417)
val onSurfaceDark = Color(0xFFDFE3E7)
val surfaceVariantDark = Color(0xFF41484D)
val onSurfaceVariantDark = Color(0xFFC1C7CE)
val outlineDark = Color(0xFF8B9198)
val outlineVariantDark = Color(0xFF41484D)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFDFE3E7)
val inverseOnSurfaceDark = Color(0xFF2D3135)
val inversePrimaryDark = Color(0xFF236488)
val surfaceDimDark = Color(0xFF101417)
val surfaceBrightDark = Color(0xFF353A3D)
val surfaceContainerLowestDark = Color(0xFF0A0F12)
val surfaceContainerLowDark = Color(0xFF181C20)
val surfaceContainerDark = Color(0xFF1C2024)
val surfaceContainerHighDark = Color(0xFF262A2E)
val surfaceContainerHighestDark = Color(0xFF313539)

val primaryDarkMediumContrast = Color(0xFFBAE1FF)
val onPrimaryDarkMediumContrast = Color(0xFF00293D)
val primaryContainerDarkMediumContrast = Color(0xFF5C97BD)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFCCDFEF)
val onSecondaryDarkMediumContrast = Color(0xFF162833)
val secondaryContainerDarkMediumContrast = Color(0xFF8193A1)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFE3D6FF)
val onTertiaryDarkMediumContrast = Color(0xFF292040)
val tertiaryContainerDarkMediumContrast = Color(0xFF968BB1)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFD2CC)
val onErrorDarkMediumContrast = Color(0xFF540003)
val errorContainerDarkMediumContrast = Color(0xFFFF5449)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF101417)
val onBackgroundDarkMediumContrast = Color(0xFFDFE3E7)
val surfaceDarkMediumContrast = Color(0xFF101417)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF41484D)
val onSurfaceVariantDarkMediumContrast = Color(0xFFD7DDE4)
val outlineDarkMediumContrast = Color(0xFFACB3B9)
val outlineVariantDarkMediumContrast = Color(0xFF8B9197)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFDFE3E7)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF262A2E)
val inversePrimaryDarkMediumContrast = Color(0xFF004D6F)
val surfaceDimDarkMediumContrast = Color(0xFF101417)
val surfaceBrightDarkMediumContrast = Color(0xFF414549)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF05080B)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1A1E22)
val surfaceContainerDarkMediumContrast = Color(0xFF24282C)
val surfaceContainerHighDarkMediumContrast = Color(0xFF2F3337)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3A3E42)

val primaryDarkHighContrast = Color(0xFFE3F2FF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFF8FC9F2)
val onPrimaryContainerDarkHighContrast = Color(0xFF000D16)
val secondaryDarkHighContrast = Color(0xFFE3F2FF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFB3C5D4)
val onSecondaryContainerDarkHighContrast = Color(0xFF000D16)
val tertiaryDarkHighContrast = Color(0xFFF5EDFF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFC9BCE5)
val onTertiaryContainerDarkHighContrast = Color(0xFF0E0524)
val errorDarkHighContrast = Color(0xFFFFECE9)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
val onErrorContainerDarkHighContrast = Color(0xFF220001)
val backgroundDarkHighContrast = Color(0xFF101417)
val onBackgroundDarkHighContrast = Color(0xFFDFE3E7)
val surfaceDarkHighContrast = Color(0xFF101417)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF41484D)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFEBF1F8)
val outlineVariantDarkHighContrast = Color(0xFFBDC3CA)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFDFE3E7)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF004D6F)
val surfaceDimDarkHighContrast = Color(0xFF101417)
val surfaceBrightDarkHighContrast = Color(0xFF4C5155)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF1C2024)
val surfaceContainerDarkHighContrast = Color(0xFF2D3135)
val surfaceContainerHighDarkHighContrast = Color(0xFF383C40)
val surfaceContainerHighestDarkHighContrast = Color(0xFF43474B)










================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Theme.kt
================================================
package com.byteflipper.random.ui.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext

private val lightScheme = lightColorScheme(
    primary = primaryLight,
    onPrimary = onPrimaryLight,
    primaryContainer = primaryContainerLight,
    onPrimaryContainer = onPrimaryContainerLight,
    secondary = secondaryLight,
    onSecondary = onSecondaryLight,
    secondaryContainer = secondaryContainerLight,
    onSecondaryContainer = onSecondaryContainerLight,
    tertiary = tertiaryLight,
    onTertiary = onTertiaryLight,
    tertiaryContainer = tertiaryContainerLight,
    onTertiaryContainer = onTertiaryContainerLight,
    error = errorLight,
    onError = onErrorLight,
    errorContainer = errorContainerLight,
    onErrorContainer = onErrorContainerLight,
    background = backgroundLight,
    onBackground = onBackgroundLight,
    surface = surfaceLight,
    onSurface = onSurfaceLight,
    surfaceVariant = surfaceVariantLight,
    onSurfaceVariant = onSurfaceVariantLight,
    outline = outlineLight,
    outlineVariant = outlineVariantLight,
    scrim = scrimLight,
    inverseSurface = inverseSurfaceLight,
    inverseOnSurface = inverseOnSurfaceLight,
    inversePrimary = inversePrimaryLight,
    surfaceDim = surfaceDimLight,
    surfaceBright = surfaceBrightLight,
    surfaceContainerLowest = surfaceContainerLowestLight,
    surfaceContainerLow = surfaceContainerLowLight,
    surfaceContainer = surfaceContainerLight,
    surfaceContainerHigh = surfaceContainerHighLight,
    surfaceContainerHighest = surfaceContainerHighestLight,
)

private val darkScheme = darkColorScheme(
    primary = primaryDark,
    onPrimary = onPrimaryDark,
    primaryContainer = primaryContainerDark,
    onPrimaryContainer = onPrimaryContainerDark,
    secondary = secondaryDark,
    onSecondary = onSecondaryDark,
    secondaryContainer = secondaryContainerDark,
    onSecondaryContainer = onSecondaryContainerDark,
    tertiary = tertiaryDark,
    onTertiary = onTertiaryDark,
    tertiaryContainer = tertiaryContainerDark,
    onTertiaryContainer = onTertiaryContainerDark,
    error = errorDark,
    onError = onErrorDark,
    errorContainer = errorContainerDark,
    onErrorContainer = onErrorContainerDark,
    background = backgroundDark,
    onBackground = onBackgroundDark,
    surface = surfaceDark,
    onSurface = onSurfaceDark,
    surfaceVariant = surfaceVariantDark,
    onSurfaceVariant = onSurfaceVariantDark,
    outline = outlineDark,
    outlineVariant = outlineVariantDark,
    scrim = scrimDark,
    inverseSurface = inverseSurfaceDark,
    inverseOnSurface = inverseOnSurfaceDark,
    inversePrimary = inversePrimaryDark,
    surfaceDim = surfaceDimDark,
    surfaceBright = surfaceBrightDark,
    surfaceContainerLowest = surfaceContainerLowestDark,
    surfaceContainerLow = surfaceContainerLowDark,
    surfaceContainer = surfaceContainerDark,
    surfaceContainerHigh = surfaceContainerHighDark,
    surfaceContainerHighest = surfaceContainerHighestDark,
)

private val mediumContrastLightColorScheme = lightColorScheme(
    primary = primaryLightMediumContrast,
    onPrimary = onPrimaryLightMediumContrast,
    primaryContainer = primaryContainerLightMediumContrast,
    onPrimaryContainer = onPrimaryContainerLightMediumContrast,
    secondary = secondaryLightMediumContrast,
    onSecondary = onSecondaryLightMediumContrast,
    secondaryContainer = secondaryContainerLightMediumContrast,
    onSecondaryContainer = onSecondaryContainerLightMediumContrast,
    tertiary = tertiaryLightMediumContrast,
    onTertiary = onTertiaryLightMediumContrast,
    tertiaryContainer = tertiaryContainerLightMediumContrast,
    onTertiaryContainer = onTertiaryContainerLightMediumContrast,
    error = errorLightMediumContrast,
    onError = onErrorLightMediumContrast,
    errorContainer = errorContainerLightMediumContrast,
    onErrorContainer = onErrorContainerLightMediumContrast,
    background = backgroundLightMediumContrast,
    onBackground = onBackgroundLightMediumContrast,
    surface = surfaceLightMediumContrast,
    onSurface = onSurfaceLightMediumContrast,
    surfaceVariant = surfaceVariantLightMediumContrast,
    onSurfaceVariant = onSurfaceVariantLightMediumContrast,
    outline = outlineLightMediumContrast,
    outlineVariant = outlineVariantLightMediumContrast,
    scrim = scrimLightMediumContrast,
    inverseSurface = inverseSurfaceLightMediumContrast,
    inverseOnSurface = inverseOnSurfaceLightMediumContrast,
    inversePrimary = inversePrimaryLightMediumContrast,
    surfaceDim = surfaceDimLightMediumContrast,
    surfaceBright = surfaceBrightLightMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestLightMediumContrast,
    surfaceContainerLow = surfaceContainerLowLightMediumContrast,
    surfaceContainer = surfaceContainerLightMediumContrast,
    surfaceContainerHigh = surfaceContainerHighLightMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestLightMediumContrast,
)

private val highContrastLightColorScheme = lightColorScheme(
    primary = primaryLightHighContrast,
    onPrimary = onPrimaryLightHighContrast,
    primaryContainer = primaryContainerLightHighContrast,
    onPrimaryContainer = onPrimaryContainerLightHighContrast,
    secondary = secondaryLightHighContrast,
    onSecondary = onSecondaryLightHighContrast,
    secondaryContainer = secondaryContainerLightHighContrast,
    onSecondaryContainer = onSecondaryContainerLightHighContrast,
    tertiary = tertiaryLightHighContrast,
    onTertiary = onTertiaryLightHighContrast,
    tertiaryContainer = tertiaryContainerLightHighContrast,
    onTertiaryContainer = onTertiaryContainerLightHighContrast,
    error = errorLightHighContrast,
    onError = onErrorLightHighContrast,
    errorContainer = errorContainerLightHighContrast,
    onErrorContainer = onErrorContainerLightHighContrast,
    background = backgroundLightHighContrast,
    onBackground = onBackgroundLightHighContrast,
    surface = surfaceLightHighContrast,
    onSurface = onSurfaceLightHighContrast,
    surfaceVariant = surfaceVariantLightHighContrast,
    onSurfaceVariant = onSurfaceVariantLightHighContrast,
    outline = outlineLightHighContrast,
    outlineVariant = outlineVariantLightHighContrast,
    scrim = scrimLightHighContrast,
    inverseSurface = inverseSurfaceLightHighContrast,
    inverseOnSurface = inverseOnSurfaceLightHighContrast,
    inversePrimary = inversePrimaryLightHighContrast,
    surfaceDim = surfaceDimLightHighContrast,
    surfaceBright = surfaceBrightLightHighContrast,
    surfaceContainerLowest = surfaceContainerLowestLightHighContrast,
    surfaceContainerLow = surfaceContainerLowLightHighContrast,
    surfaceContainer = surfaceContainerLightHighContrast,
    surfaceContainerHigh = surfaceContainerHighLightHighContrast,
    surfaceContainerHighest = surfaceContainerHighestLightHighContrast,
)

private val mediumContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkMediumContrast,
    onPrimary = onPrimaryDarkMediumContrast,
    primaryContainer = primaryContainerDarkMediumContrast,
    onPrimaryContainer = onPrimaryContainerDarkMediumContrast,
    secondary = secondaryDarkMediumContrast,
    onSecondary = onSecondaryDarkMediumContrast,
    secondaryContainer = secondaryContainerDarkMediumContrast,
    onSecondaryContainer = onSecondaryContainerDarkMediumContrast,
    tertiary = tertiaryDarkMediumContrast,
    onTertiary = onTertiaryDarkMediumContrast,
    tertiaryContainer = tertiaryContainerDarkMediumContrast,
    onTertiaryContainer = onTertiaryContainerDarkMediumContrast,
    error = errorDarkMediumContrast,
    onError = onErrorDarkMediumContrast,
    errorContainer = errorContainerDarkMediumContrast,
    onErrorContainer = onErrorContainerDarkMediumContrast,
    background = backgroundDarkMediumContrast,
    onBackground = onBackgroundDarkMediumContrast,
    surface = surfaceDarkMediumContrast,
    onSurface = onSurfaceDarkMediumContrast,
    surfaceVariant = surfaceVariantDarkMediumContrast,
    onSurfaceVariant = onSurfaceVariantDarkMediumContrast,
    outline = outlineDarkMediumContrast,
    outlineVariant = outlineVariantDarkMediumContrast,
    scrim = scrimDarkMediumContrast,
    inverseSurface = inverseSurfaceDarkMediumContrast,
    inverseOnSurface = inverseOnSurfaceDarkMediumContrast,
    inversePrimary = inversePrimaryDarkMediumContrast,
    surfaceDim = surfaceDimDarkMediumContrast,
    surfaceBright = surfaceBrightDarkMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkMediumContrast,
    surfaceContainerLow = surfaceContainerLowDarkMediumContrast,
    surfaceContainer = surfaceContainerDarkMediumContrast,
    surfaceContainerHigh = surfaceContainerHighDarkMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkMediumContrast,
)

private val highContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkHighContrast,
    onPrimary = onPrimaryDarkHighContrast,
    primaryContainer = primaryContainerDarkHighContrast,
    onPrimaryContainer = onPrimaryContainerDarkHighContrast,
    secondary = secondaryDarkHighContrast,
    onSecondary = onSecondaryDarkHighContrast,
    secondaryContainer = secondaryContainerDarkHighContrast,
    onSecondaryContainer = onSecondaryContainerDarkHighContrast,
    tertiary = tertiaryDarkHighContrast,
    onTertiary = onTertiaryDarkHighContrast,
    tertiaryContainer = tertiaryContainerDarkHighContrast,
    onTertiaryContainer = onTertiaryContainerDarkHighContrast,
    error = errorDarkHighContrast,
    onError = onErrorDarkHighContrast,
    errorContainer = errorContainerDarkHighContrast,
    onErrorContainer = onErrorContainerDarkHighContrast,
    background = backgroundDarkHighContrast,
    onBackground = onBackgroundDarkHighContrast,
    surface = surfaceDarkHighContrast,
    onSurface = onSurfaceDarkHighContrast,
    surfaceVariant = surfaceVariantDarkHighContrast,
    onSurfaceVariant = onSurfaceVariantDarkHighContrast,
    outline = outlineDarkHighContrast,
    outlineVariant = outlineVariantDarkHighContrast,
    scrim = scrimDarkHighContrast,
    inverseSurface = inverseSurfaceDarkHighContrast,
    inverseOnSurface = inverseOnSurfaceDarkHighContrast,
    inversePrimary = inversePrimaryDarkHighContrast,
    surfaceDim = surfaceDimDarkHighContrast,
    surfaceBright = surfaceBrightDarkHighContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkHighContrast,
    surfaceContainerLow = surfaceContainerLowDarkHighContrast,
    surfaceContainer = surfaceContainerDarkHighContrast,
    surfaceContainerHigh = surfaceContainerHighDarkHighContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkHighContrast,
)

@Immutable
data class ColorFamily(
    val color: Color,
    val onColor: Color,
    val colorContainer: Color,
    val onColorContainer: Color
)

val unspecified_scheme = ColorFamily(
    Color.Unspecified, Color.Unspecified, Color.Unspecified, Color.Unspecified
)

@Composable
fun RandomTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable() () -> Unit
) {
  val colorScheme = when {
      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
          val context = LocalContext.current
          if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
      }
      
      darkTheme -> darkScheme
      else -> lightScheme
  }

  MaterialTheme(
    colorScheme = colorScheme,
    typography = Typography,
    content = content
  )
}




================================================
FILE: app/src/main/java/com/byteflipper/random/ui/theme/Type.kt
================================================
package com.byteflipper.random.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)


================================================
FILE: app/src/main/res/drawable/ic_launcher_background.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>



================================================
FILE: app/src/main/res/drawable/ic_launcher_foreground.xml
================================================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>


================================================
FILE: app/src/main/res/mipmap-anydpi/ic_launcher.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
================================================
[Non-text file]


================================================
FILE: app/src/main/res/values/colors.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>


================================================
FILE: app/src/main/res/values/strings.xml
================================================
<resources>
    <string name="app_name">Random</string>
</resources>


================================================
FILE: app/src/main/res/values/themes.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.Random" parent="android:Theme.Material.Light.NoActionBar" />
</resources>


================================================
FILE: app/src/main/res/xml/backup_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>


================================================
FILE: app/src/main/res/xml/data_extraction_rules.xml
================================================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>


================================================
FILE: app/src/test/java/com/byteflipper/random/ExampleUnitTest.kt
================================================
package com.byteflipper.random

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}


================================================
FILE: gradle/libs.versions.toml
================================================
[versions]
agp = "8.12.0"
kotlin = "2.2.10"
coreKtx = "1.17.0"
junit = "4.13.2"
junitVersion = "1.3.0"
espressoCore = "3.7.0"
lifecycleRuntimeKtx = "2.9.2"
activityCompose = "1.10.1"
composeBom = "2025.08.00"
navigationCompose = "2.9.3"
materialIconsExtended = "1.7.8"
room = "2.7.2"
ksp = "2.2.0-2.0.2"
navigationComposeVersion = "2.9.3"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }
androidx-material-icons-extended = { group = "androidx.compose.material", name = "material-icons-extended", version.ref = "materialIconsExtended" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationComposeVersion" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }




================================================
FILE: gradle/wrapper/gradle-wrapper.properties
================================================
#Thu Aug 14 22:02:28 CEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


